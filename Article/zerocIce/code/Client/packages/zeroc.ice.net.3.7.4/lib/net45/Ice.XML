<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ice</name>
    </assembly>
    <members>
        <member name="T:Ice.SignalPolicy">
            <summary>
            The signal policy for Ice.Application signal handling.
            </summary>
        </member>
        <member name="F:Ice.SignalPolicy.HandleSignals">
            <summary>
            If a signal is received, Ice.Application reacts to the signal
            by calling Communicator.destroy or Communicator.shutdown,
            or by calling a custom shutdown hook installed by the application.
            </summary>
        </member>
        <member name="F:Ice.SignalPolicy.NoSignalHandling">
            <summary>
            Any signal that is received is not intercepted and takes the default action.
            </summary>
        </member>
        <member name="T:Ice.Application">
            <summary>
            Utility base class that makes it easy to correctly initialize and finalize
            the Ice run time, as well as handle signals. Unless the application specifies
            a logger, Application installs a per-process logger that logs to the standard
            error output.
            Applications must create a derived class that implements the run method.
            A program can contain only one instance of this class.
            </summary>
        </member>
        <member name="M:Ice.Application.run(System.String[])">
            <summary>
            Called once the communicator has been initialized. The derived class must
            implement run, which is the application's starting method.
            </summary>
            <param name="args">The argument vector for the application. Application
            scans the argument vector passed to main for options that are
            specific to the Ice run time and removes them; therefore, the vector passed
            to run is free from Ice-related options and contains only options
            and arguments that are application-specific.</param>
            <returns>The run method should return zero for successful termination, and
            non-zero otherwise. Application.main returns the value returned by run.</returns>
        </member>
        <member name="M:Ice.Application.interruptCallback(System.Int32)">
            <summary>
            Override this method to provide a custom application interrupt
            hook. You must call callbackOnInterrupt for this method
            to be called. Note that the interruptCallback can be called
            concurrently with any other thread (including main) in your
            application--take appropriate concurrency precautions.
            </summary>
            <param name="sig">The cause of the interrupt.</param>
        </member>
        <member name="M:Ice.Application.#ctor(Ice.SignalPolicy)">
            <summary>
            Initializes an instance that handles signals according to the signal policy.
            If not signal policy is provided the default SinalPolicy.HandleSignals
            will be used, which calls Communicator.shutdown if a signal is received.
            </summary>
            <param name="signalPolicy">Determines how to respond to signals.</param>
        </member>
        <member name="M:Ice.Application.main(System.String[])">
            <summary>
            The application must call main after it has
            instantiated the derived class. main creates
            a communicator, establishes the specified signal policy, and,
            once run returns, destroys the communicator.
            The method prints an error message for any exception that propagates
            out of run and ensures that the communicator is
            destroyed correctly even if run completes abnormally.
            </summary>
            <param name="args">The arguments for the application (as passed to Main(string[])
            by the operating system.</param>
            <returns>The value returned by run. If run terminates with an exception,
            the return value is non-zero.</returns>
        </member>
        <member name="M:Ice.Application.main(System.String[],System.String)">
            <summary>
            The application must call main after it has
            instantiated the derived class. main creates
            a communicator, establishes the specified signal policy, and,
            once run returns, destroys the communicator.
            The method prints an error message for any exception that propagates
            out of run and ensures that the communicator is
            destroyed correctly even if run completes abnormally.
            </summary>
            <param name="args">The arguments for the application (as passed to Main(string[])
            by the operating system.</param>
            <param name="configFile">The configuration file with which to initialize
            Ice properties.</param>
            <returns>The value returned by run. If run terminates with an exception,
            the return value is non-zero.</returns>
        </member>
        <member name="M:Ice.Application.main(System.String[],Ice.InitializationData)">
            <summary>
            The application must call main after it has
            instantiated the derived class. main creates
            a communicator, establishes the specified signal policy, and,
            once run returns, destroys the communicator.
            The method prints an error message for any exception that propagates
            out of run and ensures that the communicator is
            destroyed correctly even if run completes abnormally.
            </summary>
            <param name="args">The arguments for the application (as passed to Main(string[])
            by the operating system.</param>
            <param name="initializationData">Additional data used to initialize the communicator.</param>
            <returns>The value returned by run. If run terminates with an exception,
            the return value is non-zero.</returns>
        </member>
        <member name="M:Ice.Application.appName">
            <summary>
            Returns the application name (which is also the value of Ice.ProgramName.
            This method is useful mainly for error messages that
            include the application name. Because appName is a static method, it is available from anywhere
            in the program.
            </summary>
            <returns>The name of the application.</returns>
        </member>
        <member name="M:Ice.Application.communicator">
            <summary>
            Returns the communicator for the application. Because communicator is a static method,
            it permits access to the communicator from anywhere in the program. Note that, as a consequence,
            you cannot have more than one instance of Application in a program.
            </summary>
            <returns>The communicator for the application.</returns>
        </member>
        <member name="M:Ice.Application.destroyOnInterrupt">
            <summary>
            Instructs Application to call Communicator.destroy on receipt of a signal.
            This is default signal handling policy established by the default constructor.
            </summary>
        </member>
        <member name="M:Ice.Application.shutdownOnInterrupt">
            <summary>
            Instructs Application to call Communicator.shutdown on receipt of a signal.
            </summary>
        </member>
        <member name="M:Ice.Application.ignoreInterrupt">
            <summary>
            Instructs Application to ignore signals.
            </summary>
        </member>
        <member name="M:Ice.Application.callbackOnInterrupt">
            <summary>
            Instructs Application to call interruptCallback on receipt of a signal.
            The derived class can intercept signals by overriding interruptCallback.
            </summary>
        </member>
        <member name="M:Ice.Application.holdInterrupt">
            <summary>
            Instructs Application to call to hold signals.
            </summary>
        </member>
        <member name="M:Ice.Application.releaseInterrupt">
            <summary>
            Instructs Application respond to signals. If a signal arrived since the last call
            to holdInterrupt, it is delivered once you call releaseInterrupt.
            </summary>
        </member>
        <member name="M:Ice.Application.interrupted">
            <summary>
            Determines whether the application shut down intentionally or was forced to shut down due to a signal.
            This is useful for logging purposes.
            </summary>
            <returns>True if a signal caused the communicator to shut down; false otherwise.</returns>
        </member>
        <member name="T:Ice.AsyncCallback">
            
             <summary>
             Callback that requires the application to down-cast the proxy.
             </summary>
            
        </member>
        <member name="T:Ice.OnewayCallback">
            
             <summary>
             Callback for the successful completion of an operation
             that returns no data.
             </summary>
            
        </member>
        <member name="T:Ice.SentCallback">
            
             <summary>
             Callback to inform when a call has been passed to the local
             transport.
             </summary>
            
        </member>
        <member name="T:Ice.ExceptionCallback">
            
             <summary>
             Called when an invocation raises an exception.
             </summary>
            
        </member>
        <member name="T:Ice.AsyncResult">
            
             <summary>
             <!-- TODO -->
             </summary>
        </member>
        <member name="M:Ice.BatchRequest.enqueue">
            <summary>
            Confirms the queuing of the batch request.
            </summary>
        </member>
        <member name="M:Ice.BatchRequest.getSize">
            <summary>
            Get the marshalled size of the request.
            </summary>
            <returns>The request size.</returns>
        </member>
        <member name="M:Ice.BatchRequest.getOperation">
            <summary>
            Get the name of the operation
            </summary>
            <returns>The request operation.</returns>
        </member>
        <member name="M:Ice.BatchRequest.getProxy">
            <summary>
            The proxy used to invoke the batch request.
            </summary>
            <returns>The request proxy.</returns>
        </member>
        <member name="T:Ice.DispatchInterceptor">
            <summary>
            Base class that allows a server intercept incoming requests.
            The application must derive a concrete class from DispatchInterceptor
            that implements the DispatchInterceptor.dispatch operation. An instance of this derived
            class can be registered with an object adapter like any other servant.
            A dispatch interceptor is useful particularly to automatically retry requests
            that have failed due to a recoverable error condition.
            </summary>
        </member>
        <member name="M:Ice.DispatchInterceptor.dispatch(Ice.Request)">
            <summary>
            Called by the Ice run time to dispatch an incoming request. The implementation
            of <code>dispatch</code> must dispatch the request to the actual servant.
            </summary>
            <param name="request">The details of the incoming request.</param>
            <returns>The task if dispatched asynchronously, null otherwise.</returns>
        </member>
        <member name="T:Ice.Exception">
            <summary>
            Base class for Ice exceptions.
            </summary>
        </member>
        <member name="M:Ice.Exception.Clone">
            <summary>
            Creates and returns a copy of this exception.
            </summary>
            <returns>A copy of this exception.</returns>
        </member>
        <member name="M:Ice.Exception.#ctor">
            <summary>
            Creates a default-initialized exception.
            </summary>
        </member>
        <member name="M:Ice.Exception.#ctor(System.Exception)">
            <summary>
            Creates a default-initialized exception and sets the InnerException
            property to the passed exception.
            </summary>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="M:Ice.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception with serialized data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ice.Exception.ice_name">
            <summary>
            ice_name() is deprecated, use ice_id() instead.
            Returns the name of this exception.
            </summary>
            <returns>The name of this exception.</returns>
        </member>
        <member name="M:Ice.Exception.ice_id">
            <summary>
            Returns the type id of this exception.
            </summary>
            <returns>The type id of this exception.</returns>
        </member>
        <member name="M:Ice.Exception.ToString">
            <summary>
            Returns a string representation of this exception, including
            any inner exceptions.
            </summary>
            <returns>The string representation of this exception.</returns>
        </member>
        <member name="T:Ice.LocalException">
            <summary>
            Base class for Ice run-time exceptions.
            </summary>
        </member>
        <member name="M:Ice.LocalException.#ctor">
            <summary>
            Creates a default-initialized Ice run-time exception.
            </summary>
        </member>
        <member name="M:Ice.LocalException.#ctor(System.Exception)">
            <summary>
            Creates a default-initialized Ice run-time exception and sets the InnerException
            property to the passed exception.
            </summary>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="M:Ice.LocalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception with serialized data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ice.SystemException">
            <summary>
            Base class for Ice system exceptions.
            Ice system exceptions are currently Ice internal, non-documented exceptions.
            </summary>
        </member>
        <member name="M:Ice.SystemException.#ctor">
            <summary>
            Creates a default-initialized system exception.
            </summary>
        </member>
        <member name="M:Ice.SystemException.#ctor(System.Exception)">
            <summary>
            Creates a default-initialized system exception and sets the InnerException
            property to the passed exception.
            </summary>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="M:Ice.SystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception with serialized data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ice.UserException">
            <summary>
            Base class for Slice user exceptions.
            </summary>
        </member>
        <member name="M:Ice.UserException.#ctor">
            <summary>
            Creates a default-initialized user exception.
            </summary>
        </member>
        <member name="M:Ice.UserException.#ctor(System.Exception)">
            <summary>
            Creates a default-initialized user exception and sets the InnerException
            property to the passed exception.
            </summary>
            <param name="ex">The inner exception.</param>
        </member>
        <member name="M:Ice.UserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception with serialized data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ice.UserException.ice_getSlicedData">
            <summary>
            Returns the sliced data if the exception has a preserved-slice base class and has been sliced during
            un-marshaling, null is returned otherwise.
            </summary>
            <returns>The sliced data or null.</returns>
        </member>
        <member name="T:Ice.FormatType">
            <summary>
            This enumeration describes the possible formats for classes and exceptions.
            </summary>
        </member>
        <member name="T:Ice.UserExceptionFactory">
            <summary>
            Throws a UserException corresponding to the given Slice type Id, such as "::Module::MyException".
            If the implementation does not throw an exception, the Ice run time will fall back
            to using its default behavior for instantiating the user exception.
            </summary>
            <param name="id">A Slice type Id corresponding to a Slice user exception.</param>
        </member>
        <member name="T:Ice.InputStream">
            <summary>
            Interface for input streams used to extract Slice types from a sequence of bytes.
            </summary>
        </member>
        <member name="M:Ice.InputStream.#ctor">
            <summary>
            Constructing an InputStream without providing a communicator means the stream will
            use the default encoding version. A communicator is required in order to unmarshal
            proxies. You can supply a communicator later by calling initialize().
            </summary>
        </member>
        <member name="M:Ice.InputStream.#ctor(System.Byte[])">
            <summary>
            Constructing an InputStream without providing a communicator means the stream will
            use the default encoding version. A communicator is required in order to unmarshal
            proxies. You can supply a communicator later by calling initialize().
            </summary>
            <param name="data">The byte array containing encoded Slice types.</param>
        </member>
        <member name="M:Ice.InputStream.#ctor(Ice.Communicator)">
            <summary>
            This constructor uses the communicator's default encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
        </member>
        <member name="M:Ice.InputStream.#ctor(Ice.Communicator,System.Byte[])">
            <summary>
            This constructor uses the communicator's default encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
            <param name="data">The byte array containing encoded Slice types.</param>
        </member>
        <member name="M:Ice.InputStream.#ctor(Ice.EncodingVersion)">
            <summary>
            This constructor uses the given encoding version.
            </summary>
            <param name="encoding">The desired encoding version.</param>
        </member>
        <member name="M:Ice.InputStream.#ctor(Ice.EncodingVersion,System.Byte[])">
            <summary>
            This constructor uses the given encoding version.
            </summary>
            <param name="encoding">The desired encoding version.</param>
            <param name="data">The byte array containing encoded Slice types.</param>
        </member>
        <member name="M:Ice.InputStream.#ctor(Ice.Communicator,Ice.EncodingVersion)">
            <summary>
            This constructor uses the given encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
            <param name="encoding">The desired encoding version.</param>
        </member>
        <member name="M:Ice.InputStream.#ctor(Ice.Communicator,Ice.EncodingVersion,System.Byte[])">
            <summary>
            This constructor uses the given encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
            <param name="encoding">The desired encoding version.</param>
            <param name="data">The byte array containing encoded Slice types.</param>
        </member>
        <member name="M:Ice.InputStream.initialize(Ice.Communicator)">
            <summary>
            Initializes the stream to use the communicator's default encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
        </member>
        <member name="M:Ice.InputStream.initialize(Ice.Communicator,Ice.EncodingVersion)">
            <summary>
            Initializes the stream to use the given communicator and encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
            <param name="encoding">The desired encoding version.</param>
        </member>
        <member name="M:Ice.InputStream.reset">
            <summary>
            Resets this stream. This method allows the stream to be reused, to avoid creating
            unnecessary garbage.
            </summary>
        </member>
        <member name="M:Ice.InputStream.clear">
            <summary>
            Releases any data retained by encapsulations. Internally calls clear().
            </summary>
        </member>
        <member name="M:Ice.InputStream.setValueFactoryManager(Ice.ValueFactoryManager)">
            <summary>
            Sets the value factory manager to use when marshaling value instances. If the stream
            was initialized with a communicator, the communicator's value factory manager will
            be used by default.
            </summary>
            <param name="vfm">The value factory manager.</param>
        </member>
        <member name="M:Ice.InputStream.setLogger(Ice.Logger)">
            <summary>
            Sets the logger to use when logging trace messages. If the stream
            was initialized with a communicator, the communicator's logger will
            be used by default.
            </summary>
            <param name="logger">The logger to use for logging trace messages.</param>
        </member>
        <member name="M:Ice.InputStream.setCompactIdResolver(System.Func{System.Int32,System.String})">
            <summary>
            Sets the compact ID resolver to use when unmarshaling value and exception
            instances. If the stream was initialized with a communicator, the communicator's
            resolver will be used by default.
            </summary>
            <param name="r">The compact ID resolver.</param>
        </member>
        <member name="M:Ice.InputStream.setClassResolver(System.Func{System.String,System.Type})">
            <summary>
            Sets the class resolver, which the stream will use when attempting to unmarshal
            a value or exception. If the stream was initialized with a communicator, the communicator's
            resolver will be used by default.
            </summary>
            <param name="r">The class resolver.</param>
        </member>
        <member name="M:Ice.InputStream.setSliceValues(System.Boolean)">
            <summary>
            Determines the behavior of the stream when extracting instances of Slice classes.
            An instance is "sliced" when a factory cannot be found for a Slice type ID.
            The stream's default behavior is to slice instances.
            </summary>
            <param name="b">If true (the default), slicing is enabled; if false,
            slicing is disabled. If slicing is disabled and the stream encounters a Slice type ID
            during decoding for which no value factory is installed, it raises NoValueFactoryException.
            </param>
        </member>
        <member name="M:Ice.InputStream.setTraceSlicing(System.Boolean)">
            <summary>
            Determines whether the stream logs messages about slicing instances of Slice values.
            </summary>
            <param name="b">True to enable logging, false to disable logging.</param>
        </member>
        <member name="M:Ice.InputStream.setClassGraphDepthMax(System.Int32)">
            <summary>
            Set the maximum depth allowed for graph of Slice class instances.
            </summary>
            <param name="classGraphDepthMax">The maximum depth.</param>
        </member>
        <member name="M:Ice.InputStream.getClosure">
            <summary>
            Retrieves the closure object associated with this stream.
            </summary>
            <returns>The closure object.</returns>
        </member>
        <member name="M:Ice.InputStream.setClosure(System.Object)">
            <summary>
            Associates a closure object with this stream.
            </summary>
            <param name="p">The new closure object.</param>
            <returns>The previous closure object, or null.</returns>
        </member>
        <member name="M:Ice.InputStream.swap(Ice.InputStream)">
            <summary>
            Swaps the contents of one stream with another.
            </summary>
            <param name="other">The other stream.</param>
        </member>
        <member name="M:Ice.InputStream.resize(System.Int32)">
            <summary>
            Resizes the stream to a new size.
            </summary>
            <param name="sz">The new size.</param>
        </member>
        <member name="M:Ice.InputStream.startValue">
            <summary>
            Marks the start of a class instance.
            </summary>
        </member>
        <member name="M:Ice.InputStream.endValue(System.Boolean)">
            <summary>
            Marks the end of a class instance.
            </summary>
            <param name="preserve">True if unknown slices should be preserved, false otherwise.</param>
            <returns>A SlicedData object containing the preserved slices for unknown types.</returns>
        </member>
        <member name="M:Ice.InputStream.startException">
            <summary>
            Marks the start of a user exception.
            </summary>
        </member>
        <member name="M:Ice.InputStream.endException(System.Boolean)">
            <summary>
            Marks the end of a user exception.
            </summary>
            <param name="preserve">True if unknown slices should be preserved, false otherwise.</param>
            <returns>A SlicedData object containing the preserved slices for unknown types.</returns>
        </member>
        <member name="M:Ice.InputStream.startEncapsulation">
            <summary>
            Reads the start of an encapsulation.
            </summary>
            <returns>The encapsulation encoding version.</returns>
        </member>
        <member name="M:Ice.InputStream.endEncapsulation">
            <summary>
            Ends the previous encapsulation.
            </summary>
        </member>
        <member name="M:Ice.InputStream.skipEmptyEncapsulation">
            <summary>
            Skips an empty encapsulation.
            </summary>
            <returns>The encapsulation's encoding version.</returns>
        </member>
        <member name="M:Ice.InputStream.readEncapsulation(Ice.EncodingVersion@)">
            <summary>
            Returns a blob of bytes representing an encapsulation. The encapsulation's encoding version
            is returned in the argument.
            </summary>
            <param name="encoding">The encapsulation's encoding version.</param>
            <returns>The encoded encapsulation.</returns>
        </member>
        <member name="M:Ice.InputStream.getEncoding">
            <summary>
            Determines the current encoding version.
            </summary>
            <returns>The encoding version.</returns>
        </member>
        <member name="M:Ice.InputStream.getEncapsulationSize">
            <summary>
            Determines the size of the current encapsulation, excluding the encapsulation header.
            </summary>
            <returns>The size of the encapsulated data.</returns>
        </member>
        <member name="M:Ice.InputStream.skipEncapsulation">
            <summary>
            Skips over an encapsulation.
            </summary>
            <returns>The encoding version of the skipped encapsulation.</returns>
        </member>
        <member name="M:Ice.InputStream.startSlice">
            <summary>
            Reads the start of a class instance or exception slice.
            </summary>
            <returns>The Slice type ID for this slice.</returns>
        </member>
        <member name="M:Ice.InputStream.endSlice">
            <summary>
            Indicates that the end of a class instance or exception slice has been reached.
            </summary>
        </member>
        <member name="M:Ice.InputStream.skipSlice">
            <summary>
            Skips over a class instance or exception slice.
            </summary>
        </member>
        <member name="M:Ice.InputStream.readPendingValues">
            <summary>
            Indicates that unmarshaling is complete, except for any class instances. The application must call this
            method only if the stream actually contains class instances. Calling readPendingValues triggers the
            calls to the System.Action delegates to inform the application that unmarshaling of an instance
            is complete.
            </summary>
        </member>
        <member name="M:Ice.InputStream.readSize">
            <summary>
            Extracts a size from the stream.
            </summary>
            <returns>The extracted size.</returns>
        </member>
        <member name="M:Ice.InputStream.readAndCheckSeqSize(System.Int32)">
            <summary>
            Reads and validates a sequence size.
            </summary>
            <returns>The extracted size.</returns>
        </member>
        <member name="M:Ice.InputStream.readBlob(System.Byte[])">
            <summary>
            Reads a blob of bytes from the stream. The length of the given array determines how many bytes are read.
            </summary>
            <param name="v">Bytes from the stream.</param>
        </member>
        <member name="M:Ice.InputStream.readBlob(System.Int32)">
            <summary>
            Reads a blob of bytes from the stream.
            </summary>
            <param name="sz">The number of bytes to read.</param>
            <returns>The requested bytes as a byte array.</returns>
        </member>
        <member name="M:Ice.InputStream.readOptional(System.Int32,Ice.OptionalFormat)">
            <summary>
            Determine if an optional value is available for reading.
            </summary>
            <param name="tag">The tag associated with the value.</param>
            <param name="expectedFormat">The optional format for the value.</param>
            <returns>True if the value is present, false otherwise.</returns>
        </member>
        <member name="M:Ice.InputStream.readByte">
            <summary>
            Extracts a byte value from the stream.
            </summary>
            <returns>The extracted byte.</returns>
        </member>
        <member name="M:Ice.InputStream.readByte(System.Int32)">
            <summary>
            Extracts an optional byte value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readByte(System.Int32,System.Boolean@,System.Byte@)">
            <summary>
            Extracts an optional byte value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readByteSeq">
            <summary>
            Extracts a sequence of byte values from the stream.
            </summary>
            <returns>The extracted byte sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readByteSeq(System.Collections.Generic.List{System.Byte}@)">
            <summary>
            Extracts a sequence of byte values from the stream.
            </summary>
            <param name="l">The extracted byte sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readByteSeq(System.Collections.Generic.LinkedList{System.Byte}@)">
            <summary>
            Extracts a sequence of byte values from the stream.
            </summary>
            <param name="l">The extracted byte sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readByteSeq(System.Collections.Generic.Queue{System.Byte}@)">
            <summary>
            Extracts a sequence of byte values from the stream.
            </summary>
            <param name="l">The extracted byte sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readByteSeq(System.Collections.Generic.Stack{System.Byte}@)">
            <summary>
            Extracts a sequence of byte values from the stream.
            </summary>
            <param name="l">The extracted byte sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readByteSeq(System.Int32)">
            <summary>
            Extracts an optional byte sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readByteSeq(System.Int32,System.Boolean@,System.Byte[]@)">
            <summary>
            Extracts an optional byte sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readSerializable">
            <summary>
            Extracts a serializable object from the stream.
            </summary>
            <returns>The serializable object.</returns>
        </member>
        <member name="M:Ice.InputStream.readBool">
            <summary>
            Extracts a boolean value from the stream.
            </summary>
            <returns>The extracted boolean.</returns>
        </member>
        <member name="M:Ice.InputStream.readBool(System.Int32)">
            <summary>
            Extracts an optional boolean value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readBool(System.Int32,System.Boolean@,System.Boolean@)">
            <summary>
            Extracts an optional boolean value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq">
            <summary>
            Extracts a sequence of boolean values from the stream.
            </summary>
            <returns>The extracted boolean sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq(System.Collections.Generic.List{System.Boolean}@)">
            <summary>
            Extracts a sequence of boolean values from the stream.
            </summary>
            <param name="l">The extracted boolean sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq(System.Collections.Generic.LinkedList{System.Boolean}@)">
            <summary>
            Extracts a sequence of boolean values from the stream.
            </summary>
            <param name="l">The extracted boolean sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq(System.Collections.Generic.Queue{System.Boolean}@)">
            <summary>
            Extracts a sequence of boolean values from the stream.
            </summary>
            <param name="l">The extracted boolean sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq(System.Collections.Generic.Stack{System.Boolean}@)">
            <summary>
            Extracts a sequence of boolean values from the stream.
            </summary>
            <param name="l">The extracted boolean sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq(System.Int32)">
            <summary>
            Extracts an optional boolean sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readBoolSeq(System.Int32,System.Boolean@,System.Boolean[]@)">
            <summary>
            Extracts an optional boolean sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readShort">
            <summary>
            Extracts a short value from the stream.
            </summary>
            <returns>The extracted short.</returns>
        </member>
        <member name="M:Ice.InputStream.readShort(System.Int32)">
            <summary>
            Extracts an optional short value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readShort(System.Int32,System.Boolean@,System.Int16@)">
            <summary>
            Extracts an optional short value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readShortSeq">
            <summary>
            Extracts a sequence of short values from the stream.
            </summary>
            <returns>The extracted short sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readShortSeq(System.Collections.Generic.List{System.Int16}@)">
            <summary>
            Extracts a sequence of short values from the stream.
            </summary>
            <param name="l">The extracted short sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readShortSeq(System.Collections.Generic.LinkedList{System.Int16}@)">
            <summary>
            Extracts a sequence of short values from the stream.
            </summary>
            <param name="l">The extracted short sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readShortSeq(System.Collections.Generic.Queue{System.Int16}@)">
            <summary>
            Extracts a sequence of short values from the stream.
            </summary>
            <param name="l">The extracted short sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readShortSeq(System.Collections.Generic.Stack{System.Int16}@)">
            <summary>
            Extracts a sequence of short values from the stream.
            </summary>
            <param name="l">The extracted short sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readShortSeq(System.Int32)">
            <summary>
            Extracts an optional short sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readShortSeq(System.Int32,System.Boolean@,System.Int16[]@)">
            <summary>
            Extracts an optional short sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readInt">
            <summary>
            Extracts an int value from the stream.
            </summary>
            <returns>The extracted int.</returns>
        </member>
        <member name="M:Ice.InputStream.readInt(System.Int32)">
            <summary>
            Extracts an optional int value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readInt(System.Int32,System.Boolean@,System.Int32@)">
            <summary>
            Extracts an optional int value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readIntSeq">
            <summary>
            Extracts a sequence of int values from the stream.
            </summary>
            <returns>The extracted int sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readIntSeq(System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Extracts a sequence of int values from the stream.
            </summary>
            <param name="l">The extracted int sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readIntSeq(System.Collections.Generic.LinkedList{System.Int32}@)">
            <summary>
            Extracts a sequence of int values from the stream.
            </summary>
            <param name="l">The extracted int sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readIntSeq(System.Collections.Generic.Queue{System.Int32}@)">
            <summary>
            Extracts a sequence of int values from the stream.
            </summary>
            <param name="l">The extracted int sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readIntSeq(System.Collections.Generic.Stack{System.Int32}@)">
            <summary>
            Extracts a sequence of int values from the stream.
            </summary>
            <param name="l">The extracted int sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readIntSeq(System.Int32)">
            <summary>
            Extracts an optional int sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readIntSeq(System.Int32,System.Boolean@,System.Int32[]@)">
            <summary>
            Extracts an optional int sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readLong">
            <summary>
            Extracts a long value from the stream.
            </summary>
            <returns>The extracted long.</returns>
        </member>
        <member name="M:Ice.InputStream.readLong(System.Int32)">
            <summary>
            Extracts an optional long value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readLong(System.Int32,System.Boolean@,System.Int64@)">
            <summary>
            Extracts an optional long value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readLongSeq">
            <summary>
            Extracts a sequence of long values from the stream.
            </summary>
            <returns>The extracted long sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readLongSeq(System.Collections.Generic.List{System.Int64}@)">
            <summary>
            Extracts a sequence of long values from the stream.
            </summary>
            <param name="l">The extracted long sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readLongSeq(System.Collections.Generic.LinkedList{System.Int64}@)">
            <summary>
            Extracts a sequence of long values from the stream.
            </summary>
            <param name="l">The extracted long sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readLongSeq(System.Collections.Generic.Queue{System.Int64}@)">
            <summary>
            Extracts a sequence of long values from the stream.
            </summary>
            <param name="l">The extracted long sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readLongSeq(System.Collections.Generic.Stack{System.Int64}@)">
            <summary>
            Extracts a sequence of long values from the stream.
            </summary>
            <param name="l">The extracted long sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readLongSeq(System.Int32)">
            <summary>
            Extracts an optional long sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readLongSeq(System.Int32,System.Boolean@,System.Int64[]@)">
            <summary>
            Extracts an optional long sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readFloat">
            <summary>
            Extracts a float value from the stream.
            </summary>
            <returns>The extracted float.</returns>
        </member>
        <member name="M:Ice.InputStream.readFloat(System.Int32)">
            <summary>
            Extracts an optional float value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readFloat(System.Int32,System.Boolean@,System.Single@)">
            <summary>
            Extracts an optional float value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq">
            <summary>
            Extracts a sequence of float values from the stream.
            </summary>
            <returns>The extracted float sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq(System.Collections.Generic.List{System.Single}@)">
            <summary>
            Extracts a sequence of float values from the stream.
            </summary>
            <param name="l">The extracted float sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq(System.Collections.Generic.LinkedList{System.Single}@)">
            <summary>
            Extracts a sequence of float values from the stream.
            </summary>
            <param name="l">The extracted float sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq(System.Collections.Generic.Queue{System.Single}@)">
            <summary>
            Extracts a sequence of float values from the stream.
            </summary>
            <param name="l">The extracted float sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq(System.Collections.Generic.Stack{System.Single}@)">
            <summary>
            Extracts a sequence of float values from the stream.
            </summary>
            <param name="l">The extracted float sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq(System.Int32)">
            <summary>
            Extracts an optional float sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readFloatSeq(System.Int32,System.Boolean@,System.Single[]@)">
            <summary>
            Extracts an optional float sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readDouble">
            <summary>
            Extracts a double value from the stream.
            </summary>
            <returns>The extracted double.</returns>
        </member>
        <member name="M:Ice.InputStream.readDouble(System.Int32)">
            <summary>
            Extracts an optional double value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readDouble(System.Int32,System.Boolean@,System.Double@)">
            <summary>
            Extracts an optional double value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq">
            <summary>
            Extracts a sequence of double values from the stream.
            </summary>
            <returns>The extracted double sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq(System.Collections.Generic.List{System.Double}@)">
            <summary>
            Extracts a sequence of double values from the stream.
            </summary>
            <param name="l">The extracted double sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq(System.Collections.Generic.LinkedList{System.Double}@)">
            <summary>
            Extracts a sequence of double values from the stream.
            </summary>
            <param name="l">The extracted double sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq(System.Collections.Generic.Queue{System.Double}@)">
            <summary>
            Extracts a sequence of double values from the stream.
            </summary>
            <param name="l">The extracted double sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq(System.Collections.Generic.Stack{System.Double}@)">
            <summary>
            Extracts a sequence of double values from the stream.
            </summary>
            <param name="l">The extracted double sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq(System.Int32)">
            <summary>
            Extracts an optional double sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readDoubleSeq(System.Int32,System.Boolean@,System.Double[]@)">
            <summary>
            Extracts an optional double sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readString">
            <summary>
            Extracts a string from the stream.
            </summary>
            <returns>The extracted string.</returns>
        </member>
        <member name="M:Ice.InputStream.readString(System.Int32)">
            <summary>
            Extracts an optional string from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readString(System.Int32,System.Boolean@,System.String@)">
            <summary>
            Extracts an optional string from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readStringSeq">
            <summary>
            Extracts a sequence of strings from the stream.
            </summary>
            <returns>The extracted string sequence.</returns>
        </member>
        <member name="M:Ice.InputStream.readStringSeq(System.Collections.Generic.List{System.String}@)">
            <summary>
            Extracts a sequence of strings from the stream.
            </summary>
            <param name="l">The extracted string sequence as a list.</param>
        </member>
        <member name="M:Ice.InputStream.readStringSeq(System.Collections.Generic.LinkedList{System.String}@)">
            <summary>
            Extracts a sequence of strings from the stream.
            </summary>
            <param name="l">The extracted string sequence as a linked list.</param>
        </member>
        <member name="M:Ice.InputStream.readStringSeq(System.Collections.Generic.Queue{System.String}@)">
            <summary>
            Extracts a sequence of strings from the stream.
            </summary>
            <param name="l">The extracted string sequence as a queue.</param>
        </member>
        <member name="M:Ice.InputStream.readStringSeq(System.Collections.Generic.Stack{System.String}@)">
            <summary>
            Extracts a sequence of strings from the stream.
            </summary>
            <param name="l">The extracted string sequence as a stack.</param>
        </member>
        <member name="M:Ice.InputStream.readStringSeq(System.Int32)">
            <summary>
            Extracts an optional string sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readStringSeq(System.Int32,System.Boolean@,System.String[]@)">
            <summary>
            Extracts an optional string sequence from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readProxy">
            <summary>
            Extracts a proxy from the stream. The stream must have been initialized with a communicator.
            </summary>
            <returns>The extracted proxy.</returns>
        </member>
        <member name="M:Ice.InputStream.readProxy(System.Int32)">
            <summary>
            Extracts an optional proxy from the stream. The stream must have been initialized with a communicator.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <returns>The optional value.</returns>
        </member>
        <member name="M:Ice.InputStream.readProxy(System.Int32,System.Boolean@,Ice.ObjectPrx@)">
            <summary>
            Extracts an optional proxy from the stream. The stream must have been initialized with a communicator.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="isset">True if the optional value is present, false otherwise.</param>
            <param name="v">The optional value.</param>
        </member>
        <member name="M:Ice.InputStream.readEnum(System.Int32)">
            <summary>
            Read an enumerated value.
            </summary>
            <param name="maxValue">The maximum enumerator value in the definition.</param>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Ice.InputStream.readValue``1(System.Action{``0})">
            <summary>
            Extracts the index of a Slice value from the stream.
            </summary>
            <param name="cb">The callback to notify the application when the extracted instance is available.
            The stream extracts Slice values in stages. The Ice run time invokes the delegate when the
            corresponding instance has been fully unmarshaled.</param>
        </member>
        <member name="M:Ice.InputStream.readValue(System.Action{Ice.Value})">
            <summary>
            Extracts the index of a Slice value from the stream.
            </summary>
            <param name="cb">The callback to notify the application when the extracted instance is available.
            The stream extracts Slice values in stages. The Ice run time invokes the delegate when the
            corresponding instance has been fully unmarshaled.</param>
        </member>
        <member name="M:Ice.InputStream.readValue``1(System.Int32,System.Action{``0})">
            <summary>
            Extracts the index of an optional Slice value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="cb">The callback to notify the application when the extracted instance is available (if any).
            The stream extracts Slice values in stages. The Ice run time invokes the delegate when the
            corresponding instance has been fully unmarshaled.</param>
        </member>
        <member name="M:Ice.InputStream.readValue(System.Int32,System.Action{Ice.Value})">
            <summary>
            Extracts the index of an optional Slice value from the stream.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="cb">The callback to notify the application when the extracted instance is available (if any).
            The stream extracts Slice values in stages. The Ice run time invokes the delegate when the
            corresponding instance has been fully unmarshaled.</param>
        </member>
        <member name="M:Ice.InputStream.throwException">
            <summary>
            Extracts a user exception from the stream and throws it.
            </summary>
        </member>
        <member name="M:Ice.InputStream.throwException(Ice.UserExceptionFactory)">
            <summary>
            Extracts a user exception from the stream and throws it.
            </summary>
            <param name="factory">The user exception factory, or null to use the stream's default behavior.</param>
        </member>
        <member name="M:Ice.InputStream.skip(System.Int32)">
            <summary>
            Skip the given number of bytes.
            </summary>
            <param name="size">The number of bytes to skip</param>
        </member>
        <member name="M:Ice.InputStream.skipSize">
            <summary>
            Skip over a size value.
            </summary>
        </member>
        <member name="M:Ice.InputStream.pos">
            <summary>
            Determines the current position in the stream.
            </summary>
            <returns>The current position.</returns>
        </member>
        <member name="M:Ice.InputStream.pos(System.Int32)">
            <summary>
            Sets the current position in the stream.
            </summary>
            <param name="n">The new position.</param>
        </member>
        <member name="M:Ice.InputStream.size">
            <summary>
            Determines the current size of the stream.
            </summary>
            <returns>The current size.</returns>
        </member>
        <member name="M:Ice.InputStream.isEmpty">
            <summary>
            Determines whether the stream is empty.
            </summary>
            <returns>True if the internal buffer has no data, false otherwise.</returns>
        </member>
        <member name="T:Ice.ValueReader">
            <summary>
            Base class for extracting class instances from an input stream.
            </summary>
        </member>
        <member name="M:Ice.ValueReader.read(Ice.InputStream)">
            <summary>
            Read the instance's data members.
            </summary>
            <param name="inStream">The input stream to read from.</param>
        </member>
        <member name="T:Ice.LoggerPlugin">
            <summary>
            Class to support custom loggers. Applications using a custom logger
            instantiate a LoggerPlugin with a custom logger and
            return the instance from their PluginFactory implementation.
            </summary>
        </member>
        <member name="M:Ice.LoggerPlugin.#ctor(Ice.Communicator,Ice.Logger)">
            <summary>
            Installs a custom logger for a communicator.
            </summary>
            <param name="communicator">The communicator using the custom logger.</param>
            <param name="logger">The custom logger for the communicator.</param>
        </member>
        <member name="M:Ice.LoggerPlugin.initialize">
            <summary>
            Called by the Ice run time during communicator initialization. The derived class
            can override this method to perform any initialization that might be required
            by a custom logger.
            </summary>
        </member>
        <member name="M:Ice.LoggerPlugin.destroy">
            <summary>
            Called by the Ice run time when the communicator is destroyed. The derived class
            can override this method to perform any finalization that might be required
            by a custom logger.
            </summary>
        </member>
        <member name="T:Ice.Request">
            <summary>
            Interface for incoming requests.
            </summary>
        </member>
        <member name="M:Ice.Request.getCurrent">
            <summary>
            Returns the {@link Current} object for this the request.
            </summary>
            <returns>The Current object for this request.</returns>
        </member>
        <member name="T:Ice.Object">
            <summary>
            the base interface for servants.
            </summary>
        </member>
        <member name="M:Ice.Object.ice_isA(System.String,Ice.Current)">
             <summary>
             Tests whether this object supports a specific Slice interface.
             </summary>
            
             <param name="s">The type ID of the Slice interface to test against.</param>
             <param name="current">The Current object for the invocation.</param>
             <returns>True if this object has the interface
             specified by s or derives from the interface specified by s.</returns>
        </member>
        <member name="M:Ice.Object.ice_ping(Ice.Current)">
            <summary>
            Tests whether this object can be reached.
            </summary>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.Object.ice_ids(Ice.Current)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by this object.
            </summary>
            <param name="current">The Current object for the invocation.</param>
            <returns>The Slice type IDs of the interfaces supported by this object, in base-to-derived
            order. The first element of the returned array is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.Object.ice_id(Ice.Current)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by this object.
            </summary>
            <param name="current">The Current object for the invocation.</param>
            <returns>The Slice type ID of the most-derived interface.</returns>
        </member>
        <member name="M:Ice.Object.ice_dispatch(Ice.Request)">
            <summary>
            Dispatches an invocation to a servant. This method is used by dispatch interceptors to forward an invocation
            to a servant (or to another interceptor).
            </summary>
            <param name="request">The details of the invocation.</param>
            <returns>The task if dispatched asynchronously, null otherwise.</returns>
        </member>
        <member name="T:Ice.ObjectImpl">
            <summary>
            Base class for all Slice classes.
            </summary>
        </member>
        <member name="M:Ice.ObjectImpl.#ctor">
            <summary>
            Instantiates an Ice object.
            </summary>
        </member>
        <member name="M:Ice.ObjectImpl.Clone">
            <summary>
            Returns a copy of the object. The cloned object contains field-for-field copies
            of the state.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Ice.ObjectImpl.ice_isA(System.String,Ice.Current)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="s">The type ID of the Slice interface to test against.</param>
            <param name="current">The Current object for the invocation.</param>
            <returns>The return value is true if s is ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectImpl.ice_ping(Ice.Current)">
            <summary>
            Tests whether this object can be reached.
            <param name="current">The Current object for the invocation.</param>
            </summary>
        </member>
        <member name="M:Ice.ObjectImpl.ice_ids(Ice.Current)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by this object.
            </summary>
            <param name="current">The Current object for the invocation.</param>
            <returns>An array whose only element is ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectImpl.ice_id(Ice.Current)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by this object.
            </summary>
            <param name="current">The Current object for the invocation.</param>
            <returns>The return value is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectImpl.ice_staticId">
            <summary>
            Returns the Slice type ID of the interface supported by this object.
            </summary>
            <returns>The return value is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectImpl.ice_dispatch(Ice.Request)">
            <summary>
            Dispatches an invocation to a servant. This method is used by dispatch interceptors to forward an invocation
            to a servant (or to another interceptor).
            </summary>
            <param name="request">The details of the invocation.</param>
            <returns>The task if dispatched asynchronously, null otherwise.</returns>
        </member>
        <member name="T:Ice.Blobject">
            <summary>
            Base class for dynamic dispatch servants. A server application
            derives a concrete servant class from Blobject that
            implements the Blobject.ice_invoke method.
            </summary>
        </member>
        <member name="M:Ice.Blobject.ice_invoke(System.Byte[],System.Byte[]@,Ice.Current)">
            <summary>
            Dispatch an incoming request.
            </summary>
            <param name="inParams">The encoded in-parameters for the operation.</param>
            <param name="outParams">The encoded out-paramaters and return value
            for the operation. The return value follows any out-parameters.</param>
            <param name="current">The Current object to pass to the operation.</param>
            <returns>If the operation completed successfully, the return value
            is true. If the operation raises a user exception,
            the return value is false; in this case, outParams
            must contain the encoded user exception. If the operation raises an
            Ice run-time exception, it must throw it directly.</returns>
        </member>
        <member name="T:Ice.Optional`1">
            <summary>
            Encapsulates an optional value. Instances of this type are immutable.
            </summary>
        </member>
        <member name="M:Ice.Optional`1.#ctor(Ice.NoneType)">
            <summary>
            Creates an optional value whose state is unset.
            </summary>
        </member>
        <member name="M:Ice.Optional`1.#ctor(`0)">
            <summary>
            Creates an optional value and sets its value to the given argument.
            </summary>
        </member>
        <member name="M:Ice.Optional`1.#ctor(Ice.Optional{`0})">
            <summary>
            Creates an optional value whose state is copied from the given argument.
            </summary>
        </member>
        <member name="M:Ice.Optional`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the exception with serialized data.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Ice.Optional`1.op_Explicit(Ice.Optional{`0})~`0">
            <summary>
            Conversion operator to the underlying type; a cast is required. An exception
            is raised if no value is set.
            </summary>
            <returns>The encapsulated value.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if no value is set.</exception>
        </member>
        <member name="M:Ice.Optional`1.op_Implicit(`0)~Ice.Optional{`0}">
            <summary>
            Conversion operator from a value of the underlying type; no cast is required.
            </summary>
        </member>
        <member name="M:Ice.Optional`1.op_Implicit(Ice.NoneType)~Ice.Optional{`0}">
            <summary>
            Conversion operator from a None value; no cast is required.
            </summary>
        </member>
        <member name="P:Ice.Optional`1.Value">
            <summary>
            Reads and writes the encapsulated value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the property is read and no value is
            set.</exception>
        </member>
        <member name="P:Ice.Optional`1.HasValue">
            <summary>
            Determines whether a value is set.
            </summary>
            <returns>True if a value is set, false otherwise.</returns>
        </member>
        <member name="M:Ice.Optional`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serializes an optional value.
            </summary>
            <param name="info">Holds the serialized object data about the exception being thrown.</param>
            <param name="context">Contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Ice.OptionalFormat">
             <summary>
             The optional format.
            
             An optional value is encoded with a specific optional format. This optional
             format describes how the data is encoded and how it can be skipped by the
             unmarshaling code if the optional is not known to the receiver.
             </summary>
        </member>
        <member name="T:Ice.OutputStream">
            <summary>
            Interface for output streams used to write Slice types to a sequence
            of bytes.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.#ctor">
            <summary>
            Constructing an OutputStream without providing a communicator means the stream will
            use the default encoding version and the default format for class encoding.
            You can supply a communicator later by calling initialize().
            </summary>
        </member>
        <member name="M:Ice.OutputStream.#ctor(Ice.Communicator)">
            <summary>
            This constructor uses the communicator's default encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.#ctor(Ice.Communicator,Ice.EncodingVersion)">
            <summary>
            This constructor uses the given communicator and encoding version.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
            <param name="encoding">The desired encoding version.</param>
        </member>
        <member name="M:Ice.OutputStream.initialize(Ice.Communicator)">
            <summary>
            Initializes the stream to use the communicator's default encoding version and class
            encoding format.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.initialize(Ice.Communicator,Ice.EncodingVersion)">
            <summary>
            Initializes the stream to use the given encoding version and the communicator's
            default class encoding format.
            </summary>
            <param name="communicator">The communicator to use when initializing the stream.</param>
            <param name="encoding">The desired encoding version.</param>
        </member>
        <member name="M:Ice.OutputStream.reset">
            <summary>
            Resets this output stream. This method allows the stream to be reused, to avoid creating
            unnecessary garbage.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.clear">
            <summary>
            Releases any data retained by encapsulations. The reset() method internally calls clear().
            </summary>
        </member>
        <member name="M:Ice.OutputStream.setFormat(Ice.FormatType)">
            <summary>
            Sets the encoding format for class and exception instances.
            </summary>
            <param name="fmt">The encoding format.</param>
        </member>
        <member name="M:Ice.OutputStream.getClosure">
            <summary>
            Retrieves the closure object associated with this stream.
            </summary>
            <returns>The closure object.</returns>
        </member>
        <member name="M:Ice.OutputStream.setClosure(System.Object)">
            <summary>
            Associates a closure object with this stream.
            </summary>
            <param name="p">The new closure object.</param>
            <returns>The previous closure object, or null.</returns>
        </member>
        <member name="M:Ice.OutputStream.finished">
            <summary>
            Indicates that the marshaling of a request or reply is finished.
            </summary>
            <returns>The byte sequence containing the encoded request or reply.</returns>
        </member>
        <member name="M:Ice.OutputStream.swap(Ice.OutputStream)">
            <summary>
            Swaps the contents of one stream with another.
            </summary>
            <param name="other">The other stream.</param>
        </member>
        <member name="M:Ice.OutputStream.resize(System.Int32)">
            <summary>
            Resizes the stream to a new size.
            </summary>
            <param name="sz">The new size.</param>
        </member>
        <member name="M:Ice.OutputStream.prepareWrite">
            <summary>
            Prepares the internal data buffer to be written to a socket.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.getBuffer">
            <summary>
            Retrieves the internal data buffer.
            </summary>
            <returns>The buffer.</returns>
        </member>
        <member name="M:Ice.OutputStream.startValue(Ice.SlicedData)">
            <summary>
            Marks the start of a class instance.
            </summary>
            <param name="data">Preserved slices for this instance, or null.</param>
        </member>
        <member name="M:Ice.OutputStream.endValue">
            <summary>
            Marks the end of a class instance.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.startException(Ice.SlicedData)">
            <summary>
            Marks the start of a user exception.
            </summary>
            <param name="data">Preserved slices for this exception, or null.</param>
        </member>
        <member name="M:Ice.OutputStream.endException">
            <summary>
            Marks the end of a user exception.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.startEncapsulation">
            <summary>
            Writes the start of an encapsulation to the stream.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.startEncapsulation(Ice.EncodingVersion,Ice.FormatType)">
            <summary>
            Writes the start of an encapsulation to the stream.
            </summary>
            <param name="encoding">The encoding version of the encapsulation.</param>
            <param name="format">Specify the compact or sliced format.</param>
        </member>
        <member name="M:Ice.OutputStream.endEncapsulation">
            <summary>
            Ends the previous encapsulation.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.writeEmptyEncapsulation(Ice.EncodingVersion)">
            <summary>
            Writes an empty encapsulation using the given encoding version.
            </summary>
            <param name="encoding">The encoding version of the encapsulation.</param>
        </member>
        <member name="M:Ice.OutputStream.writeEncapsulation(System.Byte[])">
            <summary>
            Writes a pre-encoded encapsulation.
            </summary>
            <param name="v">The encapsulation data.</param>
        </member>
        <member name="M:Ice.OutputStream.getEncoding">
            <summary>
            Determines the current encoding version.
            </summary>
            <returns>The encoding version.</returns>
        </member>
        <member name="M:Ice.OutputStream.startSlice(System.String,System.Int32,System.Boolean)">
            <summary>
            Marks the start of a new slice for a class instance or user exception.
            </summary>
            <param name="typeId">The Slice type ID corresponding to this slice.</param>
            <param name="compactId">The Slice compact type ID corresponding to this slice or -1 if no compact ID
            is defined for the type ID.</param>
            <param name="last">True if this is the last slice, false otherwise.</param>
        </member>
        <member name="M:Ice.OutputStream.endSlice">
            <summary>
            Marks the end of a slice for a class instance or user exception.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.writePendingValues">
            <summary>
            Writes the state of Slice classes whose index was previously written with writeValue() to the stream.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.writeSize(System.Int32)">
            <summary>
            Writes a size to the stream.
            </summary>
            <param name="v">The size to write.</param>
        </member>
        <member name="M:Ice.OutputStream.startSize">
            <summary>
            Returns the current position and allocates four bytes for a fixed-length (32-bit) size value.
            </summary>
        </member>
        <member name="M:Ice.OutputStream.endSize(System.Int32)">
            <summary>
            Computes the amount of data written since the previous call to startSize and writes that value
            at the saved position.
            </summary>
            <param name="pos">The saved position.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBlob(System.Byte[])">
            <summary>
            Writes a blob of bytes to the stream.
            </summary>
            <param name="v">The byte array to be written. All of the bytes in the array are written.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBlob(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a blob of bytes to the stream.
            </summary>
            <param name="v">The byte array to be written. All of the bytes in the array are written.</param>
            <param name="off">The offset into the byte array from which to copy.</param>
            <param name="len">The number of bytes from the byte array to copy.</param>
        </member>
        <member name="M:Ice.OutputStream.writeOptional(System.Int32,Ice.OptionalFormat)">
            <summary>
            Write the header information for an optional value.
            </summary>
            <param name="tag">The numeric tag associated with the value.</param>
            <param name="format">The optional format of the value.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByte(System.Byte)">
            <summary>
            Writes a byte to the stream.
            </summary>
            <param name="v">The byte to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByte(System.Int32,Ice.Optional{System.Byte})">
            <summary>
            Writes an optional byte to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional byte to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByte(System.Int32,System.Byte)">
            <summary>
            Writes an optional byte to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The byte to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.rewriteByte(System.Byte,System.Int32)">
            <summary>
            Writes a byte to the stream at the given position. The current position of the stream is not modified.
            </summary>
            <param name="v">The byte to write to the stream.</param>
            <param name="dest">The position at which to store the byte in the buffer.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByteSeq(System.Byte[])">
            <summary>
            Writes a byte sequence to the stream.
            </summary>
            <param name="v">The byte sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByteSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes a byte sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByteSeq(System.Int32,Ice.Optional{System.Byte[]})">
            <summary>
            Writes an optional byte sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional byte sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByteSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional byte sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional byte sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByteSeq(System.Int32,System.Byte[])">
            <summary>
            Writes an optional byte sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The byte sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeByteSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes an optional byte sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the byte sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeSerializable(System.Object)">
            <summary>
            Writes a serializable object to the stream.
            </summary>
            <param name="o">The serializable object to write.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBool(System.Boolean)">
            <summary>
            Writes a boolean to the stream.
            </summary>
            <param name="v">The boolean to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBool(System.Int32,Ice.Optional{System.Boolean})">
            <summary>
            Writes an optional boolean to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional boolean to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBool(System.Int32,System.Boolean)">
            <summary>
            Writes an optional boolean to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The boolean to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.rewriteBool(System.Boolean,System.Int32)">
            <summary>
            Writes a boolean to the stream at the given position. The current position of the stream is not modified.
            </summary>
            <param name="v">The boolean to write to the stream.</param>
            <param name="dest">The position at which to store the boolean in the buffer.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBoolSeq(System.Boolean[])">
            <summary>
            Writes a boolean sequence to the stream.
            </summary>
            <param name="v">The boolean sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBoolSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Writes a boolean sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBoolSeq(System.Int32,Ice.Optional{System.Boolean[]})">
            <summary>
            Writes an optional boolean sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional boolean sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBoolSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional boolean sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional boolean sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBoolSeq(System.Int32,System.Boolean[])">
            <summary>
            Writes an optional boolean sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The boolean sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeBoolSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Writes an optional boolean sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the boolean sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShort(System.Int16)">
            <summary>
            Writes a short to the stream.
            </summary>
            <param name="v">The short to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShort(System.Int32,Ice.Optional{System.Int16})">
            <summary>
            Writes an optional short to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional short to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShort(System.Int32,System.Int16)">
            <summary>
            Writes an optional short to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The short to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShortSeq(System.Int16[])">
            <summary>
            Writes a short sequence to the stream.
            </summary>
            <param name="v">The short sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShortSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Writes a short sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShortSeq(System.Int32,Ice.Optional{System.Int16[]})">
            <summary>
            Writes an optional short sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional short sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShortSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional short sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional short sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShortSeq(System.Int32,System.Int16[])">
            <summary>
            Writes an optional short sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The short sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeShortSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Writes an optional short sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the short sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeInt(System.Int32)">
            <summary>
            Writes an int to the stream.
            </summary>
            <param name="v">The int to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeInt(System.Int32,Ice.Optional{System.Int32})">
            <summary>
            Writes an optional int to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional int to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeInt(System.Int32,System.Int32)">
            <summary>
            Writes an optional int to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The int to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.rewriteInt(System.Int32,System.Int32)">
            <summary>
            Writes an int to the stream at the given position. The current position of the stream is not modified.
            </summary>
            <param name="v">The int to write to the stream.</param>
            <param name="dest">The position at which to store the int in the buffer.</param>
        </member>
        <member name="M:Ice.OutputStream.writeIntSeq(System.Int32[])">
            <summary>
            Writes an int sequence to the stream.
            </summary>
            <param name="v">The int sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeIntSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Writes an int sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeIntSeq(System.Int32,Ice.Optional{System.Int32[]})">
            <summary>
            Writes an optional int sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional int sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeIntSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional int sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional byte sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeIntSeq(System.Int32,System.Int32[])">
            <summary>
            Writes an optional int sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The int sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeIntSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Writes an optional int sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the int sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLong(System.Int64)">
            <summary>
            Writes a long to the stream.
            </summary>
            <param name="v">The long to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLong(System.Int32,Ice.Optional{System.Int64})">
            <summary>
            Writes an optional long to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional long to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLong(System.Int32,System.Int64)">
            <summary>
            Writes an optional long to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The long to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLongSeq(System.Int64[])">
            <summary>
            Writes a long sequence to the stream.
            </summary>
            <param name="v">The long sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLongSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Writes a long sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLongSeq(System.Int32,Ice.Optional{System.Int64[]})">
            <summary>
            Writes an optional long sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional long sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLongSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional long sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional long sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLongSeq(System.Int32,System.Int64[])">
            <summary>
            Writes an optional long sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The long sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeLongSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Writes an optional long sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the long sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloat(System.Single)">
            <summary>
            Writes a float to the stream.
            </summary>
            <param name="v">The float to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloat(System.Int32,Ice.Optional{System.Single})">
            <summary>
            Writes an optional float to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional float to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloat(System.Int32,System.Single)">
            <summary>
            Writes an optional float to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The float to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloatSeq(System.Single[])">
            <summary>
            Writes a float sequence to the stream.
            </summary>
            <param name="v">The float sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloatSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Writes a float sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloatSeq(System.Int32,Ice.Optional{System.Single[]})">
            <summary>
            Writes an optional float sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional float sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloatSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional float sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional float sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloatSeq(System.Int32,System.Single[])">
            <summary>
            Writes an optional float sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The float sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeFloatSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Writes an optional float sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the float sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDouble(System.Double)">
            <summary>
            Writes a double to the stream.
            </summary>
            <param name="v">The double to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDouble(System.Int32,Ice.Optional{System.Double})">
            <summary>
            Writes an optional double to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional double to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDouble(System.Int32,System.Double)">
            <summary>
            Writes an optional double to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The double to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDoubleSeq(System.Double[])">
            <summary>
            Writes a double sequence to the stream.
            </summary>
            <param name="v">The double sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDoubleSeq(System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Writes a double sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDoubleSeq(System.Int32,Ice.Optional{System.Double[]})">
            <summary>
            Writes an optional double sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional double sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDoubleSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional double sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional double sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDoubleSeq(System.Int32,System.Double[])">
            <summary>
            Writes an optional double sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The double sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeDoubleSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Writes an optional double sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the double sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeString(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="v">The string to write to the stream. Passing null causes
            an empty string to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeString(System.Int32,Ice.Optional{System.String})">
            <summary>
            Writes an optional string to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional string to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeString(System.Int32,System.String)">
            <summary>
            Writes an optional string to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The string to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeStringSeq(System.String[])">
            <summary>
            Writes a string sequence to the stream.
            </summary>
            <param name="v">The string sequence to write to the stream.
            Passing null causes an empty sequence to be written to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeStringSeq(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a string sequence to the stream.
            </summary>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the container holding the sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeStringSeq(System.Int32,Ice.Optional{System.String[]})">
            <summary>
            Writes an optional string sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional string sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeStringSeq``1(System.Int32,System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional string sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the optional string sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeStringSeq(System.Int32,System.String[])">
            <summary>
            Writes an optional string sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The string sequence to write to the stream.</param>
        </member>
        <member name="M:Ice.OutputStream.writeStringSeq(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes an optional string sequence to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="count">The number of elements in the sequence.</param>
            <param name="v">An enumerator for the string sequence.</param>
        </member>
        <member name="M:Ice.OutputStream.writeProxy(Ice.ObjectPrx)">
            <summary>
            Writes a proxy to the stream.
            </summary>
            <param name="v">The proxy to write.</param>
        </member>
        <member name="M:Ice.OutputStream.writeProxy(System.Int32,Ice.Optional{Ice.ObjectPrx})">
            <summary>
            Writes an optional proxy to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional proxy to write.</param>
        </member>
        <member name="M:Ice.OutputStream.writeProxy(System.Int32,Ice.ObjectPrx)">
            <summary>
            Writes an optional proxy to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The proxy to write.</param>
        </member>
        <member name="M:Ice.OutputStream.writeEnum(System.Int32,System.Int32)">
            <summary>
            Writes an enumerated value.
            </summary>
            <param name="v">The enumerator.</param>
            <param name="maxValue">The maximum enumerator value in the definition.</param>
        </member>
        <member name="M:Ice.OutputStream.writeEnum(System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an optional enumerator to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The enumerator.</param>
            <param name="maxValue">The maximum enumerator value in the definition.</param>
        </member>
        <member name="M:Ice.OutputStream.writeValue(Ice.Value)">
            <summary>
            Writes a class instance to the stream.
            </summary>
            <param name="v">The value to write. This method writes the index of an instance; the state of the value is
            written once writePendingValues() is called.</param>
        </member>
        <member name="M:Ice.OutputStream.writeValue``1(System.Int32,Ice.Optional{``0})">
            <summary>
            Writes an optional class instance to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The optional value to write.</param>
        </member>
        <member name="M:Ice.OutputStream.writeValue(System.Int32,Ice.Value)">
            <summary>
            Writes an optional class instance to the stream.
            </summary>
            <param name="tag">The optional tag.</param>
            <param name="v">The value to write.</param>
        </member>
        <member name="M:Ice.OutputStream.writeException(Ice.UserException)">
            <summary>
            Writes a user exception to the stream.
            </summary>
            <param name="v">The user exception to write.</param>
        </member>
        <member name="M:Ice.OutputStream.pos">
            <summary>
            Determines the current position in the stream.
            </summary>
            <returns>The current position.</returns>
        </member>
        <member name="M:Ice.OutputStream.pos(System.Int32)">
            <summary>
            Sets the current position in the stream.
            </summary>
            <param name="n">The new position.</param>
        </member>
        <member name="M:Ice.OutputStream.size">
            <summary>
            Determines the current size of the stream.
            </summary>
            <returns>The current size.</returns>
        </member>
        <member name="M:Ice.OutputStream.isEmpty">
            <summary>
            Determines whether the stream is empty.
            </summary>
            <returns>True if no data has been written yet, false otherwise.</returns>
        </member>
        <member name="M:Ice.OutputStream.expand(System.Int32)">
            <summary>
            Expand the stream to accept more data.
            </summary>
            <param name="n">The number of bytes to accommodate in the stream.</param>
        </member>
        <member name="T:Ice.ValueWriter">
            <summary>
            Base class for writing class instances to an output stream.
            </summary>
        </member>
        <member name="M:Ice.ValueWriter.write(Ice.OutputStream)">
            <summary>
            Writes the state of this Slice class instance to an output stream.
            </summary>
            <param name="outStream">The stream to write to.</param>
        </member>
        <member name="T:Ice.PluginFactory">
            <summary>
            Applications implement this interface to provide a plug-in factory
            to the Ice run time.
            </summary>
        </member>
        <member name="M:Ice.PluginFactory.create(Ice.Communicator,System.String,System.String[])">
             <summary>
             Called by the Ice run time to create a new plug-in.
             </summary>
            
             <param name="communicator">The communicator that is in the process of being initialized.</param>
             <param name="name">The name of the plug-in.</param>
             <param name="args">The arguments that are specified in the plug-ins configuration.</param>
             <returns>The plug-in that was created by this method.</returns>
        </member>
        <member name="T:Ice.Callback_Object_ice_isA">
            <summary>
            Delegate for a successful <code>ice_isA</code> invocation.
            <param name="ret">True if the remote object supports the type, false otherwise.</param>
            </summary>
        </member>
        <member name="T:Ice.Callback_Object_ice_ids">
            <summary>
            Delegate for a successful <code>ice_ids</code> invocation.
            <param name="ret">The array of Slice type ids supported by the remote object.</param>
            </summary>
        </member>
        <member name="T:Ice.Callback_Object_ice_id">
            <summary>
            Delegate for a successful <code>ice_id</code> invocation.
            <param name="ret">The Slice type id of the most-derived interface supported by the remote object.</param>
            </summary>
        </member>
        <member name="T:Ice.Callback_Object_ice_ping">
            <summary>
            Delegate for a successful <code>ice_ping</code> invocation.
            </summary>
        </member>
        <member name="T:Ice.Callback_Object_ice_invoke">
            <summary>
            Delegate for a successful <code>ice_invoke</code> invocation.
            <param name="ret">True if the invocation succeeded, or false if the invocation
            raised a user exception.</param>
            <param name="outEncaps">The encoded out-parameters or user exception.</param>
            </summary>
        </member>
        <member name="T:Ice.Callback_Object_ice_getConnection">
            <summary>
            Delegate for a successful <code>ice_getConnection</code> invocation.
            <param name="ret">The connection used by the proxy.</param>
            </summary>
        </member>
        <member name="T:Ice.OptionalContext">
            <summary>
            Value type to allow differenciate between a context that is explicity set to
            empty (empty or null dictionary) and a context that has non been set.
            </summary>
        </member>
        <member name="M:Ice.OptionalContext.op_Implicit(System.Collections.Generic.Dictionary{System.String,System.String})~Ice.OptionalContext">
            <summary>
            Implicit conversion between Dictionary&lt;string, string&gt; and
            OptionalContext.
            </summary>
            <param name="ctx">Dictionary to convert.</param>
            <returns>OptionalContext value representing the dictionary</returns>
        </member>
        <member name="M:Ice.OptionalContext.op_Implicit(Ice.OptionalContext)~System.Collections.Generic.Dictionary{System.String,System.String}">
            <summary>
            Implicit conversion between OptionalContext and
            Dictionary&lt;string, string&gt;
            </summary>
            <param name="value">OptionalContext value to convert</param>
            <returns>The Dictionary object.</returns>
        </member>
        <member name="T:Ice.ObjectPrx">
            <summary>
            Base interface of all object proxies.
            </summary>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getCommunicator">
            <summary>
            Returns the communicator that created this proxy.
            </summary>
            <returns>The communicator that created this proxy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isA(System.String,Ice.OptionalContext)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>True if the target object has the interface specified by id or derives
            from the interface specified by id.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isAAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_isA(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_isA(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_isA(System.String,Ice.OptionalContext)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_isA(Ice.AsyncResult)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_isA</code>.</param>
            <returns>True if the object supports the Slice interface, false otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_ping(Ice.OptionalContext)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
        </member>
        <member name="M:Ice.ObjectPrx.ice_pingAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_ping(Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_ping(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_ping(Ice.OptionalContext)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_ping(Ice.AsyncResult)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_ping</code>.</param>
        </member>
        <member name="M:Ice.ObjectPrx.ice_ids(Ice.OptionalContext)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>The Slice type IDs of the interfaces supported by the target object, in base-to-derived
            order. The first element of the returned array is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_idsAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_ids(Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_ids(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_ids(Ice.OptionalContext)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_ids(Ice.AsyncResult)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_ids</code>.</param>
            <returns>The Slice type IDs of the interfaces supported by the target object, in base-to-derived
            order. The first element of the returned array is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_id(Ice.OptionalContext)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>The Slice type ID of the most-derived interface.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_idAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_id(Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_id(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_id(Ice.OptionalContext)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_id(Ice.AsyncResult)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_id</code>.</param>
            <returns>The Slice type ID of the most-derived interface.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_invoke(System.String,Ice.OperationMode,System.Byte[],System.Byte[]@,Ice.OptionalContext)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="outEncaps">The encoded out-paramaters and return value
            for the operation. The return value follows any out-parameters.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>If the operation completed successfully, the return value
            is true. If the operation raises a user exception,
            the return value is false; in this case, outEncaps
            contains the encoded user exception. If the operation raises a run-time exception,
            it throws it directly.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_invokeAsync(System.String,Ice.OperationMode,System.Byte[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_invoke(System.String,Ice.OperationMode,System.Byte[],Ice.AsyncCallback,System.Object)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_invoke(System.String,Ice.OperationMode,System.Byte[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_invoke(System.String,Ice.OperationMode,System.Byte[],Ice.OptionalContext)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_invoke(System.Byte[]@,Ice.AsyncResult)">
            <summary>
            Completes a dynamic invocation.
            </summary>
            <param name="outEncaps">The encoded out parameters or user exception.</param>
            <param name="result">The asynchronous result object returned by <code>begin_ice_invoke</code>.</param>
            <returns>If the operation completed successfully, the return value
            is true. If the operation raises a user exception,
            the return value is false; in this case, outEncaps
            contains the encoded user exception. If the operation raises a run-time exception,
            it throws it directly.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getIdentity">
            <summary>
            Returns the identity embedded in this proxy.
            <returns>The identity of the target object.</returns>
            </summary>
        </member>
        <member name="M:Ice.ObjectPrx.ice_identity(Ice.Identity)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the per-proxy context.
            <param name="newIdentity">The identity for the new proxy.</param>
            <returns>The proxy with the new identity.</returns>
            </summary>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getContext">
            <summary>
            Returns the per-proxy context for this proxy.
            </summary>
            <returns>The per-proxy context. If the proxy does not have a per-proxy (implicit) context, the return value
            is null.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_context(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the per-proxy context.
            </summary>
            <param name="newContext">The context for the new proxy.</param>
            <returns>The proxy with the new per-proxy context.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getFacet">
            <summary>
            Returns the facet for this proxy.
            </summary>
            <returns>The facet for this proxy. If the proxy uses the default facet, the return value is the
            empty string.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_facet(System.String)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the facet.
            </summary>
            <param name="newFacet">The facet for the new proxy.</param>
            <returns>The proxy with the new facet.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getAdapterId">
            <summary>
            Returns the adapter ID for this proxy.
            </summary>
            <returns>The adapter ID. If the proxy does not have an adapter ID, the return value is the
            empty string.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_adapterId(System.String)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the adapter ID.
            </summary>
            <param name="newAdapterId">The adapter ID for the new proxy.</param>
            <returns>The proxy with the new adapter ID.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getEndpoints">
            <summary>
            Returns the endpoints used by this proxy.
            </summary>
            <returns>The endpoints used by this proxy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_endpoints(Ice.Endpoint[])">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the endpoints.
            </summary>
            <param name="newEndpoints">The endpoints for the new proxy.</param>
            <returns>The proxy with the new endpoints.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getLocatorCacheTimeout">
            <summary>
            Returns the locator cache timeout of this proxy.
            </summary>
            <returns>The locator cache timeout value (in seconds).</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_locatorCacheTimeout(System.Int32)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the locator cache timeout.
            </summary>
            <param name="timeout">The new locator cache timeout (in seconds).</param>
        </member>
        <member name="M:Ice.ObjectPrx.ice_invocationTimeout(System.Int32)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the invocation timeout.
            </summary>
            <param name="timeout">The new invocation timeout (in seconds).</param>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getInvocationTimeout">
            <summary>
            Returns the invocation timeout of this proxy.
            </summary>
            <returns>The invocation timeout value (in seconds).</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isConnectionCached">
            <summary>
            Returns whether this proxy caches connections.
            </summary>
            <returns>True if this proxy caches connections; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_connectionCached(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for connection caching.
            </summary>
            <param name="newCache">True if the new proxy should cache connections; false, otherwise.</param>
            <returns>The new proxy with the specified caching policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getEndpointSelection">
            <summary>
            Returns how this proxy selects endpoints (randomly or ordered).
            </summary>
            <returns>The endpoint selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_endpointSelection(Ice.EndpointSelectionType)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the endpoint selection policy.
            </summary>
            <param name="newType">The new endpoint selection policy.</param>
            <returns>The new proxy with the specified endpoint selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isSecure">
            <summary>
            Returns whether this proxy communicates only via secure endpoints.
            </summary>
            <returns>True if this proxy communicates only via secure endpoints; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_secure(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for how it selects endpoints.
            </summary>
            <param name="b"> If b is true, only endpoints that use a secure transport are
            used by the new proxy. If b is false, the returned proxy uses both secure and insecure
            endpoints.</param>
            <returns>The new proxy with the specified selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_encodingVersion(Ice.EncodingVersion)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the encoding used to marshal
            parameters.
            </summary>
            <param name="e">The encoding version to use to marshal requests parameters.</param>
            <returns>The new proxy with the specified encoding version.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getEncodingVersion">
            <summary>Returns the encoding version used to marshal requests parameters.</summary>
            <returns>The encoding version.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isPreferSecure">
            <summary>
            Returns whether this proxy prefers secure endpoints.
            </summary>
            <returns>True if the proxy always attempts to invoke via secure endpoints before it
            attempts to use insecure endpoints; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_preferSecure(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for its endpoint selection policy.
            </summary>
            <param name="b">If b is true, the new proxy will use secure endpoints for invocations
            and only use insecure endpoints if an invocation cannot be made via secure endpoints. If b is
            false, the proxy prefers insecure endpoints to secure ones.</param>
            <returns>The new proxy with the new endpoint selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getRouter">
            <summary>
            Returns the router for this proxy.
            </summary>
            <returns>The router for the proxy. If no router is configured for the proxy, the return value
            is null.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_router(Ice.RouterPrx)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the router.
            </summary>
            <param name="router">The router for the new proxy.</param>
            <returns>The new proxy with the specified router.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getLocator">
            <summary>
            Returns the locator for this proxy.
            </summary>
            <returns>The locator for this proxy. If no locator is configured, the return value is null.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_locator(Ice.LocatorPrx)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the locator.
            </summary>
            <param name="locator">The locator for the new proxy.</param>
            <returns>The new proxy with the specified locator.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isCollocationOptimized">
            <summary>
            Returns whether this proxy uses collocation optimization.
            </summary>
            <returns>True if the proxy uses collocation optimization; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_collocationOptimized(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for collocation optimization.
            </summary>
            <param name="b">True if the new proxy enables collocation optimization; false, otherwise.</param>
            <returns>The new proxy the specified collocation optimization.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_twoway">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses twoway invocations.
            </summary>
            <returns>A new proxy that uses twoway invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isTwoway">
            <summary>
            Returns whether this proxy uses twoway invocations.
            </summary>
            <returns>True if this proxy uses twoway invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_oneway">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses oneway invocations.
            </summary>
            <returns>A new proxy that uses oneway invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isOneway">
            <summary>
            Returns whether this proxy uses oneway invocations.
            </summary>
            <returns>True if this proxy uses oneway invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_batchOneway">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses batch oneway invocations.
            </summary>
            <returns>A new proxy that uses batch oneway invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isBatchOneway">
            <summary>
            Returns whether this proxy uses batch oneway invocations.
            </summary>
            <returns>True if this proxy uses batch oneway invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_datagram">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses datagram invocations.
            </summary>
            <returns>A new proxy that uses datagram invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isDatagram">
            <summary>
            Returns whether this proxy uses datagram invocations.
            </summary>
            <returns>True if this proxy uses datagram invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_batchDatagram">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses batch datagram invocations.
            </summary>
            <returns>A new proxy that uses batch datagram invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isBatchDatagram">
            <summary>
            Returns whether this proxy uses batch datagram invocations.
            </summary>
            <returns>True if this proxy uses batch datagram invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_compress(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for compression.
            </summary>
            <param name="co">True enables compression for the new proxy; false disables compression.</param>
            <returns>A new proxy with the specified compression setting.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getCompress">
            <summary>
            Obtains the compression override setting of this proxy.
            </summary>
            <returns>The compression override setting. If no optional value is present, no override is
            set. Otherwise, true if compression is enabled, false otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_timeout(System.Int32)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for its timeout setting.
            </summary>
            <param name="t">The timeout for the new proxy in milliseconds.</param>
            <returns>A new proxy with the specified timeout.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getTimeout">
            <summary>
            Obtains the timeout override of this proxy.
            </summary>
            <returns>The timeout override. If no optional value is present, no override is set. Otherwise,
            returns the timeout override value.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_connectionId(System.String)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for its connection ID.
            </summary>
            <param name="connectionId">The connection ID for the new proxy. An empty string removes the
            connection ID.</param>
            <returns>A new proxy with the specified connection ID.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getConnectionId">
            <summary>
            Returns the connection id of this proxy.
            </summary>
            <returns>The connection id.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_fixed(Ice.Connection)">
            <summary>
            Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
            the given connection.
            </summary>
            <param name="connection">The fixed proxy connection.</param>
            <returns>A fixed proxy bound to the given connection.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_isFixed">
            <summary>
            Returns whether this proxy is a fixed proxy.
            </summary>
            <returns>True if this is a fixed proxy, false otherwise.
            </returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getConnection">
            <summary>
            Returns the Connection for this proxy. If the proxy does not yet have an established connection,
            it first attempts to create a connection.
            </summary>
            <returns>The Connection for this proxy.</returns>
            <exception name="CollocationOptimizationException">If the proxy uses collocation optimization and denotes a
            collocated object.</exception>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getConnectionAsync(System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously gets the connection for this proxy.
            </summary>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_getConnection(Ice.AsyncCallback,System.Object)">
            <summary>
            Asynchronously gets the connection for this proxy.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_getConnection">
            <summary>
            Asynchronously gets the connection for this proxy.
            </summary>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_getConnection(Ice.AsyncResult)">
            <summary>
            Asynchronously gets the connection for this proxy.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_getConnection</code>.</param>
            <returns>The connection.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.ice_getCachedConnection">
            <summary>
            Returns the cached Connection for this proxy. If the proxy does not yet have an established
            connection, it does not attempt to create a connection.
            </summary>
            <returns>The cached Connection for this proxy (null if the proxy does not have
            an established connection).</returns>
            <exception name="CollocationOptimizationException">If the proxy uses collocation optimization and denotes a
            collocated object.</exception>
        </member>
        <member name="M:Ice.ObjectPrx.ice_flushBatchRequests">
            <summary>
            Flushes any pending batched requests for this proxy. The call blocks until the flush is complete.
            </summary>
        </member>
        <member name="M:Ice.ObjectPrx.ice_flushBatchRequestsAsync(System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously flushes any pending batched requests for this proxy.
            </summary>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrx.begin_ice_flushBatchRequests(Ice.AsyncCallback,System.Object)">
            <summary>
            Asynchronously flushes any pending batched requests for this proxy.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
        </member>
        <member name="M:Ice.ObjectPrx.end_ice_flushBatchRequests(Ice.AsyncResult)">
            <summary>
            Flushes any pending batched requests for this proxy. The call blocks until the flush is complete.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_getConnection</code>.</param>
        </member>
        <member name="M:Ice.ObjectPrx.iceWrite(Ice.OutputStream)">
            <summary>
            Write a proxy to the output stream.
            </summary>
            <param name="os">Output stream object to write the proxy.</param>
        </member>
        <member name="M:Ice.ObjectPrx.ice_scheduler">
            <summary>
            Returns a scheduler object that uses the Ice thread pool.
            </summary>
            <returns>The task scheduler object.</returns>
        </member>
        <member name="T:Ice.Object_Ice_invokeResult">
            <summary>
            Represent the result of the ice_invokeAsync operation
            </summary>
        </member>
        <member name="F:Ice.Object_Ice_invokeResult.returnValue">
            <summary>
            If the operation completed successfully, the return value
            is true. If the operation raises a user exception,
            the return value is false; in this case, outEncaps
            contains the encoded user exception.
            </summary>
        </member>
        <member name="F:Ice.Object_Ice_invokeResult.outEncaps">
            <summary>
            The encoded out-paramaters and return value for the operation.
            The return value follows any out-parameters. If returnValue is
            false it contains the encoded user exception.
            </summary>
        </member>
        <member name="T:Ice.ObjectPrxHelperBase">
            <summary>
            Base class of all object proxies.
            </summary>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.GetHashCode">
            <summary>
            Returns a hash code for this proxy.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getCommunicator">
            <summary>
            Returns the communicator that created this proxy.
            </summary>
            <returns>The communicator that created this proxy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ToString">
            <summary>
            Returns the stringified form of this proxy.
            </summary>
            <returns>The stringified proxy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isA(System.String,Ice.OptionalContext)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>True if the target object has the interface specified by id or derives
            from the interface specified by id.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isAAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_isA(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_isA(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_isA(System.String,Ice.OptionalContext)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="id">The type ID of the Slice interface to test against.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.end_ice_isA(Ice.AsyncResult)">
            <summary>
            Tests whether this object supports a specific Slice interface.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_isA</code>.</param>
            <returns>True if the object supports the Slice interface, false otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_ping(Ice.OptionalContext)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_pingAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_ping(Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_ping(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_ping(Ice.OptionalContext)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.end_ice_ping(Ice.AsyncResult)">
            <summary>
            Tests whether the target object of this proxy can be reached.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_ping</code>.</param>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_ids(Ice.OptionalContext)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>The Slice type IDs of the interfaces supported by the target object, in base-to-derived
            order. The first element of the returned array is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_idsAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_ids(Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_ids(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.end_ice_ids(Ice.AsyncResult)">
            <summary>
            Returns the Slice type IDs of the interfaces supported by the target object of this proxy.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_ids</code>.</param>
            <returns>The Slice type IDs of the interfaces supported by the target object, in base-to-derived
            order. The first element of the returned array is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_id(Ice.OptionalContext)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <returns>The Slice type ID of the most-derived interface.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_idAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_id(Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_id(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_id(Ice.OptionalContext)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.end_ice_id(Ice.AsyncResult)">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by the target object of this proxy.
            </summary>
            <param name="result">The asynchronous result object returned by <code>begin_ice_id</code>.</param>
            <returns>The Slice type ID of the most-derived interface.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_invoke(System.String,Ice.OperationMode,System.Byte[],System.Byte[]@,Ice.OptionalContext)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="outEncaps">The encoded out-paramaters and return value
            for the operation. The return value follows any out-parameters.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>If the operation completed successfully, the return value
            is true. If the operation raises a user exception,
            the return value is false; in this case, outEncaps
            contains the encoded user exception. If the operation raises a run-time exception,
            it throws it directly.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_invokeAsync(System.String,Ice.OperationMode,System.Byte[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_invoke(System.String,Ice.OperationMode,System.Byte[],Ice.AsyncCallback,System.Object)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_invoke(System.String,Ice.OperationMode,System.Byte[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <param name="callback">A callback to be invoked when the invocation completes.</param>
            <param name="cookie">Application-specific data to be stored in the result.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.begin_ice_invoke(System.String,Ice.OperationMode,System.Byte[],Ice.OptionalContext)">
            <summary>
            Invokes an operation dynamically.
            </summary>
            <param name="operation">The name of the operation to invoke.</param>
            <param name="mode">The operation mode (normal or idempotent).</param>
            <param name="inEncaps">The encoded in-parameters for the operation.</param>
            <param name="context">The context dictionary for the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.end_ice_invoke(System.Byte[]@,Ice.AsyncResult)">
            <summary>
            Completes a dynamic invocation.
            </summary>
            <param name="outEncaps">The encoded out parameters or user exception.</param>
            <param name="result">The asynchronous result object returned by <code>begin_ice_invoke</code>.</param>
            <returns>If the operation completed successfully, the return value
            is true. If the operation raises a user exception,
            the return value is false; in this case, outEncaps
            contains the encoded user exception. If the operation raises a run-time exception,
            it throws it directly.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getIdentity">
            <summary>
            Returns the identity embedded in this proxy.
            <returns>The identity of the target object.</returns>
            </summary>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_identity(Ice.Identity)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the per-proxy context.
            <param name="newIdentity">The identity for the new proxy.</param>
            <returns>The proxy with the new identity.</returns>
            </summary>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getContext">
            <summary>
            Returns the per-proxy context for this proxy.
            </summary>
            <returns>The per-proxy context. If the proxy does not have a per-proxy (implicit) context, the return value
            is null.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_context(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the per-proxy context.
            </summary>
            <param name="newContext">The context for the new proxy.</param>
            <returns>The proxy with the new per-proxy context.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getFacet">
            <summary>
            Returns the facet for this proxy.
            </summary>
            <returns>The facet for this proxy. If the proxy uses the default facet, the return value is the
            empty string.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_facet(System.String)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the facet.
            </summary>
            <param name="newFacet">The facet for the new proxy.</param>
            <returns>The proxy with the new facet.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getAdapterId">
            <summary>
            Returns the adapter ID for this proxy.
            </summary>
            <returns>The adapter ID. If the proxy does not have an adapter ID, the return value is the
            empty string.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_adapterId(System.String)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the adapter ID.
            </summary>
            <param name="newAdapterId">The adapter ID for the new proxy.</param>
            <returns>The proxy with the new adapter ID.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getEndpoints">
            <summary>
            Returns the endpoints used by this proxy.
            </summary>
            <returns>The endpoints used by this proxy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_endpoints(Ice.Endpoint[])">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the endpoints.
            </summary>
            <param name="newEndpoints">The endpoints for the new proxy.</param>
            <returns>The proxy with the new endpoints.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getLocatorCacheTimeout">
            <summary>
            Returns the locator cache timeout of this proxy.
            </summary>
            <returns>The locator cache timeout value (in seconds).</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_locatorCacheTimeout(System.Int32)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the locator cache timeout.
            </summary>
            <param name="newTimeout">The new locator cache timeout (in seconds).</param>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getInvocationTimeout">
            <summary>
            Returns the invocation timeout of this proxy.
            </summary>
            <returns>The invocation timeout value (in seconds).</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_invocationTimeout(System.Int32)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the invocation timeout.
            </summary>
            <param name="newTimeout">The new invocation timeout (in seconds).</param>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isConnectionCached">
            <summary>
            Returns whether this proxy caches connections.
            </summary>
            <returns>True if this proxy caches connections; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_connectionCached(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for connection caching.
            </summary>
            <param name="newCache">True if the new proxy should cache connections; false, otherwise.</param>
            <returns>The new proxy with the specified caching policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getEndpointSelection">
            <summary>
            Returns how this proxy selects endpoints (randomly or ordered).
            </summary>
            <returns>The endpoint selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_endpointSelection(Ice.EndpointSelectionType)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the endpoint selection policy.
            </summary>
            <param name="newType">The new endpoint selection policy.</param>
            <returns>The new proxy with the specified endpoint selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isSecure">
            <summary>
            Returns whether this proxy communicates only via secure endpoints.
            </summary>
            <returns>True if this proxy communicates only vi secure endpoints; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_secure(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for how it selects endpoints.
            </summary>
            <param name="b"> If b is true, only endpoints that use a secure transport are
            used by the new proxy. If b is false, the returned proxy uses both secure and insecure
            endpoints.</param>
            <returns>The new proxy with the specified selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_encodingVersion(Ice.EncodingVersion)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the encoding used to marshal
            parameters.
            </summary>
            <param name="e">The encoding version to use to marshal requests parameters.</param>
            <returns>The new proxy with the specified encoding version.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getEncodingVersion">
            <summary>Returns the encoding version used to marshal requests parameters.</summary>
            <returns>The encoding version.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isPreferSecure">
            <summary>
            Returns whether this proxy prefers secure endpoints.
            </summary>
            <returns>True if the proxy always attempts to invoke via secure endpoints before it
            attempts to use insecure endpoints; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_preferSecure(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for its endpoint selection policy.
            </summary>
            <param name="b">If b is true, the new proxy will use secure endpoints for invocations
            and only use insecure endpoints if an invocation cannot be made via secure endpoints. If b is
            false, the proxy prefers insecure endpoints to secure ones.</param>
            <returns>The new proxy with the new endpoint selection policy.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getRouter">
            <summary>
            Returns the router for this proxy.
            </summary>
            <returns>The router for the proxy. If no router is configured for the proxy, the return value
            is null.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_router(Ice.RouterPrx)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the router.
            </summary>
            <param name="router">The router for the new proxy.</param>
            <returns>The new proxy with the specified router.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getLocator">
            <summary>
            Returns the locator for this proxy.
            </summary>
            <returns>The locator for this proxy. If no locator is configured, the return value is null.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_locator(Ice.LocatorPrx)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for the locator.
            </summary>
            <param name="locator">The locator for the new proxy.</param>
            <returns>The new proxy with the specified locator.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isCollocationOptimized">
            <summary>
            Returns whether this proxy uses collocation optimization.
            </summary>
            <returns>True if the proxy uses collocation optimization; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_collocationOptimized(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for collocation optimization.
            </summary>
            <param name="b">True if the new proxy enables collocation optimization; false, otherwise.</param>
            <returns>The new proxy the specified collocation optimization.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_twoway">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses twoway invocations.
            </summary>
            <returns>A new proxy that uses twoway invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isTwoway">
            <summary>
            Returns whether this proxy uses twoway invocations.
            </summary>
            <returns>True if this proxy uses twoway invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_oneway">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses oneway invocations.
            </summary>
            <returns>A new proxy that uses oneway invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isOneway">
            <summary>
            Returns whether this proxy uses oneway invocations.
            </summary>
            <returns>True if this proxy uses oneway invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_batchOneway">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses batch oneway invocations.
            </summary>
            <returns>A new proxy that uses batch oneway invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isBatchOneway">
            <summary>
            Returns whether this proxy uses batch oneway invocations.
            </summary>
            <returns>True if this proxy uses batch oneway invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_datagram">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses datagram invocations.
            </summary>
            <returns>A new proxy that uses datagram invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isDatagram">
            <summary>
            Returns whether this proxy uses datagram invocations.
            </summary>
            <returns>True if this proxy uses datagram invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_batchDatagram">
            <summary>
            Creates a new proxy that is identical to this proxy, but uses batch datagram invocations.
            </summary>
            <returns>A new proxy that uses batch datagram invocations.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isBatchDatagram">
            <summary>
            Returns whether this proxy uses batch datagram invocations.
            </summary>
            <returns>True if this proxy uses batch datagram invocations; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_compress(System.Boolean)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for compression.
            </summary>
            <param name="co">True enables compression for the new proxy; false disables compression.</param>
            <returns>A new proxy with the specified compression setting.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getCompress">
            <summary>
            Obtains the compression override setting of this proxy.
            </summary>
            <returns>The compression override setting. If no optional value is present, no override is
            set. Otherwise, true if compression is enabled, false otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_timeout(System.Int32)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for its timeout setting.
            </summary>
            <param name="t">The timeout for the new proxy in milliseconds.</param>
            <returns>A new proxy with the specified timeout.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getTimeout">
            <summary>
            Obtains the timeout override of this proxy.
            </summary>
            <returns>The timeout override. If no optional value is present, no override is set. Otherwise,
            returns the timeout override value.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_connectionId(System.String)">
            <summary>
            Creates a new proxy that is identical to this proxy, except for its connection ID.
            </summary>
            <param name="connectionId">The connection ID for the new proxy. An empty string removes the
            connection ID.</param>
            <returns>A new proxy with the specified connection ID.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getConnectionId">
            <summary>
            Returns the connection id of this proxy.
            </summary>
            <returns>The connection id.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_fixed(Ice.Connection)">
            <summary>
            Returns a proxy that is identical to this proxy, except it's a fixed proxy bound
            the given connection.
            </summary>
            <param name="connection">The fixed proxy connection.</param>
            <returns>A fixed proxy bound to the given connection.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_isFixed">
            <summary>
            Returns whether this proxy is a fixed proxy.
            </summary>
            <returns>True if this is a fixed proxy, false otherwise.
            </returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getConnection">
            <summary>
            Returns the Connection for this proxy. If the proxy does not yet have an established connection,
            it first attempts to create a connection.
            </summary>
            <returns>The Connection for this proxy.</returns>
            <exception name="CollocationOptimizationException">If the proxy uses collocation optimization and denotes a
            collocated object.</exception>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_getCachedConnection">
            <summary>
            Returns the cached Connection for this proxy. If the proxy does not yet have an established
            connection, it does not attempt to create a connection.
            </summary>
            <returns>The cached Connection for this proxy (null if the proxy does not have
            an established connection).</returns>
            <exception name="CollocationOptimizationException">If the proxy uses collocation optimization and denotes a
            collocated object.</exception>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.ice_flushBatchRequests">
            <summary>
            Flushes any pending batched requests for this communicator. The call blocks until the flush is complete.
            </summary>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.Equals(System.Object)">
            <summary>
            Returns whether this proxy equals the passed object. Two proxies are equal if they are equal in all
            respects, that is, if their object identity, endpoints timeout settings, and so on are all equal.
            </summary>
            <param name="r">The object to compare this proxy with.</param>
            <returns>True if this proxy is equal to r; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.Equals(Ice.ObjectPrxHelperBase,Ice.ObjectPrxHelperBase)">
            <summary>
            Returns whether two proxies are equal. Two proxies are equal if they are equal in all
            respects, that is, if their object identity, endpoints timeout settings, and so on are all equal.
            </summary>
            <param name="lhs">A proxy to compare with the proxy rhs.</param>
            <param name="rhs">A proxy to compare with the proxy lhs.</param>
            <returns>True if the proxies are equal; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.op_Equality(Ice.ObjectPrxHelperBase,Ice.ObjectPrxHelperBase)">
            <summary>
            Returns whether two proxies are equal. Two proxies are equal if they are equal in all
            respects, that is, if their object identity, endpoints timeout settings, and so on are all equal.
            </summary>
            <param name="lhs">A proxy to compare with the proxy rhs.</param>
            <param name="rhs">A proxy to compare with the proxy lhs.</param>
            <returns>True if the proxies are equal; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.op_Inequality(Ice.ObjectPrxHelperBase,Ice.ObjectPrxHelperBase)">
            <summary>
            Returns whether two proxies are not equal. Two proxies are equal if they are equal in all
            respects, that is, if their object identity, endpoints timeout settings, and so on are all equal.
            </summary>
            <param name="lhs">A proxy to compare with the proxy rhs.</param>
            <param name="rhs">A proxy to compare with the proxy lhs.</param>
            <returns>True if the proxies are not equal; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.cacheMessageBuffers(Ice.InputStream,Ice.OutputStream)">
            <summary>
            Only for internal use by OutgoingAsync
            </summary>
            <param name="iss"></param>
            <param name="os"></param>
        </member>
        <member name="M:Ice.ObjectPrxHelperBase.setup(IceInternal.Reference)">
            <summary>
            Only for internal use by ProxyFactory
            </summary>
            <param name="ref"></param>
        </member>
        <member name="T:Ice.ObjectPrxHelper">
            <summary>
            Base class for all proxy helpers.
            </summary>
        </member>
        <member name="M:Ice.ObjectPrxHelper.checkedCast(Ice.ObjectPrx)">
            <summary>
            Casts a proxy to {@link ObjectPrx}. This call contacts
            the server and will throw an Ice run-time exception if the target
            object does not exist or the server cannot be reached.
            </summary>
            <param name="b">The proxy to cast to ObjectPrx.</param>
            <returns>b.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelper.checkedCast(Ice.ObjectPrx,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Casts a proxy to {@link ObjectPrx}. This call contacts
            the server and throws an Ice run-time exception if the target
            object does not exist or the server cannot be reached.
            </summary>
            <param name="b">The proxy to cast to ObjectPrx.</param>
            <param name="ctx">The Context map for the invocation.</param>
            <returns>b.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelper.checkedCast(Ice.ObjectPrx,System.String)">
            <summary>
            Creates a new proxy that is identical to the passed proxy, except
            for its facet. This call contacts
            the server and throws an Ice run-time exception if the target
            object does not exist, the specified facet does not exist, or the server cannot be reached.
            </summary>
            <param name="b">The proxy to cast to ObjectPrx.</param>
            <param name="f">The facet for the new proxy.</param>
            <returns>The new proxy with the specified facet.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelper.checkedCast(Ice.ObjectPrx,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Creates a new proxy that is identical to the passed proxy, except
            for its facet. This call contacts
            the server and throws an Ice run-time exception if the target
            object does not exist, the specified facet does not exist, or the server cannot be reached.
            </summary>
            <param name="b">The proxy to cast to ObjectPrx.</param>
            <param name="f">The facet for the new proxy.</param>
            <param name="ctx">The Context map for the invocation.</param>
            <returns>The new proxy with the specified facet.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelper.uncheckedCast(Ice.ObjectPrx)">
            <summary>
            Casts a proxy to {@link ObjectPrx}. This call does
            not contact the server and always succeeds.
            </summary>
            <param name="b">The proxy to cast to ObjectPrx.</param>
            <returns>b.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelper.uncheckedCast(Ice.ObjectPrx,System.String)">
            <summary>
            Creates a new proxy that is identical to the passed proxy, except
            for its facet. This call does not contact the server and always succeeds.
            </summary>
            <param name="b">The proxy to cast to ObjectPrx.</param>
            <param name="f">The facet for the new proxy.</param>
            <returns>The new proxy with the specified facet.</returns>
        </member>
        <member name="M:Ice.ObjectPrxHelper.ice_staticId">
            <summary>
            Returns the Slice type id of the interface or class associated
            with this proxy class.
            </summary>
            <returns>The type id, "::Ice::Object".</returns>
        </member>
        <member name="T:Ice.ProxyIdentityKey">
            <summary>
            This class allows a proxy to be used as the key for a hashed collection.
            The GetHashCode, Equals, and Compare methods are based on the object identity
            of the proxy.
            </summary>
        </member>
        <member name="M:Ice.ProxyIdentityKey.GetHashCode(System.Object)">
            <summary>
            Computes a hash value based on the object identity of the proxy.
            </summary>
            <param name="obj">The proxy whose hash value to compute.</param>
            <returns>The hash value for the proxy based on the identity.</returns>
        </member>
        <member name="M:Ice.ProxyIdentityKey.Equals(System.Object,System.Object)">
            Compares two proxies for equality.
            <param name="obj1">A proxy to compare.</param>
            <param name="obj2">A proxy to compare.</param>
            <returns>True if the passed proxies have the same object
            identity; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ProxyIdentityKey.Compare(System.Object,System.Object)">
            Compares two proxies using the object identity for comparison.
            <param name="obj1">A proxy to compare.</param>
            <param name="obj2">A proxy to compare.</param>
            <returns>&lt; 0 if obj1 is less than obj2; &gt; 0 if obj1 is greater than obj2;
            0, otherwise.</returns>
        </member>
        <member name="T:Ice.ProxyIdentityFacetKey">
            <summary>
            This class allows a proxy to be used as the key for a hashed collection.
            The GetHashCode, Equals, and Compare methods are based on the object identity and
            the facet of the proxy.
            </summary>
        </member>
        <member name="M:Ice.ProxyIdentityFacetKey.GetHashCode(System.Object)">
            <summary>
            Computes a hash value based on the object identity and facet of the proxy.
            </summary>
            <param name="obj">The proxy whose hash value to compute.</param>
            <returns>The hash value for the proxy based on the identity and facet.</returns>
        </member>
        <member name="M:Ice.ProxyIdentityFacetKey.Equals(System.Object,System.Object)">
            Compares two proxies for equality.
            <param name="obj1">A proxy to compare.</param>
            <param name="obj2">A proxy to compare.</param>
            <returns>True if the passed proxies have the same object
            identity and facet; false, otherwise.</returns>
        </member>
        <member name="M:Ice.ProxyIdentityFacetKey.Compare(System.Object,System.Object)">
            Compares two proxies using the object identity and facet for comparison.
            <param name="obj1">A proxy to compare.</param>
            <param name="obj2">A proxy to compare.</param>
            <returns>&lt; 0 if obj1 is less than obj2; &gt; 0 if obj1 is greater than obj2;
            0, otherwise.</returns>
        </member>
        <member name="T:Ice.SlicedData">
            <summary>
            SlicedData holds the slices of unknown class or exception types.
            </summary>
        </member>
        <member name="F:Ice.SlicedData.slices">
             The details of each slice, in order of most-derived to least-derived.
            
        </member>
        <member name="T:Ice.SliceInfo">
            <summary>
            SliceInfo encapsulates the details of a slice for an unknown class or exception type.
            </summary>
        </member>
        <member name="F:Ice.SliceInfo.typeId">
            <summary>
            The Slice type ID for this slice.
            </summary>
        </member>
        <member name="F:Ice.SliceInfo.compactId">
            <summary>
            The Slice compact type ID for this slice.
            </summary>
        </member>
        <member name="F:Ice.SliceInfo.bytes">
            <summary>
            The encoded bytes for this slice, including the leading size integer.
            </summary>
        </member>
        <member name="F:Ice.SliceInfo.instances">
            <summary>
            The class instances referenced by this slice.
            </summary>
        </member>
        <member name="F:Ice.SliceInfo.hasOptionalMembers">
            <summary>
            Whether or not the slice contains optional members.
            </summary>
        </member>
        <member name="F:Ice.SliceInfo.isLastSlice">
            <summary>
            Whether or not this is the last slice.
            </summary>
        </member>
        <member name="T:Ice.ThreadHookPlugin">
            <summary>
            Class to support thread notification hooks. Applications using
            thread notification hooks instantiate a ThreadHookPlugin with a
            thread notification hook  and return the instance from their
            PluginFactory implementation.
            </summary>
        </member>
        <member name="M:Ice.ThreadHookPlugin.#ctor(Ice.Communicator,Ice.ThreadNotification)">
            <summary>
            Installs a thread hook for a communicator.
            </summary>
            <param name="communicator">The communicator using the thread notification hook.</param>
            <param name="threadHook">The thread notification hook for the communicator.</param>
        </member>
        <member name="M:Ice.ThreadHookPlugin.#ctor(Ice.Communicator,System.Action,System.Action)">
            <summary>
            Installs thread hooks for a communicator.
            </summary>
            <param name="communicator">The communicator using the thread notification hook.</param>
            <param name="threadStart">The start thread notification hook for the communicator.</param>
            <param name="threadStop">The stop thread notification hook for the communicator.</param>
        </member>
        <member name="M:Ice.ThreadHookPlugin.initialize">
            <summary>
            Called by the Ice run time during communicator initialization. The derived class
            can override this method to perform any initialization that might be required
            by the thread notification hook.
            </summary>
        </member>
        <member name="M:Ice.ThreadHookPlugin.destroy">
            <summary>
            Called by the Ice run time when the communicator is destroyed. The derived class
            can override this method to perform any finalization that might be required
            by thread notification hook.
            </summary>
        </member>
        <member name="T:Ice.TieBase">
            <summary>
            Interface for servants using the tie mapping.
            </summary>
        </member>
        <member name="M:Ice.TieBase.ice_delegate">
            <summary>
            Returns the delegate for this tie.
            </summary>
            <returns>The delegate.</returns>
        </member>
        <member name="M:Ice.TieBase.ice_delegate(System.Object)">
            <summary>
            Returns the delegate for this tie.
            </summary>
            <param name="o">The delegate.</param>
        </member>
        <member name="T:Ice.UnknownSlicedValue">
            <summary>
            Unknown sliced value holds an instance of an unknown Slice class type.
            </summary>
        </member>
        <member name="M:Ice.UnknownSlicedValue.#ctor(System.String)">
            <summary>
            Represents an instance of a Slice class type having the given Slice type.
            </summary>
            <param name="unknownTypeId">The Slice type ID of the unknown object.</param>
        </member>
        <member name="M:Ice.UnknownSlicedValue.ice_getSlicedData">
            <summary>
            Returns the sliced data if the value has a preserved-slice base class and has been sliced during
            un-marshaling of the value, null is returned otherwise.
            </summary>
            <returns>The sliced data or null.</returns>
        </member>
        <member name="M:Ice.UnknownSlicedValue.ice_id">
            <summary>
            Returns the Slice type ID associated with this object.
            </summary>
            <returns>The type ID.</returns>
        </member>
        <member name="T:Ice.ThreadNotification">
            <summary>
            Interface for thread notification hooks. Applications can derive
            a class tat implements the start and stop
            methods to intercept creation and destruction of threads created
            by the Ice run time.
            </summary>
        </member>
        <member name="M:Ice.ThreadNotification.start">
            <summary>
            The Ice run time calls start for each new
            thread it creates. The call is made by the newly-started thread.
            </summary>
        </member>
        <member name="M:Ice.ThreadNotification.stop">
            <summary>
            The Ice run time calls stop before it destroys
            a thread. The call is made by thread that is about to be
            destroyed.
            </summary>
        </member>
        <member name="T:Ice.InitializationData">
            <summary>
            A class that encpasulates data to initialize a communicator.
            </summary>
        </member>
        <member name="M:Ice.InitializationData.Clone">
            <summary>
            Creates and returns a copy of this object.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.properties">
            <summary>
            The properties for the communicator.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.logger">
            <summary>
            The logger for the communicator.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.observer">
            <summary>
            The communicator observer used by the Ice run-time.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.threadHook">
            <summary>
            The thread hook for the communicator.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.threadStart">
            <summary>
            The thread start hook for the communicator. The Ice run time
            calls this hook for each new thread it creates. The call is
            made by the newly-started thread.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.threadStop">
            <summary>
            The thread stop hook for the communicator. The Ice run time
            calls stop before it destroys a thread. The call is made by
            thread that is about to be destroyed.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.dispatcher">
            <summary>
            The dispatcher for the communicator.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.compactIdResolver">
            <summary>
            The compact type ID resolver.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.batchRequestInterceptor">
            <summary>
            The batch request interceptor.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.valueFactoryManager">
            <summary>
            The value factory manager.
            </summary>
        </member>
        <member name="F:Ice.InitializationData.typeIdNamespaces">
            <summary>
            The list of TypeId namespaces. Default is Ice.TypeId.
            </summary>
        </member>
        <member name="T:Ice.Util">
            <summary>
            Utility methods for the Ice run time.
            </summary>
        </member>
        <member name="M:Ice.Util.createProperties">
            <summary>
            Creates a new empty property set.
            </summary>
            <returns>A new empty property set.</returns>
        </member>
        <member name="M:Ice.Util.createProperties(System.String[]@)">
            <summary>
            Creates a property set initialized from an argument vector.
            </summary>
            <param name="args">A command-line argument vector, possibly containing
            options to set properties. If the command-line options include
            a --Ice.Config option, the corresponding configuration
            files are parsed. If the same property is set in a configuration
            file and in the argument vector, the argument vector takes precedence.
            This method modifies the argument vector by removing any Ice-related options.</param>
            <returns>A property set initialized with the property settings
            that were removed from args.</returns>
        </member>
        <member name="M:Ice.Util.createProperties(System.String[]@,Ice.Properties)">
            <summary>
            Creates a property set initialized from an argument vector.
            </summary>
            <param name="args">A command-line argument vector, possibly containing
            options to set properties. If the command-line options include
            a --Ice.Config option, the corresponding configuration
            files are parsed. If the same property is set in a configuration
            file and in the argument vector, the argument vector takes precedence.
            This method modifies the argument vector by removing any Ice-related options.</param>
            <param name="defaults">Default values for the property set. Settings in configuration
            files and args override these defaults.</param>
            <returns>A property set initialized with the property settings
            that were removed from args.</returns>
        </member>
        <member name="M:Ice.Util.initialize(System.String[]@)">
            <summary>
            Creates a communicator.
            </summary>
            <param name="args">A command-line argument vector. Any Ice-related options
            in this vector are used to intialize the communicator.
            This method modifies the argument vector by removing any Ice-related options.</param>
            <returns>The initialized communicator.</returns>
        </member>
        <member name="M:Ice.Util.initialize(System.String[]@,Ice.InitializationData)">
            <summary>
            Creates a communicator.
            </summary>
            <param name="args">A command-line argument vector. Any Ice-related options
            in this vector are used to initialize the communicator.
            This method modifies the argument vector by removing any Ice-related options.</param>
            <param name="initData">Additional intialization data. Property settings in args
            override property settings in initData.</param>
            <returns>The initialized communicator.</returns>
        </member>
        <member name="M:Ice.Util.initialize(System.String[]@,System.String)">
            <summary>
            Creates a communicator.
            </summary>
            <param name="args">A command-line argument vector. Any Ice-related options
            in this vector are used to initialize the communicator.
            This method modifies the argument vector by removing any Ice-related options.</param>
            <param name="configFile">Path to a config file that sets the new communicator's default
            properties.</param>
            <returns>The initialized communicator.</returns>
        </member>
        <member name="M:Ice.Util.initialize(Ice.InitializationData)">
            <summary>
            Creates a communicator.
            </summary>
            <param name="initData">Additional intialization data.</param>
            <returns>The initialized communicator.</returns>
        </member>
        <member name="M:Ice.Util.initialize(System.String)">
            <summary>
            Creates a communicator.
            </summary>
            <param name="configFile">Path to a config file that sets the new communicator's default
            properties.</param>
            <returns>The initialized communicator.</returns>
        </member>
        <member name="M:Ice.Util.initialize">
            <summary>
            Creates a communicator using a default configuration.
            </summary>
        </member>
        <member name="M:Ice.Util.stringToIdentity(System.String)">
            <summary>
            Converts a string to an object identity.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>The converted object identity.</returns>
        </member>
        <member name="M:Ice.Util.identityToString(Ice.Identity,Ice.ToStringMode)">
            <summary>
            Converts an object identity to a string.
            </summary>
            <param name="ident">The object identity to convert.</param>
            <param name="toStringMode">Specifies if and how non-printable ASCII characters are escaped in the result.</param>
            <returns>The string representation of the object identity.</returns>
        </member>
        <member name="M:Ice.Util.generateUUID">
            <summary>
            This method is deprecated. Use System.Guid instead.
            </summary>
        </member>
        <member name="M:Ice.Util.proxyIdentityCompare(Ice.ObjectPrx,Ice.ObjectPrx)">
            <summary>
            Compares the object identities of two proxies.
            </summary>
            <param name="lhs">A proxy.</param>
            <param name="rhs">A proxy.</param>
            <returns>-1 if the identity in lhs compares
            less than the identity in rhs; 0 if the identities
            compare equal; 1, otherwise.</returns>
        </member>
        <member name="M:Ice.Util.proxyIdentityAndFacetCompare(Ice.ObjectPrx,Ice.ObjectPrx)">
            <summary>
            Compares the object identities and facets of two proxies.
            </summary>
            <param name="lhs">A proxy.</param>
            <param name="rhs">A proxy.</param>
            <returns>-1 if the identity and facet in lhs compare
            less than the identity and facet in rhs; 0 if the identities
            and facets compare equal; 1, otherwise.</returns>
        </member>
        <member name="M:Ice.Util.getProcessLogger">
            <summary>
            Returns the process-wide logger.
            </summary>
            <returns>The process-wide logger.</returns>
        </member>
        <member name="M:Ice.Util.setProcessLogger(Ice.Logger)">
            <summary>
            Changes the process-wide logger.
            </summary>
            <param name="logger">The new process-wide logger.</param>
        </member>
        <member name="M:Ice.Util.stringVersion">
            <summary>
            Returns the Ice version in the form A.B.C, where A indicates the
            major version, B indicates the minor version, and C indicates the
            patch level.
            </summary>
            <returns>The Ice version.</returns>
        </member>
        <member name="M:Ice.Util.intVersion">
            <summary>
            Returns the Ice version as an integer in the form A.BB.CC, where A
            indicates the major version, BB indicates the minor version, and CC
            indicates the patch level. For example, for Ice 3.3.1, the returned value is 30301.
            </summary>
            <returns>The Ice version.</returns>
        </member>
        <member name="M:Ice.Util.stringToProtocolVersion(System.String)">
            <summary>
            Converts a string to a protocol version.
            </summary>
            <param name="version">The string to convert.</param>
            <returns>The converted protocol version.</returns>
        </member>
        <member name="M:Ice.Util.stringToEncodingVersion(System.String)">
            <summary>
            Converts a string to an encoding version.
            </summary>
            <param name="version">The string to convert.</param>
            <returns>The converted encoding version.</returns>
        </member>
        <member name="M:Ice.Util.protocolVersionToString(Ice.ProtocolVersion)">
            <summary>
            Converts a protocol version to a string.
            </summary>
            <param name="v">The protocol version to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Ice.Util.encodingVersionToString(Ice.EncodingVersion)">
            <summary>
            Converts an encoding version to a string.
            </summary>
            <param name="v">The encoding version to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Ice.Value.ice_staticId">
            <summary>
            Returns the Slice type ID of the interface supported by this object.
            </summary>
            <returns>The return value is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.Value.ice_id">
            <summary>
            Returns the Slice type ID of the most-derived interface supported by this object.
            </summary>
            <returns>The return value is always ::Ice::Object.</returns>
        </member>
        <member name="M:Ice.Value.ice_preMarshal">
            <summary>
            The Ice run time invokes this method prior to marshaling an object's data members. This allows a subclass
            to override this method in order to validate its data members.
            </summary>
        </member>
        <member name="M:Ice.Value.ice_postUnmarshal">
            <summary>
            This Ice run time invokes this method after unmarshaling an object's data members. This allows a
            subclass to override this method in order to perform additional initialization.
            </summary>
        </member>
        <member name="M:Ice.Value.ice_getSlicedData">
            <summary>
            Returns the sliced data if the value has a preserved-slice base class and has been sliced during
            un-marshaling of the value, null is returned otherwise.
            </summary>
            <returns>The sliced data or null.</returns>
        </member>
        <member name="M:Ice.Value.Clone">
            <summary>
            Returns a copy of the object. The cloned object contains field-for-field copies
            of the state.
            </summary>
            <returns>The cloned object.</returns>
        </member>
        <member name="M:Ice.Communicator.destroy">
             <summary>
             Destroy the communicator.
             This operation calls shutdown
             implicitly.  Calling destroy cleans up memory, and shuts down
             this communicator's client functionality and destroys all object
             adapters. Subsequent calls to destroy are ignored.
            
             </summary>
        </member>
        <member name="M:Ice.Communicator.shutdown">
             <summary>
             Shuts down this communicator's server functionality, which
             includes the deactivation of all object adapters.
             Attempts to use a
             deactivated object adapter raise ObjectAdapterDeactivatedException.
             Subsequent calls to shutdown are ignored.
            
             After shutdown returns, no new requests are processed. However, requests
             that have been started before shutdown was called might still be active.
             You can use waitForShutdown to wait for the completion of all
             requests.
            
             </summary>
        </member>
        <member name="M:Ice.Communicator.waitForShutdown">
             <summary>
             Wait until the application has called shutdown (or destroy).
             On the server side, this operation blocks the calling thread
             until all currently-executing operations have completed.
             On the client side, the operation simply blocks until another
             thread has called shutdown or destroy.
            
             A typical use of this operation is to call it from the main thread,
             which then waits until some other thread calls shutdown.
             After shut-down is complete, the main thread returns and can do some
             cleanup work before it finally calls destroy to shut down
             the client functionality, and then exits the application.
            
             </summary>
        </member>
        <member name="M:Ice.Communicator.isShutdown">
             <summary>
             Check whether communicator has been shut down.
             </summary>
             <returns>True if the communicator has been shut down; false otherwise.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.stringToProxy(System.String)">
             <summary>
             Convert a stringified proxy into a proxy.
             For example,
             MyCategory/MyObject:tcp -h some_host -p
             10000 creates a proxy that refers to the Ice object
             having an identity with a name "MyObject" and a category
             "MyCategory", with the server running on host "some_host", port
             10000. If the stringified proxy does not parse correctly, the
             operation throws one of ProxyParseException, EndpointParseException,
             or IdentityParseException. Refer to the Ice manual for a detailed
             description of the syntax supported by stringified proxies.
            
             </summary>
             <param name="str">The stringified proxy to convert into a proxy.
            
             </param>
             <returns>The proxy, or nil if str is an empty string.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.proxyToString(Ice.ObjectPrx)">
             <summary>
             Convert a proxy into a string.
             </summary>
             <param name="obj">The proxy to convert into a stringified proxy.
            
             </param>
             <returns>The stringified proxy, or an empty string if
             obj is nil.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.propertyToProxy(System.String)">
             <summary>
             Convert a set of proxy properties into a proxy.
             The "base"
             name supplied in the property argument refers to a
             property containing a stringified proxy, such as
             MyProxy=id:tcp -h localhost -p 10000. Additional
             properties configure local settings for the proxy, such as
             MyProxy.PreferSecure=1. The "Properties"
             appendix in the Ice manual describes each of the supported
             proxy properties.
            
             </summary>
             <param name="property">The base property name.
            
             </param>
             <returns>The proxy.</returns>
        </member>
        <member name="M:Ice.Communicator.proxyToProperty(Ice.ObjectPrx,System.String)">
             <summary>
             Convert a proxy to a set of proxy properties.
             </summary>
             <param name="proxy">The proxy.
            
             </param>
             <param name="property">The base property name.
            
             </param>
             <returns>The property set.</returns>
        </member>
        <member name="M:Ice.Communicator.stringToIdentity(System.String)">
             <summary>
             Convert a string into an identity.
            
             <para>stringToIdentity() is deprecated, use the static stringToIdentity() method instead.</para>
            
             If the string does not parse
             correctly, the operation throws IdentityParseException.
            
             </summary>
             <param name="str">The string to convert into an identity.
            
             </param>
             <returns>The identity.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.identityToString(Ice.Identity)">
             <summary>
             Convert an identity into a string.
             </summary>
             <param name="ident">The identity to convert into a string.
            
             </param>
             <returns>The "stringified" identity.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.createObjectAdapter(System.String)">
             <summary>
             Create a new object adapter.
             The endpoints for the object
             adapter are taken from the property name.Endpoints.
            
             It is legal to create an object adapter with the empty string as
             its name. Such an object adapter is accessible via bidirectional
             connections or by collocated invocations that originate from the
             same communicator as is used by the adapter.
            
             Attempts to create a named object adapter for which no configuration
             can be found raise InitializationException.
            
             </summary>
             <param name="name">The object adapter name.
            
             </param>
             <returns>The new object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.createObjectAdapterWithEndpoints(System.String,System.String)">
             <summary>
             Create a new object adapter with endpoints.
             This operation sets
             the property name.Endpoints, and then calls
             createObjectAdapter. It is provided as a convenience
             function.
            
             Calling this operation with an empty name will result in a
             UUID being generated for the name.
            
             </summary>
             <param name="name">The object adapter name.
            
             </param>
             <param name="endpoints">The endpoints for the object adapter.
            
             </param>
             <returns>The new object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.createObjectAdapterWithRouter(System.String,Ice.RouterPrx)">
             <summary>
             Create a new object adapter with a router.
             This operation
             creates a routed object adapter.
            
             Calling this operation with an empty name will result in a
             UUID being generated for the name.
            
             </summary>
             <param name="name">The object adapter name.
            
             </param>
             <param name="rtr">The router.
            
             </param>
             <returns>The new object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.addObjectFactory(Ice.ObjectFactory,System.String)">
             <summary>
             Add an object factory to this communicator.
            
             <para>addObjectFactory() is deprecated, use ValueFactoryManager::add() instead.</para>
            
             Installing a
             factory with an id for which a factory is already registered
             throws AlreadyRegisteredException.
            
             When unmarshaling an Ice object, the Ice run time reads the
             most-derived type id off the wire and attempts to create an
             instance of the type using a factory. If no instance is created,
             either because no factory was found, or because all factories
             returned nil, the behavior of the Ice run time depends on the
             format with which the object was marshaled:
            
             If the object uses the "sliced" format, Ice ascends the class
             hierarchy until it finds a type that is recognized by a factory,
             or it reaches the least-derived type. If no factory is found that
             can create an instance, the run time throws NoValueFactoryException.
            
             If the object uses the "compact" format, Ice immediately raises
             NoValueFactoryException.
            
             The following order is used to locate a factory for a type:
            
            
            
             The Ice run-time looks for a factory registered
             specifically for the type.
            
             If no instance has been created, the Ice run-time looks
             for the default factory, which is registered with an empty type id.
            
            
             If no instance has been created by any of the preceding
             steps, the Ice run-time looks for a factory that may have been
             statically generated by the language mapping for non-abstract classes.
            
            
            
            
             </summary>
             <param name="factory">The factory to add.
            
             </param>
             <param name="id">The type id for which the factory can create instances, or
             an empty string for the default factory.
            
             </param>
        </member>
        <member name="M:Ice.Communicator.findObjectFactory(System.String)">
             <summary>
             Find an object factory registered with this communicator.
            
             <para>findObjectFactory() is deprecated, use ValueFactoryManager::find() instead.</para>
            
             </summary>
             <param name="id">The type id for which the factory can create instances,
             or an empty string for the default factory.
            
             </param>
             <returns>The object factory, or null if no object factory was
             found for the given id.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.getImplicitContext">
            <summary>
            Get the implicit context associated with this communicator.
            </summary>
            <returns>The implicit context associated with this communicator;
            returns null when the property Ice.ImplicitContext is not set
            or is set to None.</returns>
        </member>
        <member name="M:Ice.Communicator.getProperties">
             <summary>
             Get the properties for this communicator.
             </summary>
             <returns>This communicator's properties.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.getLogger">
             <summary>
             Get the logger for this communicator.
             </summary>
             <returns>This communicator's logger.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.getObserver">
            <summary>
            Get the observer resolver object for this communicator.
            </summary>
            <returns>This communicator's observer resolver object.</returns>
        </member>
        <member name="M:Ice.Communicator.getDefaultRouter">
             <summary>
             Get the default router this communicator.
             </summary>
             <returns>The default router for this communicator.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.setDefaultRouter(Ice.RouterPrx)">
             <summary>
             Set a default router for this communicator.
             All newly
             created proxies will use this default router. To disable the
             default router, null can be used. Note that this
             operation has no effect on existing proxies.
            
             You can also set a router for an individual proxy
             by calling the operation ice_router on the proxy.
            
             </summary>
             <param name="rtr">The default router to use for this communicator.
            
             </param>
        </member>
        <member name="M:Ice.Communicator.getDefaultLocator">
             <summary>
             Get the default locator this communicator.
             </summary>
             <returns>The default locator for this communicator.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.setDefaultLocator(Ice.LocatorPrx)">
             <summary>
             Set a default Ice locator for this communicator.
             All newly
             created proxy and object adapters will use this default
             locator. To disable the default locator, null can be used.
             Note that this operation has no effect on existing proxies or
             object adapters.
            
             You can also set a locator for an individual proxy by calling the
             operation ice_locator on the proxy, or for an object adapter
             by calling ObjectAdapter.setLocator on the object adapter.
            
             </summary>
             <param name="loc">The default locator to use for this communicator.
            
             </param>
        </member>
        <member name="M:Ice.Communicator.getPluginManager">
             <summary>
             Get the plug-in manager for this communicator.
             </summary>
             <returns>This communicator's plug-in manager.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.getValueFactoryManager">
             <summary>
             Get the value factory manager for this communicator.
             </summary>
             <returns>This communicator's value factory manager.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.flushBatchRequests(Ice.CompressBatch)">
             <summary>
             Flush any pending batch requests for this communicator.
             This means all batch requests invoked on fixed proxies
             for all connections associated with the communicator.
             Any errors that occur while flushing a connection are ignored.
            
             </summary>
             <param name="compress">Specifies whether or not the queued batch requests
             should be compressed before being sent over the wire.</param>
        </member>
        <member name="M:Ice.Communicator.createAdmin(Ice.ObjectAdapter,Ice.Identity)">
             <summary>
             Add the Admin object with all its facets to the provided object adapter.
             If Ice.Admin.ServerId is set and the provided object adapter has a Locator,
             createAdmin registers the Admin's Process facet with the Locator's LocatorRegistry.
            
             createAdmin must only be called once; subsequent calls raise InitializationException.
            
             </summary>
             <param name="adminAdapter">The object adapter used to host the Admin object; if null and
             Ice.Admin.Endpoints is set, create, activate and use the Ice.Admin object adapter.
            
             </param>
             <param name="adminId">The identity of the Admin object.
            
             </param>
             <returns>A proxy to the main ("") facet of the Admin object. Never returns a null proxy.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.getAdmin">
             <summary>
             Get a proxy to the main facet of the Admin object.
             getAdmin also creates the Admin object and creates and activates the Ice.Admin object
             adapter to host this Admin object if Ice.Admin.Enpoints is set. The identity of the Admin
             object created by getAdmin is {value of Ice.Admin.InstanceName}/admin, or {UUID}/admin
             when Ice.Admin.InstanceName is not set.
            
             If Ice.Admin.DelayCreation is 0 or not set, getAdmin is called by the communicator
             initialization, after initialization of all plugins.
            
             </summary>
             <returns>A proxy to the main ("") facet of the Admin object, or a null proxy if no
             Admin object is configured.
            
             </returns>
        </member>
        <member name="M:Ice.Communicator.addAdminFacet(Ice.Object,System.String)">
             <summary>
             Add a new facet to the Admin object.
             Adding a servant with a facet that is already registered
             throws AlreadyRegisteredException.
            
             </summary>
             <param name="servant">The servant that implements the new Admin facet.
             </param>
             <param name="facet">The name of the new Admin facet.</param>
        </member>
        <member name="M:Ice.Communicator.removeAdminFacet(System.String)">
             <summary>
             Remove the following facet to the Admin object.
             Removing a facet that was not previously registered throws
             NotRegisteredException.
            
             </summary>
             <param name="facet">The name of the Admin facet.
             </param>
             <returns>The servant associated with this Admin facet.</returns>
        </member>
        <member name="M:Ice.Communicator.findAdminFacet(System.String)">
            <summary>
            Returns a facet of the Admin object.
            </summary>
            <param name="facet">The name of the Admin facet.
            </param>
            <returns>The servant associated with this Admin facet, or
            null if no facet is registered with the given name.</returns>
        </member>
        <member name="M:Ice.Communicator.findAllAdminFacets">
             <summary>
             Returns a map of all facets of the Admin object.
             </summary>
             <returns>A collection containing all the facet names and
             servants of the Admin object.
            
             </returns>
        </member>
        <member name="M:Ice.Connection.close(Ice.ConnectionClose)">
             <summary>
             Manually close the connection using the specified closure mode.
             </summary>
             <param name="mode">Determines how the connection will be closed.
            
             </param>
        </member>
        <member name="M:Ice.Connection.createProxy(Ice.Identity)">
             <summary>
             Create a special proxy that always uses this connection.
             This
             can be used for callbacks from a server to a client if the
             server cannot directly establish a connection to the client,
             for example because of firewalls. In this case, the server
             would create a proxy using an already established connection
             from the client.
            
             </summary>
             <param name="id">The identity for which a proxy is to be created.
            
             </param>
             <returns>A proxy that matches the given identity and uses this
             connection.
            
             </returns>
        </member>
        <member name="M:Ice.Connection.setAdapter(Ice.ObjectAdapter)">
             <summary>
             Explicitly set an object adapter that dispatches requests that
             are received over this connection.
             A client can invoke an
             operation on a server using a proxy, and then set an object
             adapter for the outgoing connection that is used by the proxy
             in order to receive callbacks. This is useful if the server
             cannot establish a connection back to the client, for example
             because of firewalls.
            
             </summary>
             <param name="adapter">The object adapter that should be used by this
             connection to dispatch requests. The object adapter must be
             activated. When the object adapter is deactivated, it is
             automatically removed from the connection. Attempts to use a
             deactivated object adapter raise ObjectAdapterDeactivatedException
            
             </param>
        </member>
        <member name="M:Ice.Connection.getAdapter">
             <summary>
             Get the object adapter that dispatches requests for this
             connection.
             </summary>
             <returns>The object adapter that dispatches requests for the
             connection, or null if no adapter is set.
            
             </returns>
        </member>
        <member name="M:Ice.Connection.getEndpoint">
            <summary>
            Get the endpoint from which the connection was created.
            </summary>
            <returns>The endpoint from which the connection was created.</returns>
        </member>
        <member name="M:Ice.Connection.flushBatchRequests(Ice.CompressBatch)">
             <summary>
             Flush any pending batch requests for this connection.
             This means all batch requests invoked on fixed proxies
             associated with the connection.
            
             </summary>
             <param name="compress">Specifies whether or not the queued batch requests
             should be compressed before being sent over the wire.</param>
        </member>
        <member name="M:Ice.Connection.setCloseCallback(Ice.CloseCallback)">
             <summary>
             Set a close callback on the connection.
             The callback is called by the
             connection when it's closed. The callback is called from the
             Ice thread pool associated with the connection. If the callback needs
             more information about the closure, it can call Connection.throwException.
            
             </summary>
             <param name="callback">The close callback object.</param>
        </member>
        <member name="M:Ice.Connection.setHeartbeatCallback(Ice.HeartbeatCallback)">
             <summary>
             Set a heartbeat callback on the connection.
             The callback is called by the
             connection when a heartbeat is received. The callback is called
             from the Ice thread pool associated with the connection.
            
             </summary>
             <param name="callback">The heartbeat callback object.</param>
        </member>
        <member name="M:Ice.Connection.heartbeat">
            <summary>
            Send a heartbeat message.
            </summary>
        </member>
        <member name="M:Ice.Connection.setACM(Ice.Optional{System.Int32},Ice.Optional{Ice.ACMClose},Ice.Optional{Ice.ACMHeartbeat})">
             <summary>
             Set the active connection management parameters.
             </summary>
             <param name="timeout">The timeout value in seconds, must be &gt;= 0.
            
             </param>
             <param name="close">The close condition
            
             </param>
             <param name="heartbeat">The hertbeat condition</param>
        </member>
        <member name="M:Ice.Connection.getACM">
            <summary>
            Get the ACM parameters.
            </summary>
            <returns>The ACM parameters.</returns>
        </member>
        <member name="M:Ice.Connection.type">
             <summary>
             Return the connection type.
             This corresponds to the endpoint
             type, i.e., "tcp", "udp", etc.
            
             </summary>
             <returns>The type of the connection.</returns>
        </member>
        <member name="M:Ice.Connection.timeout">
            <summary>
            Get the timeout for the connection.
            </summary>
            <returns>The connection's timeout.</returns>
        </member>
        <member name="M:Ice.Connection.ice_toString_">
            <summary>
            Return a description of the connection as human readable text,
            suitable for logging or error messages.
            </summary>
            <returns>The description of the connection as human readable
            text.</returns>
        </member>
        <member name="M:Ice.Connection.getInfo">
            <summary>
            Returns the connection information.
            </summary>
            <returns>The connection information.</returns>
        </member>
        <member name="M:Ice.Connection.setBufferSize(System.Int32,System.Int32)">
            <summary>
            Set the connection buffer receive/send size.
            </summary>
            <param name="rcvSize">The connection receive buffer size.
            </param>
            <param name="sndSize">The connection send buffer size.</param>
        </member>
        <member name="M:Ice.Connection.throwException">
            <summary>
            Throw an exception indicating the reason for connection closure.
            For example,
            CloseConnectionException is raised if the connection was closed gracefully,
            whereas ConnectionManuallyClosedException is raised if the connection was
            manually closed by the application. This operation does nothing if the connection is
            not yet closed.
            </summary>
        </member>
        <member name="M:Ice.EndpointInfo.type">
            <summary>
            Returns the type of the endpoint.
            </summary>
            <returns>The endpoint type.</returns>
        </member>
        <member name="M:Ice.EndpointInfo.datagram">
            <summary>
            Returns true if this endpoint is a datagram endpoint.
            </summary>
            <returns>True for a datagram endpoint.</returns>
        </member>
        <member name="M:Ice.EndpointInfo.secure">
            <summary>
            Returns true if this endpoint is a secure endpoint.
            </summary>
            <returns>True for a secure endpoint.</returns>
        </member>
        <member name="M:Ice.Endpoint.ice_toString_">
            <summary>
            Return a string representation of the endpoint.
            </summary>
            <returns>The string representation of the endpoint.</returns>
        </member>
        <member name="M:Ice.Endpoint.getInfo">
            <summary>
            Returns the endpoint information.
            </summary>
            <returns>The endpoint information class.</returns>
        </member>
        <member name="M:Ice.ImplicitContext.getContext">
            <summary>
            Get a copy of the underlying context.
            </summary>
            <returns>A copy of the underlying context.</returns>
        </member>
        <member name="M:Ice.ImplicitContext.setContext(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Set the underlying context.
            </summary>
            <param name="newContext">The new context.</param>
        </member>
        <member name="M:Ice.ImplicitContext.containsKey(System.String)">
             <summary>
             Check if this key has an associated value in the underlying context.
             </summary>
             <param name="key">The key.
            
             </param>
             <returns>True if the key has an associated value, False otherwise.</returns>
        </member>
        <member name="M:Ice.ImplicitContext.get(System.String)">
             <summary>
             Get the value associated with the given key in the underlying context.
             Returns an empty string if no value is associated with the key.
             containsKey allows you to distinguish between an empty-string value and
             no value at all.
            
             </summary>
             <param name="key">The key.
            
             </param>
             <returns>The value associated with the key.</returns>
        </member>
        <member name="M:Ice.ImplicitContext.put(System.String,System.String)">
             <summary>
             Create or update a key/value entry in the underlying context.
             </summary>
             <param name="key">The key.
            
             </param>
             <param name="value">The value.
            
             </param>
             <returns>The previous value associated with the key, if any.</returns>
        </member>
        <member name="M:Ice.ImplicitContext.remove(System.String)">
             <summary>
             Remove the entry for the given key in the underlying context.
             </summary>
             <param name="key">The key.
            
             </param>
             <returns>The value associated with the key, if any.</returns>
        </member>
        <member name="M:Ice.Instrumentation.Observer.attach">
            <summary>
            This method is called when the instrumented object is created
            or when the observer is attached to an existing object.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.Observer.detach">
            <summary>
            This method is called when the instrumented object is destroyed
            and as a result the observer detached from the object.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.Observer.failed(System.String)">
            <summary>
            Notification of a failure.
            </summary>
            <param name="exceptionName">The name of the exception.</param>
        </member>
        <member name="M:Ice.Instrumentation.ThreadObserver.stateChanged(Ice.Instrumentation.ThreadState,Ice.Instrumentation.ThreadState)">
             <summary>
             Notification of thread state change.
             </summary>
             <param name="oldState">The previous thread state.
            
             </param>
             <param name="newState">The new thread state.</param>
        </member>
        <member name="M:Ice.Instrumentation.ConnectionObserver.sentBytes(System.Int32)">
            <summary>
            Notification of sent bytes over the connection.
            </summary>
            <param name="num">The number of bytes sent.</param>
        </member>
        <member name="M:Ice.Instrumentation.ConnectionObserver.receivedBytes(System.Int32)">
            <summary>
            Notification of received bytes over the connection.
            </summary>
            <param name="num">The number of bytes received.</param>
        </member>
        <member name="M:Ice.Instrumentation.DispatchObserver.userException">
            <summary>
            Notification of a user exception.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.DispatchObserver.reply(System.Int32)">
            <summary>
            Reply notification.
            </summary>
            <param name="size">The size of the reply.</param>
        </member>
        <member name="M:Ice.Instrumentation.ChildInvocationObserver.reply(System.Int32)">
            <summary>
            Reply notification.
            </summary>
            <param name="size">The size of the reply.</param>
        </member>
        <member name="M:Ice.Instrumentation.InvocationObserver.retried">
            <summary>
            Notification of the invocation being retried.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.InvocationObserver.userException">
            <summary>
            Notification of a user exception.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.InvocationObserver.getRemoteObserver(Ice.ConnectionInfo,Ice.Endpoint,System.Int32,System.Int32)">
             <summary>
             Get a remote observer for this invocation.
             </summary>
             <param name="con">The connection information.
            
             </param>
             <param name="endpt">The connection endpoint.
            
             </param>
             <param name="requestId">The ID of the invocation.
            
             </param>
             <param name="size">The size of the invocation.
            
             </param>
             <returns>The observer to instrument the remote invocation.</returns>
        </member>
        <member name="M:Ice.Instrumentation.InvocationObserver.getCollocatedObserver(Ice.ObjectAdapter,System.Int32,System.Int32)">
             <summary>
             Get a collocated observer for this invocation.
             </summary>
             <param name="adapter">The object adapter hosting the collocated Ice object.
            
             </param>
             <param name="requestId">The ID of the invocation.
            
             </param>
             <param name="size">The size of the invocation.
            
             </param>
             <returns>The observer to instrument the collocated invocation.</returns>
        </member>
        <member name="M:Ice.Instrumentation.ObserverUpdater.updateConnectionObservers">
            <summary>
            Update connection observers associated with each of the Ice
            connection from the communicator and its object adapters.
            When called, this method goes through all the connections and
            for each connection CommunicatorObserver.getConnectionObserver
            is called. The implementation of getConnectionObserver has the
            possibility to return an updated observer if necessary.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.ObserverUpdater.updateThreadObservers">
            <summary>
            Update thread observers associated with each of the Ice thread
            from the communicator and its object adapters.
            When called, this method goes through all the threads and for
            each thread CommunicatorObserver.getThreadObserver is
            called. The implementation of getThreadObserver has the
            possibility to return an updated observer if necessary.
            </summary>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.getConnectionEstablishmentObserver(Ice.Endpoint,System.String)">
             <summary>
             This method should return an observer for the given endpoint
             information and connector.
             The Ice run-time calls this method
             for each connection establishment attempt.
            
             </summary>
             <param name="endpt">The endpoint.
            
             </param>
             <param name="connector">The description of the connector. For IP
             transports, this is typically the IP address to connect to.
            
             </param>
             <returns>The observer to instrument the connection establishment.</returns>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.getEndpointLookupObserver(Ice.Endpoint)">
             <summary>
             This method should return an observer for the given endpoint
             information.
             The Ice run-time calls this method to resolve an
             endpoint and obtain the list of connectors.
            
             For IP endpoints, this typically involves doing a DNS lookup to
             obtain the IP addresses associated with the DNS name.
            
             </summary>
             <param name="endpt">The endpoint.
            
             </param>
             <returns>The observer to instrument the endpoint lookup.</returns>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.getConnectionObserver(Ice.ConnectionInfo,Ice.Endpoint,Ice.Instrumentation.ConnectionState,Ice.Instrumentation.ConnectionObserver)">
             <summary>
             This method should return a connection observer for the given
             connection.
             The Ice run-time calls this method for each new
             connection and for all the Ice communicator connections when
             ObserverUpdater.updateConnectionObservers is called.
            
             </summary>
             <param name="c">The connection information.
            
             </param>
             <param name="e">The connection endpoint.
            
             </param>
             <param name="s">The state of the connection.
            
             </param>
             <param name="o">The old connection observer if one is already set or a
             null reference otherwise.
            
             </param>
             <returns>The connection observer to instrument the connection.</returns>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.getThreadObserver(System.String,System.String,Ice.Instrumentation.ThreadState,Ice.Instrumentation.ThreadObserver)">
             <summary>
             This method should return a thread observer for the given
             thread.
             The Ice run-time calls this method for each new thread
             and for all the Ice communicator threads when
             ObserverUpdater.updateThreadObservers is called.
            
             </summary>
             <param name="parent">The parent of the thread.
            
             </param>
             <param name="id">The ID of the thread to observe.
            
             </param>
             <param name="s">The state of the thread.
            
             </param>
             <param name="o">The old thread observer if one is already set or a
             null reference otherwise.
            
             </param>
             <returns>The thread observer to instrument the thread.</returns>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.getInvocationObserver(Ice.ObjectPrx,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             This method should return an invocation observer for the given
             invocation.
             The Ice run-time calls this method for each new
             invocation on a proxy.
            
             </summary>
             <param name="prx">The proxy used for the invocation.
            
             </param>
             <param name="operation">The name of the invocation.
            
             </param>
             <param name="ctx">The context specified by the user.
            
             </param>
             <returns>The invocation observer to instrument the invocation.</returns>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.getDispatchObserver(Ice.Current,System.Int32)">
             <summary>
             This method should return a dispatch observer for the given
             dispatch.
             The Ice run-time calls this method each time it
             receives an incoming invocation to be dispatched for an Ice
             object.
            
             </summary>
             <param name="c">The current object as provided to the Ice servant
             dispatching the invocation.
            
             </param>
             <param name="size">The size of the dispatch.
            
             </param>
             <returns>The dispatch observer to instrument the dispatch.</returns>
        </member>
        <member name="M:Ice.Instrumentation.CommunicatorObserver.setObserverUpdater(Ice.Instrumentation.ObserverUpdater)">
             <summary>
             The Ice run-time calls this method when the communicator is
             initialized.
             The add-in implementing this interface can use
             this object to get the Ice run-time to re-obtain observers for
             observed objects.
            
             </summary>
             <param name="updater">The observer updater object.</param>
        </member>
        <member name="T:Ice.InitializationException">
            <summary>
            This exception is raised when a failure occurs during initialization.
            </summary>
        </member>
        <member name="T:Ice.PluginInitializationException">
            <summary>
            This exception indicates that a failure occurred while initializing
            a plug-in.
            </summary>
        </member>
        <member name="T:Ice.CollocationOptimizationException">
             <summary>
             This exception is raised if a feature is requested that is not
             supported with collocation optimization.
            
             <para>This exception is no longer used by the Ice run time</para>
            
             </summary>
        </member>
        <member name="T:Ice.AlreadyRegisteredException">
            <summary>
            An attempt was made to register something more than once with
            the Ice run time.
            This exception is raised if an attempt is made to register a
            servant, servant locator, facet, value factory, plug-in, object
            adapter, object, or user exception factory more than once for the
            same ID.
            </summary>
        </member>
        <member name="T:Ice.NotRegisteredException">
             <summary>
             An attempt was made to find or deregister something that is not
             registered with the Ice run time or Ice locator.
             This exception is raised if an attempt is made to remove a servant,
             servant locator, facet, value factory, plug-in, object adapter,
             object, or user exception factory that is not currently registered.
            
             It's also raised if the Ice locator can't find an object or object
             adapter when resolving an indirect proxy or when an object adapter
             is activated.
             </summary>
        </member>
        <member name="T:Ice.TwowayOnlyException">
            <summary>
            The operation can only be invoked with a twoway request.
            This exception is raised if an attempt is made to invoke an
            operation with ice_oneway, ice_batchOneway, ice_datagram,
            or ice_batchDatagram and the operation has a return value,
            out-parameters, or an exception specification.
            </summary>
        </member>
        <member name="T:Ice.CloneNotImplementedException">
            <summary>
            An attempt was made to clone a class that does not support
            cloning.
            This exception is raised if ice_clone is called on
            a class that is derived from an abstract Slice class (that is,
            a class containing operations), and the derived class does not
            provide an implementation of the ice_clone operation (C++ only).
            </summary>
        </member>
        <member name="T:Ice.UnknownException">
            <summary>
            This exception is raised if an operation call on a server raises an
            unknown exception.
            For example, for C++, this exception is raised
            if the server throws a C++ exception that is not directly or
            indirectly derived from Ice::LocalException or
            Ice::UserException.
            </summary>
        </member>
        <member name="T:Ice.UnknownLocalException">
            <summary>
            This exception is raised if an operation call on a server raises a
            local exception.
            Because local exceptions are not transmitted by
            the Ice protocol, the client receives all local exceptions raised
            by the server as UnknownLocalException. The only exception to this
            rule are all exceptions derived from RequestFailedException,
            which are transmitted by the Ice protocol even though they are
            declared local.
            </summary>
        </member>
        <member name="T:Ice.UnknownUserException">
            <summary>
            An operation raised an incorrect user exception.
            This exception is raised if an operation raises a
            user exception that is not declared in the exception's
            throws clause. Such undeclared exceptions are
            not transmitted from the server to the client by the Ice
            protocol, but instead the client just gets an
            UnknownUserException. This is necessary in order to not violate
            the contract established by an operation's signature: Only local
            exceptions and user exceptions declared in the
            throws clause can be raised.
            </summary>
        </member>
        <member name="T:Ice.VersionMismatchException">
            <summary>
            This exception is raised if the Ice library version does not match
            the version in the Ice header files.
            </summary>
        </member>
        <member name="T:Ice.CommunicatorDestroyedException">
            <summary>
            This exception is raised if the Communicator has been destroyed.
            </summary>
        </member>
        <member name="T:Ice.ObjectAdapterDeactivatedException">
            <summary>
            This exception is raised if an attempt is made to use a deactivated
            ObjectAdapter.
            </summary>
        </member>
        <member name="T:Ice.ObjectAdapterIdInUseException">
            <summary>
            This exception is raised if an ObjectAdapter cannot be activated.
            This happens if the Locator detects another active ObjectAdapter with
            the same adapter id.
            </summary>
        </member>
        <member name="T:Ice.NoEndpointException">
            <summary>
            This exception is raised if no suitable endpoint is available.
            </summary>
        </member>
        <member name="T:Ice.EndpointParseException">
            <summary>
            This exception is raised if there was an error while parsing an
            endpoint.
            </summary>
        </member>
        <member name="T:Ice.EndpointSelectionTypeParseException">
            <summary>
            This exception is raised if there was an error while parsing an
            endpoint selection type.
            </summary>
        </member>
        <member name="T:Ice.VersionParseException">
            <summary>
            This exception is raised if there was an error while parsing a
            version.
            </summary>
        </member>
        <member name="T:Ice.IdentityParseException">
            <summary>
            This exception is raised if there was an error while parsing a
            stringified identity.
            </summary>
        </member>
        <member name="T:Ice.ProxyParseException">
            <summary>
            This exception is raised if there was an error while parsing a
            stringified proxy.
            </summary>
        </member>
        <member name="T:Ice.IllegalIdentityException">
            <summary>
            This exception is raised if an illegal identity is encountered.
            </summary>
        </member>
        <member name="T:Ice.IllegalServantException">
            <summary>
            This exception is raised to reject an illegal servant (typically
            a null servant)
            </summary>
        </member>
        <member name="T:Ice.RequestFailedException">
            <summary>
            This exception is raised if a request failed.
            This exception, and
            all exceptions derived from RequestFailedException, are
            transmitted by the Ice protocol, even though they are declared
            local.
            </summary>
        </member>
        <member name="T:Ice.ObjectNotExistException">
            <summary>
            This exception is raised if an object does not exist on the server,
            that is, if no facets with the given identity exist.
            </summary>
        </member>
        <member name="T:Ice.FacetNotExistException">
            <summary>
            This exception is raised if no facet with the given name exists,
            but at least one facet with the given identity exists.
            </summary>
        </member>
        <member name="T:Ice.OperationNotExistException">
            <summary>
            This exception is raised if an operation for a given object does
            not exist on the server.
            Typically this is caused by either the
            client or the server using an outdated Slice specification.
            </summary>
        </member>
        <member name="T:Ice.SyscallException">
            <summary>
            This exception is raised if a system error occurred in the server
            or client process.
            There are many possible causes for such a system
            exception. For details on the cause, SyscallException.error
            should be inspected.
            </summary>
        </member>
        <member name="T:Ice.SocketException">
            <summary>
            This exception indicates socket errors.
            </summary>
        </member>
        <member name="T:Ice.CFNetworkException">
            <summary>
            This exception indicates CFNetwork errors.
            </summary>
        </member>
        <member name="T:Ice.FileException">
            <summary>
            This exception indicates file errors.
            </summary>
        </member>
        <member name="T:Ice.ConnectFailedException">
            <summary>
            This exception indicates connection failures.
            </summary>
        </member>
        <member name="T:Ice.ConnectionRefusedException">
            <summary>
            This exception indicates a connection failure for which
            the server host actively refuses a connection.
            </summary>
        </member>
        <member name="T:Ice.ConnectionLostException">
            <summary>
            This exception indicates a lost connection.
            </summary>
        </member>
        <member name="T:Ice.DNSException">
            <summary>
            This exception indicates a DNS problem.
            For details on the cause,
            DNSException.error should be inspected.
            </summary>
        </member>
        <member name="T:Ice.OperationInterruptedException">
            <summary>
            This exception indicates a request was interrupted.
            </summary>
        </member>
        <member name="T:Ice.TimeoutException">
            <summary>
            This exception indicates a timeout condition.
            </summary>
        </member>
        <member name="T:Ice.ConnectTimeoutException">
            <summary>
            This exception indicates a connection establishment timeout condition.
            </summary>
        </member>
        <member name="T:Ice.CloseTimeoutException">
            <summary>
            This exception indicates a connection closure timeout condition.
            </summary>
        </member>
        <member name="T:Ice.ConnectionTimeoutException">
            <summary>
            This exception indicates that a connection has been shut down because it has been
            idle for some time.
            </summary>
        </member>
        <member name="T:Ice.InvocationTimeoutException">
            <summary>
            This exception indicates that an invocation failed because it timed
            out.
            </summary>
        </member>
        <member name="T:Ice.InvocationCanceledException">
            <summary>
            This exception indicates that an asynchronous invocation failed
            because it was canceled explicitly by the user.
            </summary>
        </member>
        <member name="T:Ice.ProtocolException">
            <summary>
            A generic exception base for all kinds of protocol error
            conditions.
            </summary>
        </member>
        <member name="T:Ice.BadMagicException">
            <summary>
            This exception indicates that a message did not start with the expected
            magic number ('I', 'c', 'e', 'P').
            </summary>
        </member>
        <member name="T:Ice.UnsupportedProtocolException">
            <summary>
            This exception indicates an unsupported protocol version.
            </summary>
        </member>
        <member name="T:Ice.UnsupportedEncodingException">
            <summary>
            This exception indicates an unsupported data encoding version.
            </summary>
        </member>
        <member name="T:Ice.UnknownMessageException">
            <summary>
            This exception indicates that an unknown protocol message has been received.
            </summary>
        </member>
        <member name="T:Ice.ConnectionNotValidatedException">
            <summary>
            This exception is raised if a message is received over a connection
            that is not yet validated.
            </summary>
        </member>
        <member name="T:Ice.UnknownRequestIdException">
            <summary>
            This exception indicates that a response for an unknown request ID has been
            received.
            </summary>
        </member>
        <member name="T:Ice.UnknownReplyStatusException">
            <summary>
            This exception indicates that an unknown reply status has been received.
            </summary>
        </member>
        <member name="T:Ice.CloseConnectionException">
            <summary>
            This exception indicates that the connection has been gracefully shut down by the
            server.
            The operation call that caused this exception has not been
            executed by the server. In most cases you will not get this
            exception, because the client will automatically retry the
            operation call in case the server shut down the connection. However,
            if upon retry the server shuts down the connection again, and the
            retry limit has been reached, then this exception is propagated to
            the application code.
            </summary>
        </member>
        <member name="T:Ice.ConnectionManuallyClosedException">
            <summary>
            This exception is raised by an operation call if the application
            closes the connection locally using Connection.close.
            </summary>
        </member>
        <member name="T:Ice.IllegalMessageSizeException">
            <summary>
            This exception indicates that a message size is less
            than the minimum required size.
            </summary>
        </member>
        <member name="T:Ice.CompressionException">
            <summary>
            This exception indicates a problem with compressing or uncompressing data.
            </summary>
        </member>
        <member name="T:Ice.DatagramLimitException">
            <summary>
            A datagram exceeds the configured size.
            This exception is raised if a datagram exceeds the configured send or receive buffer
            size, or exceeds the maximum payload size of a UDP packet (65507 bytes).
            </summary>
        </member>
        <member name="T:Ice.MarshalException">
            <summary>
            This exception is raised for errors during marshaling or unmarshaling data.
            </summary>
        </member>
        <member name="T:Ice.ProxyUnmarshalException">
            <summary>
            This exception is raised if inconsistent data is received while unmarshaling a proxy.
            </summary>
        </member>
        <member name="T:Ice.UnmarshalOutOfBoundsException">
            <summary>
            This exception is raised if an out-of-bounds condition occurs during unmarshaling.
            </summary>
        </member>
        <member name="T:Ice.NoValueFactoryException">
            <summary>
            This exception is raised if no suitable value factory was found during
            unmarshaling of a Slice class instance.
            </summary>
        </member>
        <member name="T:Ice.UnexpectedObjectException">
            <summary>
            This exception is raised if the type of an unmarshaled Slice class instance does
            not match its expected type.
            This can happen if client and server are compiled with mismatched Slice
            definitions or if a class of the wrong type is passed as a parameter
            or return value using dynamic invocation. This exception can also be
            raised if IceStorm is used to send Slice class instances and
            an operation is subscribed to the wrong topic.
            </summary>
        </member>
        <member name="T:Ice.MemoryLimitException">
            <summary>
            This exception is raised when Ice receives a request or reply
            message whose size exceeds the limit specified by the
            Ice.MessageSizeMax property.
            </summary>
        </member>
        <member name="T:Ice.StringConversionException">
            <summary>
            This exception is raised when a string conversion to or from UTF-8
            fails during marshaling or unmarshaling.
            </summary>
        </member>
        <member name="T:Ice.EncapsulationException">
            <summary>
            This exception indicates a malformed data encapsulation.
            </summary>
        </member>
        <member name="T:Ice.FeatureNotSupportedException">
            <summary>
            This exception is raised if an unsupported feature is used.
            The
            unsupported feature string contains the name of the unsupported
            feature
            </summary>
        </member>
        <member name="T:Ice.SecurityException">
            <summary>
            This exception indicates a failure in a security subsystem,
            such as the IceSSL plug-in.
            </summary>
        </member>
        <member name="T:Ice.FixedProxyException">
            <summary>
            This exception indicates that an attempt has been made to
            change the connection properties of a fixed proxy.
            </summary>
        </member>
        <member name="T:Ice.ResponseSentException">
            <summary>
            Indicates that the response to a request has already been sent;
            re-dispatching such a request is not possible.
            </summary>
        </member>
        <member name="T:Ice.AdapterNotFoundException">
            <summary>
            This exception is raised if an adapter cannot be found.
            </summary>
        </member>
        <member name="T:Ice.InvalidReplicaGroupIdException">
            <summary>
            This exception is raised if the replica group provided by the
            server is invalid.
            </summary>
        </member>
        <member name="T:Ice.AdapterAlreadyActiveException">
            <summary>
            This exception is raised if a server tries to set endpoints for
            an adapter that is already active.
            </summary>
        </member>
        <member name="T:Ice.ObjectNotFoundException">
            <summary>
            This exception is raised if an object cannot be found.
            </summary>
        </member>
        <member name="T:Ice.ServerNotFoundException">
            <summary>
            This exception is raised if a server cannot be found.
            </summary>
        </member>
        <member name="T:Ice.LocatorPrx">
             <summary>
             The Ice locator interface.
             This interface is used by clients to
             lookup adapters and objects. It is also used by servers to get the
             locator registry proxy.
            
             The Locator interface is intended to be used by
             Ice internals and by locator implementations. Regular user code
             should not attempt to use any functionality of this interface
             directly.
             </summary>
        </member>
        <member name="M:Ice.LocatorPrx.findObjectById(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="id">The identity.
            
             </param>
             <returns>The proxy, or null if the object is not active.
            
             </returns>
             <exception name="ObjectNotFoundException">Raised if the object cannot
             be found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorPrx.findObjectByIdAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_findObjectById(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_findObjectById(Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_findObjectById(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.end_findObjectById(Ice.AsyncResult)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The proxy, or null if the object is not active.
            
             </returns>
        </member>
        <member name="M:Ice.LocatorPrx.findAdapterById(System.String,Ice.OptionalContext)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <returns>The adapter proxy, or null if the adapter is not active.
            
             </returns>
             <exception name="AdapterNotFoundException">Raised if the adapter cannot be
             found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorPrx.findAdapterByIdAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_findAdapterById(System.String,Ice.OptionalContext)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_findAdapterById(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_findAdapterById(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.end_findAdapterById(Ice.AsyncResult)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The adapter proxy, or null if the adapter is not active.
            
             </returns>
        </member>
        <member name="M:Ice.LocatorPrx.getRegistry(Ice.OptionalContext)">
            <summary>
            Get the locator registry.
            </summary>
            <returns>The locator registry.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorPrx.getRegistryAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the locator registry.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_getRegistry(Ice.OptionalContext)">
            <summary>
            Get the locator registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_getRegistry(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the locator registry.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.begin_getRegistry(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the locator registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorPrx.end_getRegistry(Ice.AsyncResult)">
            <summary>
            Get the locator registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The locator registry.</returns>
        </member>
        <member name="T:Ice.LocatorRegistryPrx">
             <summary>
             The Ice locator registry interface.
             This interface is used by
             servers to register adapter endpoints with the locator.
            
              The LocatorRegistry interface is intended to be used
             by Ice internals and by locator implementations. Regular user
             code should not attempt to use any functionality of this interface
             directly.
             </summary>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.setAdapterDirectProxy(System.String,Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="proxy">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <exception name="AdapterNotFoundException">Raised if the adapter cannot
             be found, or if the locator only allows
             registered adapters to set their active proxy and the
             adapter is not registered with the locator.
            
             </exception>
             <exception name="AdapterAlreadyActiveException">Raised if an adapter with the same
             id is already active.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.setAdapterDirectProxyAsync(System.String,Ice.ObjectPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="proxy">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setAdapterDirectProxy(System.String,Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="proxy">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setAdapterDirectProxy(System.String,Ice.ObjectPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="proxy">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setAdapterDirectProxy(System.String,Ice.ObjectPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="proxy">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.end_setAdapterDirectProxy(Ice.AsyncResult)">
            <summary>
            Set the adapter endpoints with the locator registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.setReplicatedAdapterDirectProxy(System.String,System.String,Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="adapterId">The adapter id.
            
             </param>
             <param name="replicaGroupId">The replica group id.
            
             </param>
             <param name="p">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <exception name="AdapterNotFoundException">Raised if the adapter cannot
             be found, or if the locator only allows registered adapters to
             set their active proxy and the adapter is not registered with
             the locator.
            
             </exception>
             <exception name="AdapterAlreadyActiveException">Raised if an adapter with the same
             id is already active.
            
             </exception>
             <exception name="InvalidReplicaGroupIdException">Raised if the given
             replica group doesn't match the one registered with the
             locator registry for this object adapter.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.setReplicatedAdapterDirectProxyAsync(System.String,System.String,Ice.ObjectPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="adapterId">The adapter id.
            
             </param>
             <param name="replicaGroupId">The replica group id.
            
             </param>
             <param name="p">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setReplicatedAdapterDirectProxy(System.String,System.String,Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="adapterId">The adapter id.
            
             </param>
             <param name="replicaGroupId">The replica group id.
            
             </param>
             <param name="p">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setReplicatedAdapterDirectProxy(System.String,System.String,Ice.ObjectPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="adapterId">The adapter id.
            
             </param>
             <param name="replicaGroupId">The replica group id.
            
             </param>
             <param name="p">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setReplicatedAdapterDirectProxy(System.String,System.String,Ice.ObjectPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="adapterId">The adapter id.
            
             </param>
             <param name="replicaGroupId">The replica group id.
            
             </param>
             <param name="p">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.end_setReplicatedAdapterDirectProxy(Ice.AsyncResult)">
            <summary>
            Set the adapter endpoints with the locator registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.setServerProcessProxy(System.String,Ice.ProcessPrx,Ice.OptionalContext)">
             <summary>
             Set the process proxy for a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="proxy">The process proxy.
            
             </param>
             <exception name="ServerNotFoundException">Raised if the server cannot
             be found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.setServerProcessProxyAsync(System.String,Ice.ProcessPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Set the process proxy for a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="proxy">The process proxy.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setServerProcessProxy(System.String,Ice.ProcessPrx,Ice.OptionalContext)">
             <summary>
             Set the process proxy for a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="proxy">The process proxy.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setServerProcessProxy(System.String,Ice.ProcessPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the process proxy for a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="proxy">The process proxy.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.begin_setServerProcessProxy(System.String,Ice.ProcessPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the process proxy for a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="proxy">The process proxy.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryPrx.end_setServerProcessProxy(Ice.AsyncResult)">
            <summary>
            Set the process proxy for a server.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:Ice.LocatorFinderPrx">
            <summary>
            This inferface should be implemented by services implementing the
            Ice::Locator interface.
            It should be advertised through an Ice
            object with the identity `Ice/LocatorFinder'. This allows clients
            to retrieve the locator proxy with just the endpoint information of
            the service.
            </summary>
        </member>
        <member name="M:Ice.LocatorFinderPrx.getLocator(Ice.OptionalContext)">
             <summary>
             Get the locator proxy implemented by the process hosting this
             finder object.
             The proxy might point to several replicas.
            
             </summary>
             <returns>The locator proxy.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LocatorFinderPrx.getLocatorAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the locator proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorFinderPrx.begin_getLocator(Ice.OptionalContext)">
            <summary>
            Get the locator proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorFinderPrx.begin_getLocator(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the locator proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorFinderPrx.begin_getLocator(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the locator proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LocatorFinderPrx.end_getLocator(Ice.AsyncResult)">
            <summary>
            Get the locator proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The locator proxy.</returns>
        </member>
        <member name="T:Ice.LocatorOperations_">
             <summary>
             The Ice locator interface.
             This interface is used by clients to
             lookup adapters and objects. It is also used by servers to get the
             locator registry proxy.
            
             The Locator interface is intended to be used by
             Ice internals and by locator implementations. Regular user code
             should not attempt to use any functionality of this interface
             directly.
             </summary>
        </member>
        <member name="M:Ice.LocatorOperations_.findObjectByIdAsync(Ice.Identity,Ice.Current)">
             <summary>
             Find an object by identity and return a proxy that contains
             the adapter ID or endpoints which can be used to access the
             object.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorOperations_.findAdapterByIdAsync(System.String,Ice.Current)">
             <summary>
             Find an adapter by id and return a proxy that contains
             its endpoints.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorOperations_.getRegistry(Ice.Current)">
            <summary>
            Get the locator registry.
            </summary>
            <returns>The locator registry.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:Ice.LocatorRegistryOperations_">
             <summary>
             The Ice locator registry interface.
             This interface is used by
             servers to register adapter endpoints with the locator.
            
              The LocatorRegistry interface is intended to be used
             by Ice internals and by locator implementations. Regular user
             code should not attempt to use any functionality of this interface
             directly.
             </summary>
        </member>
        <member name="M:Ice.LocatorRegistryOperations_.setAdapterDirectProxyAsync(System.String,Ice.ObjectPrx,Ice.Current)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="proxy">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryOperations_.setReplicatedAdapterDirectProxyAsync(System.String,System.String,Ice.ObjectPrx,Ice.Current)">
             <summary>
             Set the adapter endpoints with the locator registry.
             </summary>
             <param name="adapterId">The adapter id.
            
             </param>
             <param name="replicaGroupId">The replica group id.
            
             </param>
             <param name="p">The adapter proxy (a dummy direct proxy created
             by the adapter). The direct proxy contains the adapter
             endpoints.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LocatorRegistryOperations_.setServerProcessProxyAsync(System.String,Ice.ProcessPrx,Ice.Current)">
             <summary>
             Set the process proxy for a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="proxy">The process proxy.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="T:Ice.LocatorFinderOperations_">
            <summary>
            This inferface should be implemented by services implementing the
            Ice::Locator interface.
            It should be advertised through an Ice
            object with the identity `Ice/LocatorFinder'. This allows clients
            to retrieve the locator proxy with just the endpoint information of
            the service.
            </summary>
        </member>
        <member name="M:Ice.LocatorFinderOperations_.getLocator(Ice.Current)">
             <summary>
             Get the locator proxy implemented by the process hosting this
             finder object.
             The proxy might point to several replicas.
            
             </summary>
             <returns>The locator proxy.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.Logger.print(System.String)">
             <summary>
             Print a message.
             The message is printed literally, without
             any decorations such as executable name or time stamp.
            
             </summary>
             <param name="message">The message to log.</param>
        </member>
        <member name="M:Ice.Logger.trace(System.String,System.String)">
             <summary>
             Log a trace message.
             </summary>
             <param name="category">The trace category.
            
             </param>
             <param name="message">The trace message to log.</param>
        </member>
        <member name="M:Ice.Logger.warning(System.String)">
             <summary>
             Log a warning message.
             </summary>
             <param name="message">The warning message to log.
            
             </param>
        </member>
        <member name="M:Ice.Logger.error(System.String)">
             <summary>
             Log an error message.
             </summary>
             <param name="message">The error message to log.
            
             </param>
        </member>
        <member name="M:Ice.Logger.getPrefix">
            <summary>
            Returns this logger's prefix.
            </summary>
            <returns>The prefix.</returns>
        </member>
        <member name="M:Ice.Logger.cloneWithPrefix(System.String)">
            <summary>
            Returns a clone of the logger with a new prefix.
            </summary>
            <param name="prefix">The new prefix for the logger.
            </param>
            <returns>A logger instance.</returns>
        </member>
        <member name="M:Ice.ObjectAdapter.getName">
            <summary>
            Get the name of this object adapter.
            </summary>
            <returns>This object adapter's name.</returns>
        </member>
        <member name="M:Ice.ObjectAdapter.getCommunicator">
             <summary>
             Get the communicator this object adapter belongs to.
             </summary>
             <returns>This object adapter's communicator.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.activate">
             <summary>
             Activate all endpoints that belong to this object adapter.
             After activation, the object adapter can dispatch requests
             received through its endpoints.
            
             </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.hold">
             <summary>
             Temporarily hold receiving and dispatching requests.
             The object
             adapter can be reactivated with the activate operation.
            
              Holding is not immediate, i.e., after hold
             returns, the object adapter might still be active for some
             time. You can use waitForHold to wait until holding is
             complete.
            
             </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.waitForHold">
             <summary>
             Wait until the object adapter holds requests.
             Calling hold
             initiates holding of requests, and waitForHold only returns
             when holding of requests has been completed.
            
             </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.deactivate">
             <summary>
             Deactivate all endpoints that belong to this object adapter.
             After deactivation, the object adapter stops receiving
             requests through its endpoints. Object adapters that have been
             deactivated must not be reactivated again, and cannot be used
             otherwise. Attempts to use a deactivated object adapter raise
             ObjectAdapterDeactivatedException however, attempts to
             deactivate an already deactivated object adapter are
             ignored and do nothing. Once deactivated, it is possible to
             destroy the adapter to clean up resources and then create and
             activate a new adapter with the same name.
            
              After deactivate returns, no new requests
             are processed by the object adapter. However, requests that
             have been started before deactivate was called might
             still be active. You can use waitForDeactivate to wait
             for the completion of all requests for this object adapter.
            
             </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.waitForDeactivate">
             <summary>
             Wait until the object adapter has deactivated.
             Calling
             deactivate initiates object adapter deactivation, and
             waitForDeactivate only returns when deactivation has
             been completed.
            
             </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.isDeactivated">
             <summary>
             Check whether object adapter has been deactivated.
             </summary>
             <returns>Whether adapter has been deactivated.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.destroy">
             <summary>
             Destroys the object adapter and cleans up all resources held by
             the object adapter.
             If the object adapter has not yet been
             deactivated, destroy implicitly initiates the deactivation
             and waits for it to finish. Subsequent calls to destroy are
             ignored. Once destroy has returned, it is possible to create
             another object adapter with the same name.
            
             </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.add(Ice.Object,Ice.Identity)">
             <summary>
             Add a servant to this object adapter's Active Servant Map.
             Note
             that one servant can implement several Ice objects by registering
             the servant with multiple identities. Adding a servant with an
             identity that is in the map already throws AlreadyRegisteredException.
            
             </summary>
             <param name="servant">The servant to add.
            
             </param>
             <param name="id">The identity of the Ice object that is implemented by
             the servant.
            
             </param>
             <returns>A proxy that matches the given identity and this object
             adapter.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.addFacet(Ice.Object,Ice.Identity,System.String)">
             <summary>
             Like add, but with a facet.
             Calling add(servant, id)
             is equivalent to calling addFacet with an empty facet.
            
             </summary>
             <param name="servant">The servant to add.
            
             </param>
             <param name="id">The identity of the Ice object that is implemented by
             the servant.
            
             </param>
             <param name="facet">The facet. An empty facet means the default facet.
            
             </param>
             <returns>A proxy that matches the given identity, facet, and
             this object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.addWithUUID(Ice.Object)">
             <summary>
             Add a servant to this object adapter's Active Servant Map,
             using an automatically generated UUID as its identity.
             Note that
             the generated UUID identity can be accessed using the proxy's
             ice_getIdentity operation.
            
             </summary>
             <param name="servant">The servant to add.
            
             </param>
             <returns>A proxy that matches the generated UUID identity and
             this object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.addFacetWithUUID(Ice.Object,System.String)">
             <summary>
             Like addWithUUID, but with a facet.
             Calling
             addWithUUID(servant) is equivalent to calling
             addFacetWithUUID with an empty facet.
            
             </summary>
             <param name="servant">The servant to add.
            
             </param>
             <param name="facet">The facet. An empty facet means the default
             facet.
            
             </param>
             <returns>A proxy that matches the generated UUID identity,
             facet, and this object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.addDefaultServant(Ice.Object,System.String)">
             <summary>
             Add a default servant to handle requests for a specific
             category.
             Adding a default servant for a category for
             which a default servant is already registered throws
             AlreadyRegisteredException. To dispatch operation
             calls on servants, the object adapter tries to find a servant
             for a given Ice object identity and facet in the following
             order:
            
            
            
             The object adapter tries to find a servant for the identity
             and facet in the Active Servant Map.
            
             If no servant has been found in the Active Servant Map, the
             object adapter tries to find a default servant for the category
             component of the identity.
            
             If no servant has been found by any of the preceding steps,
             the object adapter tries to find a default servant for an empty
             category, regardless of the category contained in the identity.
            
             If no servant has been found by any of the preceding steps,
             the object adapter gives up and the caller receives
             ObjectNotExistException or FacetNotExistException.
            
            
            
             </summary>
             <param name="servant">The default servant.
            
             </param>
             <param name="category">The category for which the default servant is
             registered. An empty category means it will handle all categories.
            
             </param>
        </member>
        <member name="M:Ice.ObjectAdapter.remove(Ice.Identity)">
             <summary>
             Remove a servant (that is, the default facet) from the object
             adapter's Active Servant Map.
             </summary>
             <param name="id">The identity of the Ice object that is implemented by
             the servant. If the servant implements multiple Ice objects,
             remove has to be called for all those Ice objects.
             Removing an identity that is not in the map throws
             NotRegisteredException.
            
             </param>
             <returns>The removed servant.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.removeFacet(Ice.Identity,System.String)">
             <summary>
             Like remove, but with a facet.
             Calling remove(id)
             is equivalent to calling removeFacet with an empty facet.
            
             </summary>
             <param name="id">The identity of the Ice object that is implemented by
             the servant.
            
             </param>
             <param name="facet">The facet. An empty facet means the default facet.
            
             </param>
             <returns>The removed servant.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.removeAllFacets(Ice.Identity)">
             <summary>
             Remove all facets with the given identity from the Active
             Servant Map.
             The operation completely removes the Ice object,
             including its default facet. Removing an identity that
             is not in the map throws NotRegisteredException.
            
             </summary>
             <param name="id">The identity of the Ice object to be removed.
            
             </param>
             <returns>A collection containing all the facet names and
             servants of the removed Ice object.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.removeDefaultServant(System.String)">
             <summary>
             Remove the default servant for a specific category.
             Attempting
             to remove a default servant for a category that is not
             registered throws NotRegisteredException.
            
             </summary>
             <param name="category">The category of the default servant to remove.
            
             </param>
             <returns>The default servant.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.find(Ice.Identity)">
             <summary>
             Look up a servant in this object adapter's Active Servant Map
             by the identity of the Ice object it implements.
             This operation only tries to look up a servant in
             the Active Servant Map. It does not attempt to find a servant
             by using any installed ServantLocator.
            
             </summary>
             <param name="id">The identity of the Ice object for which the servant
             should be returned.
            
             </param>
             <returns>The servant that implements the Ice object with the
             given identity, or null if no such servant has been found.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.findFacet(Ice.Identity,System.String)">
             <summary>
             Like find, but with a facet.
             Calling find(id)
             is equivalent to calling findFacet with an empty
             facet.
            
             </summary>
             <param name="id">The identity of the Ice object for which the
             servant should be returned.
            
             </param>
             <param name="facet">The facet. An empty facet means the default
             facet.
            
             </param>
             <returns>The servant that implements the Ice object with the
             given identity and facet, or null if no such servant has been
             found.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.findAllFacets(Ice.Identity)">
             <summary>
             Find all facets with the given identity in the Active Servant
             Map.
             </summary>
             <param name="id">The identity of the Ice object for which the facets
             should be returned.
            
             </param>
             <returns>A collection containing all the facet names and
             servants that have been found, or an empty map if there is no
             facet for the given identity.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.findByProxy(Ice.ObjectPrx)">
             <summary>
             Look up a servant in this object adapter's Active Servant Map,
             given a proxy.
             This operation only tries to lookup a servant in
             the Active Servant Map. It does not attempt to find a servant
             by using any installed ServantLocator.
            
             </summary>
             <param name="proxy">The proxy for which the servant should be returned.
            
             </param>
             <returns>The servant that matches the proxy, or null if no such
             servant has been found.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.addServantLocator(Ice.ServantLocator,System.String)">
             <summary>
             Add a Servant Locator to this object adapter.
             Adding a servant
             locator for a category for which a servant locator is already
             registered throws AlreadyRegisteredException. To dispatch
             operation calls on servants, the object adapter tries to find a
             servant for a given Ice object identity and facet in the
             following order:
            
            
            
             The object adapter tries to find a servant for the identity
             and facet in the Active Servant Map.
            
             If no servant has been found in the Active Servant Map,
             the object adapter tries to find a servant locator for the
             category component of the identity. If a locator is found, the
             object adapter tries to find a servant using this locator.
            
             If no servant has been found by any of the preceding steps,
             the object adapter tries to find a locator for an empty category,
             regardless of the category contained in the identity. If a
             locator is found, the object adapter tries to find a servant
             using this locator.
            
             If no servant has been found by any of the preceding steps,
             the object adapter gives up and the caller receives
             ObjectNotExistException or FacetNotExistException.
            
            
            
             Only one locator for the empty category can be
             installed.
            
             </summary>
             <param name="locator">The locator to add.
            
             </param>
             <param name="category">The category for which the Servant Locator can
             locate servants, or an empty string if the Servant Locator does
             not belong to any specific category.
            
             </param>
        </member>
        <member name="M:Ice.ObjectAdapter.removeServantLocator(System.String)">
             <summary>
             Remove a Servant Locator from this object adapter.
             </summary>
             <param name="category">The category for which the Servant Locator can
             locate servants, or an empty string if the Servant Locator does
             not belong to any specific category.
            
             </param>
             <returns>The Servant Locator, or throws NotRegisteredException
             if no Servant Locator was found for the given category.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.findServantLocator(System.String)">
             <summary>
             Find a Servant Locator installed with this object adapter.
             </summary>
             <param name="category">The category for which the Servant Locator can
             locate servants, or an empty string if the Servant Locator does
             not belong to any specific category.
            
             </param>
             <returns>The Servant Locator, or null if no Servant Locator was
             found for the given category.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.findDefaultServant(System.String)">
             <summary>
             Find the default servant for a specific category.
             </summary>
             <param name="category">The category of the default servant to find.
            
             </param>
             <returns>The default servant or null if no default servant was
             registered for the category.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.createProxy(Ice.Identity)">
             <summary>
             Create a proxy for the object with the given identity.
             If this
             object adapter is configured with an adapter id, the return
             value is an indirect proxy that refers to the adapter id. If
             a replica group id is also defined, the return value is an
             indirect proxy that refers to the replica group id. Otherwise,
             if no adapter id is defined, the return value is a direct
             proxy containing this object adapter's published endpoints.
            
             </summary>
             <param name="id">The object's identity.
            
             </param>
             <returns>A proxy for the object with the given identity.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.createDirectProxy(Ice.Identity)">
             <summary>
             Create a direct proxy for the object with the given identity.
             The returned proxy contains this object adapter's published
             endpoints.
            
             </summary>
             <param name="id">The object's identity.
            
             </param>
             <returns>A proxy for the object with the given identity.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.createIndirectProxy(Ice.Identity)">
             <summary>
             Create an indirect proxy for the object with the given identity.
             If this object adapter is configured with an adapter id, the
             return value refers to the adapter id. Otherwise, the return
             value contains only the object identity.
            
             </summary>
             <param name="id">The object's identity.
            
             </param>
             <returns>A proxy for the object with the given identity.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.setLocator(Ice.LocatorPrx)">
             <summary>
             Set an Ice locator for this object adapter.
             By doing so, the
             object adapter will register itself with the locator registry
             when it is activated for the first time. Furthermore, the proxies
             created by this object adapter will contain the adapter identifier
             instead of its endpoints. The adapter identifier must be configured
             using the AdapterId property.
            
             </summary>
             <param name="loc">The locator used by this object adapter.
            
             </param>
        </member>
        <member name="M:Ice.ObjectAdapter.getLocator">
             <summary>
             Get the Ice locator used by this object adapter.
             </summary>
             <returns> The locator used by this object adapter, or null if no locator is
             used by this object adapter.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.getEndpoints">
             <summary>
             Get the set of endpoints configured with this object adapter.
             </summary>
             <returns>The set of endpoints.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.refreshPublishedEndpoints">
            <summary>
            Refresh the set of published endpoints.
            The run time re-reads
            the PublishedEndpoints property if it is set and re-reads the
            list of local interfaces if the adapter is configured to listen
            on all endpoints. This operation is useful to refresh the endpoint
            information that is published in the proxies that are created by
            an object adapter if the network interfaces used by a host changes.
            </summary>
        </member>
        <member name="M:Ice.ObjectAdapter.getPublishedEndpoints">
             <summary>
             Get the set of endpoints that proxies created by this object
             adapter will contain.
             </summary>
             <returns>The set of published endpoints.
            
             </returns>
        </member>
        <member name="M:Ice.ObjectAdapter.setPublishedEndpoints(Ice.Endpoint[])">
             <summary>
             Set of the endpoints that proxies created by this object
             adapter will contain.
             </summary>
             <param name="newEndpoints">The new set of endpoints that the object adapter will embed in proxies.
            
             </param>
        </member>
        <member name="M:Ice.ObjectFactory.create(System.String)">
             <summary>
             Create a new object for a given object type.
            
             <para>ObjectFactory has been deprecated, use ValueFactory instead.</para>
            
             The type is the
             absolute Slice type id, i.e., the id relative to the
             unnamed top-level Slice module. For example, the absolute
             Slice type id for interfaces of type Bar in the module
             Foo is "::Foo::Bar".
            
             The leading "::" is required.
            
             </summary>
             <param name="type">The object type.
            
             </param>
             <returns>The object created for the given type, or nil if the
             factory is unable to create the object.</returns>
        </member>
        <member name="M:Ice.ObjectFactory.destroy">
             <summary>
             Called when the factory is removed from the communicator, or if
             the communicator is destroyed.
            
             <para>ObjectFactory has been deprecated, use ValueFactory instead.</para>
            
             </summary>
        </member>
        <member name="M:Ice.Plugin.initialize">
            <summary>
            Perform any necessary initialization steps.
            </summary>
        </member>
        <member name="M:Ice.Plugin.destroy">
            <summary>
            Called when the communicator is being destroyed.
            </summary>
        </member>
        <member name="M:Ice.PluginManager.initializePlugins">
             <summary>
             Initialize the configured plug-ins.
             The communicator automatically initializes
             the plug-ins by default, but an application may need to interact directly with
             a plug-in prior to initialization. In this case, the application must set
             Ice.InitPlugins=0 and then invoke initializePlugins
             manually. The plug-ins are initialized in the order in which they are loaded.
             If a plug-in raises an exception during initialization, the communicator
             invokes destroy on the plug-ins that have already been initialized.
            
             </summary>
             <exception name="InitializationException">Raised if the plug-ins have already been initialized.</exception>
        </member>
        <member name="M:Ice.PluginManager.getPlugins">
             <summary>
             Get a list of plugins installed.
             </summary>
             <returns>The names of the plugins installed.
            
             </returns>
        </member>
        <member name="M:Ice.PluginManager.getPlugin(System.String)">
             <summary>
             Obtain a plug-in by name.
             </summary>
             <param name="name">The plug-in's name.
            
             </param>
             <returns>The plug-in.
            
             </returns>
             <exception name="NotRegisteredException">Raised if no plug-in is found with the given name.</exception>
        </member>
        <member name="M:Ice.PluginManager.addPlugin(System.String,Ice.Plugin)">
             <summary>
             Install a new plug-in.
             </summary>
             <param name="name">The plug-in's name.
            
             </param>
             <param name="pi">The plug-in.
            
             </param>
             <exception name="AlreadyRegisteredException">Raised if a plug-in already exists with the given name.</exception>
        </member>
        <member name="M:Ice.PluginManager.destroy">
            <summary>
            Called when the communicator is being destroyed.
            </summary>
        </member>
        <member name="T:Ice.ProcessPrx">
             <summary>
             An administrative interface for process management.
             Managed servers must
             implement this interface.
            
             A servant implementing this interface is a potential target
             for denial-of-service attacks, therefore proper security precautions
             should be taken. For example, the servant can use a UUID to make its
             identity harder to guess, and be registered in an object adapter with
             a secured endpoint.
             </summary>
        </member>
        <member name="M:Ice.ProcessPrx.shutdown(Ice.OptionalContext)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.ProcessPrx.shutdownAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.begin_shutdown(Ice.OptionalContext)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.begin_shutdown(Ice.AsyncCallback,System.Object)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.begin_shutdown(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.end_shutdown(Ice.AsyncResult)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:Ice.ProcessPrx.writeMessage(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Write a message on the process' stdout or stderr.
             </summary>
             <param name="message">The message.
            
             </param>
             <param name="fd">1 for stdout, 2 for stderr.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.ProcessPrx.writeMessageAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Write a message on the process' stdout or stderr.
             </summary>
             <param name="message">The message.
            
             </param>
             <param name="fd">1 for stdout, 2 for stderr.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.begin_writeMessage(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Write a message on the process' stdout or stderr.
             </summary>
             <param name="message">The message.
            
             </param>
             <param name="fd">1 for stdout, 2 for stderr.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.begin_writeMessage(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Write a message on the process' stdout or stderr.
             </summary>
             <param name="message">The message.
            
             </param>
             <param name="fd">1 for stdout, 2 for stderr.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.begin_writeMessage(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Write a message on the process' stdout or stderr.
             </summary>
             <param name="message">The message.
            
             </param>
             <param name="fd">1 for stdout, 2 for stderr.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.ProcessPrx.end_writeMessage(Ice.AsyncResult)">
            <summary>
            Write a message on the process' stdout or stderr.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:Ice.ProcessOperations_">
             <summary>
             An administrative interface for process management.
             Managed servers must
             implement this interface.
            
             A servant implementing this interface is a potential target
             for denial-of-service attacks, therefore proper security precautions
             should be taken. For example, the servant can use a UUID to make its
             identity harder to guess, and be registered in an object adapter with
             a secured endpoint.
             </summary>
        </member>
        <member name="M:Ice.ProcessOperations_.shutdown(Ice.Current)">
            <summary>
            Initiate a graceful shut-down.
            </summary>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.ProcessOperations_.writeMessage(System.String,System.Int32,Ice.Current)">
             <summary>
             Write a message on the process' stdout or stderr.
             </summary>
             <param name="message">The message.
            
             </param>
             <param name="fd">1 for stdout, 2 for stderr.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.Properties.getProperty(System.String)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             string is returned.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <returns>The property value.
            
             </returns>
        </member>
        <member name="M:Ice.Properties.getPropertyWithDefault(System.String,System.String)">
             <summary>
             Get a property by key.
             If the property is not set, the
             given default value is returned.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="value">The default value to use if the property does not
             exist.
            
             </param>
             <returns>The property value or the default value.
            
             </returns>
        </member>
        <member name="M:Ice.Properties.getPropertyAsInt(System.String)">
             <summary>
             Get a property as an integer.
             If the property is not set, 0
             is returned.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <returns>The property value interpreted as an integer.
            
             </returns>
        </member>
        <member name="M:Ice.Properties.getPropertyAsIntWithDefault(System.String,System.Int32)">
             <summary>
             Get a property as an integer.
             If the property is not set, the
             given default value is returned.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="value">The default value to use if the property does not
             exist.
            
             </param>
             <returns>The property value interpreted as an integer, or the
             default value.
            
             </returns>
        </member>
        <member name="M:Ice.Properties.getPropertyAsList(System.String)">
             <summary>
             Get a property as a list of strings.
             The strings must be
             separated by whitespace or comma. If the property is not set,
             an empty list is returned. The strings in the list can contain
             whitespace and commas if they are enclosed in single or double
             quotes. If quotes are mismatched, an empty list is returned.
             Within single quotes or double quotes, you can escape the
             quote in question with \, e.g. O'Reilly can be written as
             O'Reilly, "O'Reilly" or 'O\'Reilly'.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <returns>The property value interpreted as a list of strings.
            
             </returns>
        </member>
        <member name="M:Ice.Properties.getPropertyAsListWithDefault(System.String,System.String[])">
             <summary>
             Get a property as a list of strings.
             The strings must be
             separated by whitespace or comma. If the property is not set,
             the default list is returned. The strings in the list can contain
             whitespace and commas if they are enclosed in single or double
             quotes. If quotes are mismatched, the default list is returned.
             Within single quotes or double quotes, you can escape the
             quote in question with \, e.g. O'Reilly can be written as
             O'Reilly, "O'Reilly" or 'O\'Reilly'.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="value">The default value to use if the property is not set.
            
             </param>
             <returns>The property value interpreted as list of strings, or the
             default value.
            
             </returns>
        </member>
        <member name="M:Ice.Properties.getPropertiesForPrefix(System.String)">
             <summary>
             Get all properties whose keys begins with
             prefix.
             If
             prefix is an empty string,
             then all properties are returned.
            
             </summary>
             <param name="prefix">The prefix to search for (empty string if none).
             </param>
             <returns>The matching property set.</returns>
        </member>
        <member name="M:Ice.Properties.setProperty(System.String,System.String)">
             <summary>
             Set a property.
             To unset a property, set it to
             the empty string.
            
             </summary>
             <param name="key">The property key.
             </param>
             <param name="value">The property value.
            
             </param>
        </member>
        <member name="M:Ice.Properties.getCommandLineOptions">
             <summary>
             Get a sequence of command-line options that is equivalent to
             this property set.
             Each element of the returned sequence is
             a command-line option of the form
             --key=value.
            
             </summary>
             <returns>The command line options for this property set.</returns>
        </member>
        <member name="M:Ice.Properties.parseCommandLineOptions(System.String,System.String[])">
             <summary>
             Convert a sequence of command-line options into properties.
             All options that begin with
             --prefix. are
             converted into properties. If the prefix is empty, all options
             that begin with -- are converted to properties.
            
             </summary>
             <param name="prefix">The property prefix, or an empty string to
             convert all options starting with --.
            
             </param>
             <param name="options">The command-line options.
            
             </param>
             <returns>The command-line options that do not start with the specified
             prefix, in their original order.</returns>
        </member>
        <member name="M:Ice.Properties.parseIceCommandLineOptions(System.String[])">
             <summary>
             Convert a sequence of command-line options into properties.
             All options that begin with one of the following prefixes
             are converted into properties: --Ice, --IceBox, --IceGrid,
             --IcePatch2, --IceSSL, --IceStorm, --Freeze, and --Glacier2.
            
             </summary>
             <param name="options">The command-line options.
            
             </param>
             <returns>The command-line options that do not start with one of
             the listed prefixes, in their original order.</returns>
        </member>
        <member name="M:Ice.Properties.load(System.String)">
            <summary>
            Load properties from a file.
            </summary>
            <param name="file">The property file.</param>
        </member>
        <member name="M:Ice.Properties.ice_clone_">
            <summary>
            Create a copy of this property set.
            </summary>
            <returns>A copy of this property set.</returns>
        </member>
        <member name="T:Ice.PropertiesAdminPrx">
            <summary>
            The PropertiesAdmin interface provides remote access to the properties
            of a communicator.
            </summary>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.getProperty(System.String,Ice.OptionalContext)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             string is returned.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <returns>The property value.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.getPropertyAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_getProperty(System.String,Ice.OptionalContext)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_getProperty(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_getProperty(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             </summary>
             <param name="key">The property key.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.end_getProperty(Ice.AsyncResult)">
            <summary>
            Get a property by key.
            If the property is not set, an empty
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The property value.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.getPropertiesForPrefix(System.String,Ice.OptionalContext)">
             <summary>
             Get all properties whose keys begin with prefix.
             If
             prefix is an empty string then all properties are returned.
            
             </summary>
             <param name="prefix">The prefix to search for (empty string if none).
             </param>
             <returns>The matching property set.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.getPropertiesForPrefixAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all properties whose keys begin with prefix.
            If
            </summary>
            <param name="prefix">The prefix to search for (empty string if none).
            </param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_getPropertiesForPrefix(System.String,Ice.OptionalContext)">
            <summary>
            Get all properties whose keys begin with prefix.
            If
            </summary>
            <param name="prefix">The prefix to search for (empty string if none).
            </param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_getPropertiesForPrefix(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all properties whose keys begin with prefix.
            If
            </summary>
            <param name="prefix">The prefix to search for (empty string if none).
            </param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_getPropertiesForPrefix(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all properties whose keys begin with prefix.
            If
            </summary>
            <param name="prefix">The prefix to search for (empty string if none).
            </param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.end_getPropertiesForPrefix(Ice.AsyncResult)">
            <summary>
            Get all properties whose keys begin with prefix.
            If
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The matching property set.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.setProperties(System.Collections.Generic.Dictionary{System.String,System.String},Ice.OptionalContext)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="newProperties">Properties to be added, changed, or removed.
            If an entry in newProperties matches the name of an existing property,
            that property's value is replaced with the new value. If the new value
            is an empty string, the property is removed. Any existing properties
            that are not modified or removed by the entries in newProperties are
            retained with their original values.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.setPropertiesAsync(System.Collections.Generic.Dictionary{System.String,System.String},Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="newProperties">Properties to be added, changed, or removed.
            If an entry in newProperties matches the name of an existing property,
            that property's value is replaced with the new value. If the new value
            is an empty string, the property is removed. Any existing properties
            that are not modified or removed by the entries in newProperties are
            retained with their original values.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_setProperties(System.Collections.Generic.Dictionary{System.String,System.String},Ice.OptionalContext)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="newProperties">Properties to be added, changed, or removed.
            If an entry in newProperties matches the name of an existing property,
            that property's value is replaced with the new value. If the new value
            is an empty string, the property is removed. Any existing properties
            that are not modified or removed by the entries in newProperties are
            retained with their original values.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_setProperties(System.Collections.Generic.Dictionary{System.String,System.String},Ice.AsyncCallback,System.Object)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="newProperties">Properties to be added, changed, or removed.
            If an entry in newProperties matches the name of an existing property,
            that property's value is replaced with the new value. If the new value
            is an empty string, the property is removed. Any existing properties
            that are not modified or removed by the entries in newProperties are
            retained with their original values.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.begin_setProperties(System.Collections.Generic.Dictionary{System.String,System.String},Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="newProperties">Properties to be added, changed, or removed.
            If an entry in newProperties matches the name of an existing property,
            that property's value is replaced with the new value. If the new value
            is an empty string, the property is removed. Any existing properties
            that are not modified or removed by the entries in newProperties are
            retained with their original values.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.PropertiesAdminPrx.end_setProperties(Ice.AsyncResult)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:Ice.PropertiesAdminOperations_">
            <summary>
            The PropertiesAdmin interface provides remote access to the properties
            of a communicator.
            </summary>
        </member>
        <member name="M:Ice.PropertiesAdminOperations_.getProperty(System.String,Ice.Current)">
             <summary>
             Get a property by key.
             If the property is not set, an empty
             string is returned.
            
             </summary>
             <param name="key">The property key.
            
             </param>
             <returns>The property value.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.PropertiesAdminOperations_.getPropertiesForPrefix(System.String,Ice.Current)">
             <summary>
             Get all properties whose keys begin with prefix.
             If
             prefix is an empty string then all properties are returned.
            
             </summary>
             <param name="prefix">The prefix to search for (empty string if none).
             </param>
             <returns>The matching property set.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.PropertiesAdminOperations_.setProperties(System.Collections.Generic.Dictionary{System.String,System.String},Ice.Current)">
            <summary>
            Update the communicator's properties with the given property set.
            </summary>
            <param name="newProperties">Properties to be added, changed, or removed.
            If an entry in newProperties matches the name of an existing property,
            that property's value is replaced with the new value. If the new value
            is an empty string, the property is removed. Any existing properties
            that are not modified or removed by the entries in newProperties are
            retained with their original values.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:Ice.RemoteLoggerAlreadyAttachedException">
            <summary>
            Thrown when the provided RemoteLogger was previously attached to a LoggerAdmin.
            </summary>
        </member>
        <member name="T:Ice.RemoteLoggerPrx">
            <summary>
            The Ice remote logger interface.
            An application can implement a
            RemoteLogger to receive the log messages sent to the local Logger
            of another Ice application.
            </summary>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.init(System.String,Ice.LogMessage[],Ice.OptionalContext)">
             <summary>
             init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
             </summary>
             <param name="prefix">The prefix of the associated local Logger.
            
             </param>
             <param name="logMessages">Old log messages generated before "now".</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.initAsync(System.String,Ice.LogMessage[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
             </summary>
             <param name="prefix">The prefix of the associated local Logger.
            
             </param>
             <param name="logMessages">Old log messages generated before "now".</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.begin_init(System.String,Ice.LogMessage[],Ice.OptionalContext)">
             <summary>
             init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
             </summary>
             <param name="prefix">The prefix of the associated local Logger.
            
             </param>
             <param name="logMessages">Old log messages generated before "now".</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.begin_init(System.String,Ice.LogMessage[],Ice.AsyncCallback,System.Object)">
             <summary>
             init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
             </summary>
             <param name="prefix">The prefix of the associated local Logger.
            
             </param>
             <param name="logMessages">Old log messages generated before "now".</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.begin_init(System.String,Ice.LogMessage[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
             </summary>
             <param name="prefix">The prefix of the associated local Logger.
            
             </param>
             <param name="logMessages">Old log messages generated before "now".</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.end_init(Ice.AsyncResult)">
            <summary>
            init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.log(Ice.LogMessage,Ice.OptionalContext)">
             <summary>
             Log a LogMessage.
             Note that log may be called by LoggerAdmin before init.
            
             </summary>
             <param name="message">The message to log.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.logAsync(Ice.LogMessage,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Log a LogMessage.
            Note that log may be called by LoggerAdmin before init.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.begin_log(Ice.LogMessage,Ice.OptionalContext)">
            <summary>
            Log a LogMessage.
            Note that log may be called by LoggerAdmin before init.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.begin_log(Ice.LogMessage,Ice.AsyncCallback,System.Object)">
            <summary>
            Log a LogMessage.
            Note that log may be called by LoggerAdmin before init.
            </summary>
            <param name="message">The message to log.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.begin_log(Ice.LogMessage,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Log a LogMessage.
            Note that log may be called by LoggerAdmin before init.
            </summary>
            <param name="message">The message to log.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RemoteLoggerPrx.end_log(Ice.AsyncResult)">
            <summary>
            Log a LogMessage.
            Note that log may be called by LoggerAdmin before init.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:Ice.LoggerAdminPrx">
            <summary>
            The interface of the admin object that allows an Ice application the attach its
            RemoteLogger to the Logger of this admin object's Ice communicator.
            </summary>
        </member>
        <member name="M:Ice.LoggerAdminPrx.attachRemoteLogger(Ice.RemoteLoggerPrx,Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext)">
             <summary>
             Attaches a RemoteLogger object to the local logger.
             attachRemoteLogger calls init on the provided RemoteLogger proxy.
            
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="messageTypes">The list of message types that the remote logger wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that the remote logger wishes to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be provided
             to init. A negative value requests all messages available.
            
             </param>
             <exception name="RemoteLoggerAlreadyAttachedException">Raised if this remote logger is already
             attached to this admin object.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LoggerAdminPrx.attachRemoteLoggerAsync(Ice.RemoteLoggerPrx,Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Attaches a RemoteLogger object to the local logger.
             attachRemoteLogger calls init on the provided RemoteLogger proxy.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="messageTypes">The list of message types that the remote logger wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that the remote logger wishes to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be provided
             to init. A negative value requests all messages available.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_attachRemoteLogger(Ice.RemoteLoggerPrx,Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext)">
             <summary>
             Attaches a RemoteLogger object to the local logger.
             attachRemoteLogger calls init on the provided RemoteLogger proxy.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="messageTypes">The list of message types that the remote logger wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that the remote logger wishes to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be provided
             to init. A negative value requests all messages available.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_attachRemoteLogger(Ice.RemoteLoggerPrx,Ice.LogMessageType[],System.String[],System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Attaches a RemoteLogger object to the local logger.
             attachRemoteLogger calls init on the provided RemoteLogger proxy.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="messageTypes">The list of message types that the remote logger wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that the remote logger wishes to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be provided
             to init. A negative value requests all messages available.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_attachRemoteLogger(Ice.RemoteLoggerPrx,Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Attaches a RemoteLogger object to the local logger.
             attachRemoteLogger calls init on the provided RemoteLogger proxy.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="messageTypes">The list of message types that the remote logger wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that the remote logger wishes to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be provided
             to init. A negative value requests all messages available.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.end_attachRemoteLogger(Ice.AsyncResult)">
            <summary>
            Attaches a RemoteLogger object to the local logger.
            attachRemoteLogger calls init on the provided RemoteLogger proxy.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:Ice.LoggerAdminPrx.detachRemoteLogger(Ice.RemoteLoggerPrx,Ice.OptionalContext)">
             <summary>
             Detaches a RemoteLogger object from the local logger.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LoggerAdminPrx.detachRemoteLoggerAsync(Ice.RemoteLoggerPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Detaches a RemoteLogger object from the local logger.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_detachRemoteLogger(Ice.RemoteLoggerPrx,Ice.OptionalContext)">
             <summary>
             Detaches a RemoteLogger object from the local logger.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_detachRemoteLogger(Ice.RemoteLoggerPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Detaches a RemoteLogger object from the local logger.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_detachRemoteLogger(Ice.RemoteLoggerPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Detaches a RemoteLogger object from the local logger.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.end_detachRemoteLogger(Ice.AsyncResult)">
            <summary>
            Detaches a RemoteLogger object from the local logger.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.getLog(Ice.LogMessageType[],System.String[],System.Int32,System.String@,Ice.OptionalContext)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="messageTypes">The list of message types that the caller wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that caller wish to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be returned.
             A negative value requests all messages available.
            
             </param>
             <param name="prefix">The prefix of the associated local logger.
            
             </param>
             <returns>The Log messages.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.LoggerAdminPrx.getLogAsync(Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="messageTypes">The list of message types that the caller wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that caller wish to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be returned.
             A negative value requests all messages available.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_getLog(Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="messageTypes">The list of message types that the caller wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that caller wish to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be returned.
             A negative value requests all messages available.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_getLog(Ice.LogMessageType[],System.String[],System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="messageTypes">The list of message types that the caller wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that caller wish to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be returned.
             A negative value requests all messages available.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.begin_getLog(Ice.LogMessageType[],System.String[],System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="messageTypes">The list of message types that the caller wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that caller wish to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be returned.
             A negative value requests all messages available.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.LoggerAdminPrx.end_getLog(System.String@,Ice.AsyncResult)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="prefix">The prefix of the associated local logger.
            
             </param>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The Log messages.</returns>
        </member>
        <member name="T:Ice.RemoteLoggerOperations_">
            <summary>
            The Ice remote logger interface.
            An application can implement a
            RemoteLogger to receive the log messages sent to the local Logger
            of another Ice application.
            </summary>
        </member>
        <member name="M:Ice.RemoteLoggerOperations_.init(System.String,Ice.LogMessage[],Ice.Current)">
             <summary>
             init is called by attachRemoteLogger when a RemoteLogger proxy is attached.
             </summary>
             <param name="prefix">The prefix of the associated local Logger.
            
             </param>
             <param name="logMessages">Old log messages generated before "now".</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.RemoteLoggerOperations_.log(Ice.LogMessage,Ice.Current)">
             <summary>
             Log a LogMessage.
             Note that log may be called by LoggerAdmin before init.
            
             </summary>
             <param name="message">The message to log.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:Ice.LoggerAdminOperations_">
            <summary>
            The interface of the admin object that allows an Ice application the attach its
            RemoteLogger to the Logger of this admin object's Ice communicator.
            </summary>
        </member>
        <member name="M:Ice.LoggerAdminOperations_.attachRemoteLogger(Ice.RemoteLoggerPrx,Ice.LogMessageType[],System.String[],System.Int32,Ice.Current)">
             <summary>
             Attaches a RemoteLogger object to the local logger.
             attachRemoteLogger calls init on the provided RemoteLogger proxy.
            
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <param name="messageTypes">The list of message types that the remote logger wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that the remote logger wishes to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be provided
             to init. A negative value requests all messages available.
            
             </param>
             <exception name="RemoteLoggerAlreadyAttachedException">Raised if this remote logger is already
             attached to this admin object.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.LoggerAdminOperations_.detachRemoteLogger(Ice.RemoteLoggerPrx,Ice.Current)">
             <summary>
             Detaches a RemoteLogger object from the local logger.
             </summary>
             <param name="prx">A proxy to the remote logger.
            
             </param>
             <returns>True if the provided remote logger proxy was detached, and false otherwise.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.LoggerAdminOperations_.getLog(Ice.LogMessageType[],System.String[],System.Int32,System.String@,Ice.Current)">
             <summary>
             Retrieves log messages recently logged.
             </summary>
             <param name="messageTypes">The list of message types that the caller wishes to receive.
             An empty list means no filtering (send all message types).
            
             </param>
             <param name="traceCategories">The categories of traces that caller wish to receive.
             This parameter is ignored if messageTypes is not empty and does not include trace.
             An empty list means no filtering (send all trace categories).
            
             </param>
             <param name="messageMax">The maximum number of log messages (of all types) to be returned.
             A negative value requests all messages available.
            
             </param>
             <param name="prefix">The prefix of the associated local logger.
            
             </param>
             <returns>The Log messages.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:Ice.RouterPrx">
            <summary>
            The Ice router interface.
            Routers can be set either globally with
            Communicator.setDefaultRouter, or with ice_router on specific
            proxies.
            </summary>
        </member>
        <member name="M:Ice.RouterPrx.getClientProxy(Ice.Optional{System.Boolean}@,Ice.OptionalContext)">
             <summary>
             Get the router's client proxy, i.e., the proxy to use for
             forwarding requests from the client to the router.
             If a null proxy is returned, the client will forward requests
             to the router's endpoints.
            
             </summary>
             <param name="hasRoutingTable">Indicates whether or not the router supports a routing
             table. If it is supported, the Ice runtime will call addProxies to populate the
             routing table. This out parameter is only supported starting with Ice 3.7.
             The Ice runtime assumes the router has a routing table if the optional is not
             set.
            
             </param>
             <returns>The router's client proxy.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.RouterPrx.getClientProxyAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the router's client proxy, i.e., the proxy to use for
            forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_getClientProxy(Ice.OptionalContext)">
            <summary>
            Get the router's client proxy, i.e., the proxy to use for
            forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_getClientProxy(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the router's client proxy, i.e., the proxy to use for
            forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_getClientProxy(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the router's client proxy, i.e., the proxy to use for
            forwarding requests from the client to the router.
            If a null proxy is returned, the client will forward requests
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.end_getClientProxy(Ice.Optional{System.Boolean}@,Ice.AsyncResult)">
             <summary>
             Get the router's client proxy, i.e., the proxy to use for
             forwarding requests from the client to the router.
             If a null proxy is returned, the client will forward requests
             </summary>
             <param name="hasRoutingTable">Indicates whether or not the router supports a routing
             table. If it is supported, the Ice runtime will call addProxies to populate the
             routing table. This out parameter is only supported starting with Ice 3.7.
             The Ice runtime assumes the router has a routing table if the optional is not
             set.
            
             </param>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The router's client proxy.</returns>
        </member>
        <member name="M:Ice.RouterPrx.getServerProxy(Ice.OptionalContext)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <returns>The router's server proxy.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.RouterPrx.getServerProxyAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_getServerProxy(Ice.OptionalContext)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_getServerProxy(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_getServerProxy(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.end_getServerProxy(Ice.AsyncResult)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The router's server proxy.</returns>
        </member>
        <member name="M:Ice.RouterPrx.addProxies(Ice.ObjectPrx[],Ice.OptionalContext)">
             <summary>
             Add new proxy information to the router's routing table.
             </summary>
             <param name="proxies">The proxies to add.
            
             </param>
             <returns>Proxies discarded by the router.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.RouterPrx.addProxiesAsync(Ice.ObjectPrx[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Add new proxy information to the router's routing table.
             </summary>
             <param name="proxies">The proxies to add.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_addProxies(Ice.ObjectPrx[],Ice.OptionalContext)">
             <summary>
             Add new proxy information to the router's routing table.
             </summary>
             <param name="proxies">The proxies to add.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_addProxies(Ice.ObjectPrx[],Ice.AsyncCallback,System.Object)">
             <summary>
             Add new proxy information to the router's routing table.
             </summary>
             <param name="proxies">The proxies to add.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.begin_addProxies(Ice.ObjectPrx[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Add new proxy information to the router's routing table.
             </summary>
             <param name="proxies">The proxies to add.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterPrx.end_addProxies(Ice.AsyncResult)">
            <summary>
            Add new proxy information to the router's routing table.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>Proxies discarded by the router.</returns>
        </member>
        <member name="T:Ice.RouterFinderPrx">
            <summary>
            This inferface should be implemented by services implementing the
            Ice::Router interface.
            It should be advertised through an Ice
            object with the identity `Ice/RouterFinder'. This allows clients to
            retrieve the router proxy with just the endpoint information of the
            service.
            </summary>
        </member>
        <member name="M:Ice.RouterFinderPrx.getRouter(Ice.OptionalContext)">
             <summary>
             Get the router proxy implemented by the process hosting this
             finder object.
             The proxy might point to several replicas.
            
             </summary>
             <returns>The router proxy.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:Ice.RouterFinderPrx.getRouterAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the router proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:Ice.RouterFinderPrx.begin_getRouter(Ice.OptionalContext)">
            <summary>
            Get the router proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterFinderPrx.begin_getRouter(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the router proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterFinderPrx.begin_getRouter(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the router proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:Ice.RouterFinderPrx.end_getRouter(Ice.AsyncResult)">
            <summary>
            Get the router proxy implemented by the process hosting this
            finder object.
            The proxy might point to several replicas.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The router proxy.</returns>
        </member>
        <member name="T:Ice.RouterOperations_">
            <summary>
            The Ice router interface.
            Routers can be set either globally with
            Communicator.setDefaultRouter, or with ice_router on specific
            proxies.
            </summary>
        </member>
        <member name="M:Ice.RouterOperations_.getClientProxy(Ice.Optional{System.Boolean}@,Ice.Current)">
             <summary>
             Get the router's client proxy, i.e., the proxy to use for
             forwarding requests from the client to the router.
             If a null proxy is returned, the client will forward requests
             to the router's endpoints.
            
             </summary>
             <param name="hasRoutingTable">Indicates whether or not the router supports a routing
             table. If it is supported, the Ice runtime will call addProxies to populate the
             routing table. This out parameter is only supported starting with Ice 3.7.
             The Ice runtime assumes the router has a routing table if the optional is not
             set.
            
             </param>
             <returns>The router's client proxy.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.RouterOperations_.getServerProxy(Ice.Current)">
            <summary>
            Get the router's server proxy, i.e., the proxy to use for
            forwarding requests from the server to the router.
            </summary>
            <returns>The router's server proxy.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.RouterOperations_.addProxies(Ice.ObjectPrx[],Ice.Current)">
             <summary>
             Add new proxy information to the router's routing table.
             </summary>
             <param name="proxies">The proxies to add.
            
             </param>
             <returns>Proxies discarded by the router.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:Ice.RouterFinderOperations_">
            <summary>
            This inferface should be implemented by services implementing the
            Ice::Router interface.
            It should be advertised through an Ice
            object with the identity `Ice/RouterFinder'. This allows clients to
            retrieve the router proxy with just the endpoint information of the
            service.
            </summary>
        </member>
        <member name="M:Ice.RouterFinderOperations_.getRouter(Ice.Current)">
             <summary>
             Get the router proxy implemented by the process hosting this
             finder object.
             The proxy might point to several replicas.
            
             </summary>
             <returns>The router proxy.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:Ice.ServantLocator.locate(Ice.Current,System.Object@)">
             <summary>
             Called before a request is dispatched if a
             servant cannot be found in the object adapter's active servant
             map.
             Note that the object adapter does not automatically insert
             the returned servant into its active servant map. This must be
             done by the servant locator implementation, if this is desired.
            
             locate can throw any user exception. If it does, that exception
             is marshaled back to the client. If the Slice definition for the
             corresponding operation includes that user exception, the client
             receives that user exception; otherwise, the client receives
             UnknownUserException.
            
             If locate throws any exception, the Ice run time does not
             call finished.
            
             If you call locate from your own code, you
             must also call finished when you have finished using the
             servant, provided that locate returned a non-null servant;
             otherwise, you will get undefined behavior if you use
             servant locators such as the Freeze Evictor.
            
             </summary>
             <param name="curr">Information about the current operation for which
             a servant is required.
            
             </param>
             <param name="cookie">A "cookie" that will be passed to finished.
            
             </param>
             <returns>The located servant, or null if no suitable servant has
             been found.
            
             </returns>
             <exception name="UserException">The implementation can raise a UserException
             and the run time will marshal it as the result of the invocation.
            
             </exception>
        </member>
        <member name="M:Ice.ServantLocator.finished(Ice.Current,Ice.Object,System.Object)">
             <summary>
             Called by the object adapter after a request has been
             made.
             This operation is only called if locate was called
             prior to the request and returned a non-null servant. This
             operation can be used for cleanup purposes after a request.
            
             finished can throw any user exception. If it does, that exception
             is marshaled back to the client. If the Slice definition for the
             corresponding operation includes that user exception, the client
             receives that user exception; otherwise, the client receives
             UnknownUserException.
            
             If both the operation and finished throw an exception, the
             exception thrown by finished is marshaled back to the client.
            
             </summary>
             <param name="curr">Information about the current operation call for
             which a servant was located by locate.
            
             </param>
             <param name="servant">The servant that was returned by locate.
            
             </param>
             <param name="cookie">The cookie that was returned by locate.
            
             </param>
             <exception name="UserException">The implementation can raise a UserException
             and the run time will marshal it as the result of the invocation.
            
             </exception>
        </member>
        <member name="M:Ice.ServantLocator.deactivate(System.String)">
             <summary>
             Called when the object adapter in which this servant locator is
             installed is destroyed.
             </summary>
             <param name="category">Indicates for which category the servant locator
             is being deactivated.
            
             </param>
        </member>
        <member name="M:Ice.ValueFactoryManager.add(Ice.ValueFactory,System.String)">
             <summary>
             Add a value factory.
             Attempting to add a factory with an id for
             which a factory is already registered throws AlreadyRegisteredException.
            
             When unmarshaling an Ice value, the Ice run time reads the
             most-derived type id off the wire and attempts to create an
             instance of the type using a factory. If no instance is created,
             either because no factory was found, or because all factories
             returned nil, the behavior of the Ice run time depends on the
             format with which the value was marshaled:
            
             If the value uses the "sliced" format, Ice ascends the class
             hierarchy until it finds a type that is recognized by a factory,
             or it reaches the least-derived type. If no factory is found that
             can create an instance, the run time throws NoValueFactoryException.
            
             If the value uses the "compact" format, Ice immediately raises
             NoValueFactoryException.
            
             The following order is used to locate a factory for a type:
            
            
            
             The Ice run-time looks for a factory registered
             specifically for the type.
            
             If no instance has been created, the Ice run-time looks
             for the default factory, which is registered with an empty type id.
            
            
             If no instance has been created by any of the preceding
             steps, the Ice run-time looks for a factory that may have been
             statically generated by the language mapping for non-abstract classes.
            
            
            
            
             </summary>
             <param name="factory">The factory to add.
            
             </param>
             <param name="id">The type id for which the factory can create instances, or
             an empty string for the default factory.</param>
        </member>
        <member name="M:Ice.ValueFactoryManager.find(System.String)">
             <summary>
             Find an value factory registered with this communicator.
             </summary>
             <param name="id">The type id for which the factory can create instances,
             or an empty string for the default factory.
            
             </param>
             <returns>The value factory, or null if no value factory was
             found for the given id.</returns>
        </member>
        <member name="T:IceMX.UnknownMetricsView">
            <summary>
            Raised if a metrics view cannot be found.
            </summary>
        </member>
        <member name="T:IceMX.MetricsAdminPrx">
            <summary>
            The metrics administrative facet interface.
            This interface allows
            remote administrative clients to access metrics of an application
            that enabled the Ice administrative facility and configured some
            metrics views.
            </summary>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMetricsViewNames(System.String[]@,Ice.OptionalContext)">
             <summary>
             Get the names of enabled and disabled metrics.
             </summary>
             <param name="disabledViews">The names of the disabled views.
            
             </param>
             <returns>The name of the enabled views.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMetricsViewNamesAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the names of enabled and disabled metrics.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsViewNames(Ice.OptionalContext)">
            <summary>
            Get the names of enabled and disabled metrics.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsViewNames(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the names of enabled and disabled metrics.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsViewNames(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the names of enabled and disabled metrics.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.end_getMetricsViewNames(System.String[]@,Ice.AsyncResult)">
             <summary>
             Get the names of enabled and disabled metrics.
             </summary>
             <param name="disabledViews">The names of the disabled views.
            
             </param>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The name of the enabled views.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.enableMetricsView(System.String,Ice.OptionalContext)">
             <summary>
             Enables a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.enableMetricsViewAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Enables a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_enableMetricsView(System.String,Ice.OptionalContext)">
             <summary>
             Enables a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_enableMetricsView(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Enables a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_enableMetricsView(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Enables a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.end_enableMetricsView(Ice.AsyncResult)">
            <summary>
            Enables a metrics view.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.disableMetricsView(System.String,Ice.OptionalContext)">
             <summary>
             Disable a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.disableMetricsViewAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Disable a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_disableMetricsView(System.String,Ice.OptionalContext)">
             <summary>
             Disable a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_disableMetricsView(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Disable a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_disableMetricsView(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Disable a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.end_disableMetricsView(Ice.AsyncResult)">
            <summary>
            Disable a metrics view.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMetricsView(System.String,System.Int64@,Ice.OptionalContext)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             returns a dictionnary of metric maps for each metrics class
             configured with the view. The timestamp allows the client to
             compute averages which are not dependent of the invocation
             latency for this operation.
            
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="timestamp">The local time of the process when the metrics
             object were retrieved.
            
             </param>
             <returns>The metrics view data.
            
             </returns>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMetricsViewAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsView(System.String,Ice.OptionalContext)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsView(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsView(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.end_getMetricsView(System.Int64@,Ice.AsyncResult)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             </summary>
             <param name="timestamp">The local time of the process when the metrics
             object were retrieved.
            
             </param>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The metrics view data.
            
             </returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMapMetricsFailures(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <returns>The metrics failures associated with the map.
            
             </returns>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMapMetricsFailuresAsync(System.String,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMapMetricsFailures(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMapMetricsFailures(System.String,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMapMetricsFailures(System.String,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.end_getMapMetricsFailures(Ice.AsyncResult)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The metrics failures associated with the map.
            
             </returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMetricsFailures(System.String,System.String,System.String,Ice.OptionalContext)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="id">The ID of the metrics.
            
             </param>
             <returns>The metrics failures associated with the metrics.
            
             </returns>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.getMetricsFailuresAsync(System.String,System.String,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="id">The ID of the metrics.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsFailures(System.String,System.String,System.String,Ice.OptionalContext)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="id">The ID of the metrics.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsFailures(System.String,System.String,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="id">The ID of the metrics.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.begin_getMetricsFailures(System.String,System.String,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="id">The ID of the metrics.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceMX.MetricsAdminPrx.end_getMetricsFailures(Ice.AsyncResult)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The metrics failures associated with the metrics.
            
             </returns>
        </member>
        <member name="T:IceMX.MetricsAdminOperations_">
            <summary>
            The metrics administrative facet interface.
            This interface allows
            remote administrative clients to access metrics of an application
            that enabled the Ice administrative facility and configured some
            metrics views.
            </summary>
        </member>
        <member name="M:IceMX.MetricsAdminOperations_.getMetricsViewNames(System.String[]@,Ice.Current)">
             <summary>
             Get the names of enabled and disabled metrics.
             </summary>
             <param name="disabledViews">The names of the disabled views.
            
             </param>
             <returns>The name of the enabled views.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminOperations_.enableMetricsView(System.String,Ice.Current)">
             <summary>
             Enables a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminOperations_.disableMetricsView(System.String,Ice.Current)">
             <summary>
             Disable a metrics view.
             </summary>
             <param name="name">The metrics view name.
            
             </param>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminOperations_.getMetricsView(System.String,System.Int64@,Ice.Current)">
             <summary>
             Get the metrics objects for the given metrics view.
             This
             returns a dictionnary of metric maps for each metrics class
             configured with the view. The timestamp allows the client to
             compute averages which are not dependent of the invocation
             latency for this operation.
            
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="timestamp">The local time of the process when the metrics
             object were retrieved.
            
             </param>
             <returns>The metrics view data.
            
             </returns>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminOperations_.getMapMetricsFailures(System.String,System.String,Ice.Current)">
             <summary>
             Get the metrics failures associated with the given view and map.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <returns>The metrics failures associated with the map.
            
             </returns>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceMX.MetricsAdminOperations_.getMetricsFailures(System.String,System.String,System.String,Ice.Current)">
             <summary>
             Get the metrics failure associated for the given metrics.
             </summary>
             <param name="view">The name of the metrics view.
            
             </param>
             <param name="map">The name of the metrics map.
            
             </param>
             <param name="id">The ID of the metrics.
            
             </param>
             <returns>The metrics failures associated with the metrics.
            
             </returns>
             <exception name="UnknownMetricsView">Raised if the metrics view cannot be
             found.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
    </members>
</doc>
