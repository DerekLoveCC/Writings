<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IceGrid</name>
    </assembly>
    <members>
        <member name="T:IceGrid.AdminPrx">
            <summary>
            The IceGrid administrative interface.
            Allowing access to this interface
            is a security risk! Please see the IceGrid documentation
            for further information.
            </summary>
        </member>
        <member name="M:IceGrid.AdminPrx.addApplication(IceGrid.ApplicationDescriptor,Ice.OptionalContext)">
             <summary>
             Add an application to IceGrid.
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.addApplicationAsync(IceGrid.ApplicationDescriptor,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Add an application to IceGrid.
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addApplication(IceGrid.ApplicationDescriptor,Ice.OptionalContext)">
             <summary>
             Add an application to IceGrid.
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addApplication(IceGrid.ApplicationDescriptor,Ice.AsyncCallback,System.Object)">
             <summary>
             Add an application to IceGrid.
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addApplication(IceGrid.ApplicationDescriptor,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Add an application to IceGrid.
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_addApplication(Ice.AsyncResult)">
            <summary>
            Add an application to IceGrid.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.syncApplication(IceGrid.ApplicationDescriptor,Ice.OptionalContext)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             with this new descriptor.
            
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.syncApplicationAsync(IceGrid.ApplicationDescriptor,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_syncApplication(IceGrid.ApplicationDescriptor,Ice.OptionalContext)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_syncApplication(IceGrid.ApplicationDescriptor,Ice.AsyncCallback,System.Object)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_syncApplication(IceGrid.ApplicationDescriptor,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_syncApplication(Ice.AsyncResult)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.updateApplication(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext)">
             <summary>
             Update a deployed application with the given update application
             descriptor.
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.updateApplicationAsync(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Update a deployed application with the given update application
             descriptor.
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateApplication(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext)">
             <summary>
             Update a deployed application with the given update application
             descriptor.
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateApplication(IceGrid.ApplicationUpdateDescriptor,Ice.AsyncCallback,System.Object)">
             <summary>
             Update a deployed application with the given update application
             descriptor.
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateApplication(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Update a deployed application with the given update application
             descriptor.
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_updateApplication(Ice.AsyncResult)">
            <summary>
            Update a deployed application with the given update application
            descriptor.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,Ice.OptionalContext)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             with this new descriptor only if no server restarts are
             necessary for the update of the application. If some servers
             need to be restarted, the synchronization is rejected with a
             DeploymentException.
            
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.syncApplicationWithoutRestartAsync(IceGrid.ApplicationDescriptor,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,Ice.OptionalContext)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,Ice.AsyncCallback,System.Object)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_syncApplicationWithoutRestart(Ice.AsyncResult)">
            <summary>
            Synchronize a deployed application with the given application
            descriptor.
            This operation will replace the current descriptor
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext)">
             <summary>
             Update a deployed application with the given update application
             descriptor only if no server restarts are necessary for the
             update of the application.
             If some servers need to be
             restarted, the synchronization is rejected with a
             DeploymentException.
            
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.updateApplicationWithoutRestartAsync(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Update a deployed application with the given update application
             descriptor only if no server restarts are necessary for the
             update of the application.
             If some servers need to be
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext)">
             <summary>
             Update a deployed application with the given update application
             descriptor only if no server restarts are necessary for the
             update of the application.
             If some servers need to be
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,Ice.AsyncCallback,System.Object)">
             <summary>
             Update a deployed application with the given update application
             descriptor only if no server restarts are necessary for the
             update of the application.
             If some servers need to be
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Update a deployed application with the given update application
             descriptor only if no server restarts are necessary for the
             update of the application.
             If some servers need to be
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_updateApplicationWithoutRestart(Ice.AsyncResult)">
            <summary>
            Update a deployed application with the given update application
            descriptor only if no server restarts are necessary for the
            update of the application.
            If some servers need to be
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.removeApplication(System.String,Ice.OptionalContext)">
             <summary>
             Remove an application from IceGrid.
             </summary>
             <param name="name">The application name.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.removeApplicationAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Remove an application from IceGrid.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeApplication(System.String,Ice.OptionalContext)">
             <summary>
             Remove an application from IceGrid.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeApplication(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Remove an application from IceGrid.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeApplication(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Remove an application from IceGrid.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_removeApplication(Ice.AsyncResult)">
            <summary>
            Remove an application from IceGrid.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.OptionalContext)">
             <summary>
             Instantiate a server template from an application on the given
             node.
             </summary>
             <param name="application">The application name.
            
             </param>
             <param name="node">The name of the node where the server will be
             deployed.
            
             </param>
             <param name="desc">The descriptor of the server instance to deploy.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if server instantiation
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.instantiateServerAsync(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Instantiate a server template from an application on the given
             node.
             </summary>
             <param name="application">The application name.
            
             </param>
             <param name="node">The name of the node where the server will be
             deployed.
            
             </param>
             <param name="desc">The descriptor of the server instance to deploy.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.OptionalContext)">
             <summary>
             Instantiate a server template from an application on the given
             node.
             </summary>
             <param name="application">The application name.
            
             </param>
             <param name="node">The name of the node where the server will be
             deployed.
            
             </param>
             <param name="desc">The descriptor of the server instance to deploy.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.AsyncCallback,System.Object)">
             <summary>
             Instantiate a server template from an application on the given
             node.
             </summary>
             <param name="application">The application name.
            
             </param>
             <param name="node">The name of the node where the server will be
             deployed.
            
             </param>
             <param name="desc">The descriptor of the server instance to deploy.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Instantiate a server template from an application on the given
             node.
             </summary>
             <param name="application">The application name.
            
             </param>
             <param name="node">The name of the node where the server will be
             deployed.
            
             </param>
             <param name="desc">The descriptor of the server instance to deploy.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_instantiateServer(Ice.AsyncResult)">
            <summary>
            Instantiate a server template from an application on the given
            node.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.patchApplication(System.String,System.Boolean,Ice.OptionalContext)">
             <summary>
             Patch the given application data.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="shutdown">If true, the servers depending on the data to
             patch will be shut down if necessary.
            
             </param>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.
            
             </exception>
             <exception name="PatchException">Raised if the patch failed.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.patchApplicationAsync(System.String,System.Boolean,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Patch the given application data.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="shutdown">If true, the servers depending on the data to
             patch will be shut down if necessary.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_patchApplication(System.String,System.Boolean,Ice.OptionalContext)">
             <summary>
             Patch the given application data.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="shutdown">If true, the servers depending on the data to
             patch will be shut down if necessary.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_patchApplication(System.String,System.Boolean,Ice.AsyncCallback,System.Object)">
             <summary>
             Patch the given application data.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="shutdown">If true, the servers depending on the data to
             patch will be shut down if necessary.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_patchApplication(System.String,System.Boolean,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Patch the given application data.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="shutdown">If true, the servers depending on the data to
             patch will be shut down if necessary.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_patchApplication(Ice.AsyncResult)">
            <summary>
            Patch the given application data.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getApplicationInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <returns>The application descriptor.
            
             </returns>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getApplicationInfoAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getApplicationInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getApplicationInfo(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getApplicationInfo(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getApplicationInfo(Ice.AsyncResult)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The application descriptor.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getDefaultApplicationDescriptor(Ice.OptionalContext)">
             <summary>
             Get the default application descriptor.
             </summary>
             <returns>The default application descriptor.
            
             </returns>
             <exception name="DeploymentException">Raised if the default application
             descriptor can't be accessed or is invalid.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getDefaultApplicationDescriptorAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the default application descriptor.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getDefaultApplicationDescriptor(Ice.OptionalContext)">
            <summary>
            Get the default application descriptor.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getDefaultApplicationDescriptor(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the default application descriptor.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getDefaultApplicationDescriptor(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the default application descriptor.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getDefaultApplicationDescriptor(Ice.AsyncResult)">
             <summary>
             Get the default application descriptor.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The default application descriptor.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllApplicationNames(Ice.OptionalContext)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <returns>The application names.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllApplicationNamesAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllApplicationNames(Ice.OptionalContext)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllApplicationNames(Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllApplicationNames(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAllApplicationNames(Ice.AsyncResult)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The application names.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <returns>The server information.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerInfoAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerInfo(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerInfo(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getServerInfo(Ice.AsyncResult)">
            <summary>
            Get the server information for the server with the given id.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The server information.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerState(System.String,Ice.OptionalContext)">
             <summary>
             Get a server's state.
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>The server state.
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerStateAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get a server's state.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerState(System.String,Ice.OptionalContext)">
             <summary>
             Get a server's state.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerState(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a server's state.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerState(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a server's state.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getServerState(Ice.AsyncResult)">
             <summary>
             Get a server's state.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The server state.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerPid(System.String,Ice.OptionalContext)">
             <summary>
             Get a server's system process id.
             The process id is operating
             system dependent.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>The server's process id.
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerPidAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get a server's system process id.
             The process id is operating
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerPid(System.String,Ice.OptionalContext)">
             <summary>
             Get a server's system process id.
             The process id is operating
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerPid(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a server's system process id.
             The process id is operating
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerPid(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a server's system process id.
             The process id is operating
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getServerPid(Ice.AsyncResult)">
             <summary>
             Get a server's system process id.
             The process id is operating
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The server's process id.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerAdminCategory(Ice.OptionalContext)">
             <summary>
             Get the category for server admin objects.
             You can manufacture a server admin
             proxy from the admin proxy by changing its identity: use the server ID as name
             and the returned category as category.
            
             </summary>
             <returns>The category for server admin objects.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerAdminCategoryAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerAdminCategory(Ice.OptionalContext)">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerAdminCategory(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerAdminCategory(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getServerAdminCategory(Ice.AsyncResult)">
            <summary>
            Get the category for server admin objects.
            You can manufacture a server admin
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The category for server admin objects.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerAdmin(System.String,Ice.OptionalContext)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>A proxy to the server's admin object
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getServerAdminAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerAdmin(System.String,Ice.OptionalContext)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerAdmin(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getServerAdmin(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getServerAdmin(Ice.AsyncResult)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy to the server's admin object
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.enableServer(System.String,System.Boolean,Ice.OptionalContext)">
             <summary>
             Enable or disable a server.
             A disabled server can't be started
             on demand or administratively. The enable state of the server
             is not persistent: if the node is shut down and restarted, the
             server will be enabled by default.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="enabled">True to enable the server, false to disable it.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.enableServerAsync(System.String,System.Boolean,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Enable or disable a server.
             A disabled server can't be started
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="enabled">True to enable the server, false to disable it.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_enableServer(System.String,System.Boolean,Ice.OptionalContext)">
             <summary>
             Enable or disable a server.
             A disabled server can't be started
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="enabled">True to enable the server, false to disable it.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_enableServer(System.String,System.Boolean,Ice.AsyncCallback,System.Object)">
             <summary>
             Enable or disable a server.
             A disabled server can't be started
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="enabled">True to enable the server, false to disable it.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_enableServer(System.String,System.Boolean,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Enable or disable a server.
             A disabled server can't be started
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="enabled">True to enable the server, false to disable it.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_enableServer(Ice.AsyncResult)">
            <summary>
            Enable or disable a server.
            A disabled server can't be started
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.isServerEnabled(System.String,Ice.OptionalContext)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>True if the server is enabled.
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.isServerEnabledAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_isServerEnabled(System.String,Ice.OptionalContext)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_isServerEnabled(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_isServerEnabled(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_isServerEnabled(Ice.AsyncResult)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>True if the server is enabled.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.startServer(System.String,Ice.OptionalContext)">
             <summary>
             Start a server and wait for its activation.
             </summary>
             <param name="id">The server id.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="ServerStartException">Raised if the server couldn't be
             started.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.startServerAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Start a server and wait for its activation.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_startServer(System.String,Ice.OptionalContext)">
             <summary>
             Start a server and wait for its activation.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_startServer(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Start a server and wait for its activation.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_startServer(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Start a server and wait for its activation.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_startServer(Ice.AsyncResult)">
            <summary>
            Start a server and wait for its activation.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.stopServer(System.String,Ice.OptionalContext)">
             <summary>
             Stop a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="ServerStopException">Raised if the server couldn't be
             stopped.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.stopServerAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Stop a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_stopServer(System.String,Ice.OptionalContext)">
             <summary>
             Stop a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_stopServer(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Stop a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_stopServer(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Stop a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_stopServer(Ice.AsyncResult)">
            <summary>
            Stop a server.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.patchServer(System.String,System.Boolean,Ice.OptionalContext)">
             <summary>
             Patch a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="shutdown">If true, servers depending on the data to patch
             will be shut down if necessary.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.
            
             </exception>
             <exception name="PatchException">Raised if the patch failed.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.patchServerAsync(System.String,System.Boolean,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Patch a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="shutdown">If true, servers depending on the data to patch
             will be shut down if necessary.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_patchServer(System.String,System.Boolean,Ice.OptionalContext)">
             <summary>
             Patch a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="shutdown">If true, servers depending on the data to patch
             will be shut down if necessary.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_patchServer(System.String,System.Boolean,Ice.AsyncCallback,System.Object)">
             <summary>
             Patch a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="shutdown">If true, servers depending on the data to patch
             will be shut down if necessary.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_patchServer(System.String,System.Boolean,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Patch a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="shutdown">If true, servers depending on the data to patch
             will be shut down if necessary.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_patchServer(Ice.AsyncResult)">
            <summary>
            Patch a server.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.sendSignal(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Send signal to a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="signal">The signal, for example SIGTERM or 15.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.
            
             </exception>
             <exception name="BadSignalException">Raised if the signal is not recognized
             by the target server.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.sendSignalAsync(System.String,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Send signal to a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="signal">The signal, for example SIGTERM or 15.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_sendSignal(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Send signal to a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="signal">The signal, for example SIGTERM or 15.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_sendSignal(System.String,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Send signal to a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="signal">The signal, for example SIGTERM or 15.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_sendSignal(System.String,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Send signal to a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="signal">The signal, for example SIGTERM or 15.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_sendSignal(Ice.AsyncResult)">
            <summary>
            Send signal to a server.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllServerIds(Ice.OptionalContext)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <returns>The server ids.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllServerIdsAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllServerIds(Ice.OptionalContext)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllServerIds(Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllServerIds(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAllServerIds(Ice.AsyncResult)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The server ids.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getAdapterInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <returns>A sequence of adapter information structures. If the
             given id refers to an adapter, this sequence will contain only
             one element. If the given id refers to a replica group, the
             sequence will contain the adapter information of each member of
             the replica group.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter or
             replica group doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAdapterInfoAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAdapterInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAdapterInfo(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAdapterInfo(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAdapterInfo(Ice.AsyncResult)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A sequence of adapter information structures. If the
             given id refers to an adapter, this sequence will contain only
             one element. If the given id refers to a replica group, the
             sequence will contain the adapter information of each member of
             the replica group.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.removeAdapter(System.String,Ice.OptionalContext)">
             <summary>
             Remove the adapter with the given id.
             </summary>
             <param name="id">The adapter id.
             </param>
             <exception name="AdapterNotExistException">Raised if the adapter doesn't
             exist.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment failed.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.removeAdapterAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeAdapter(System.String,Ice.OptionalContext)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeAdapter(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeAdapter(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="id">The adapter id.
            </param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_removeAdapter(Ice.AsyncResult)">
            <summary>
            Remove the adapter with the given id.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllAdapterIds(Ice.OptionalContext)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <returns>The adapter ids.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllAdapterIdsAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllAdapterIds(Ice.OptionalContext)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllAdapterIds(Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllAdapterIds(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAllAdapterIds(Ice.AsyncResult)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The adapter ids.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.addObject(Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Add an object to the object registry.
             IceGrid will get the
             object type by calling ice_id on the given proxy. The object
             must be reachable.
            
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <exception name="ObjectExistsException">Raised if the object is already
             registered.
            
             </exception>
             <exception name="DeploymentException">Raised if the object can't be
             added. This might be raised if the invocation on the proxy to
             get the object type failed.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.addObjectAsync(Ice.ObjectPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Add an object to the object registry.
             IceGrid will get the
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addObject(Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Add an object to the object registry.
             IceGrid will get the
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addObject(Ice.ObjectPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Add an object to the object registry.
             IceGrid will get the
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addObject(Ice.ObjectPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Add an object to the object registry.
             IceGrid will get the
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_addObject(Ice.AsyncResult)">
            <summary>
            Add an object to the object registry.
            IceGrid will get the
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.updateObject(Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Update an object in the object registry.
             Only objects added
             with this interface can be updated with this operation. Objects
             added with deployment descriptors should be updated with the
             deployment mechanism.
            
             </summary>
             <param name="obj">The object to be updated to the registry.
            
             </param>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.
            
             </exception>
             <exception name="DeploymentException">Raised if the object can't be
             updated. This might happen if the object was added with a
             deployment descriptor.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.updateObjectAsync(Ice.ObjectPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Update an object in the object registry.
             Only objects added
             </summary>
             <param name="obj">The object to be updated to the registry.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateObject(Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Update an object in the object registry.
             Only objects added
             </summary>
             <param name="obj">The object to be updated to the registry.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateObject(Ice.ObjectPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Update an object in the object registry.
             Only objects added
             </summary>
             <param name="obj">The object to be updated to the registry.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_updateObject(Ice.ObjectPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Update an object in the object registry.
             Only objects added
             </summary>
             <param name="obj">The object to be updated to the registry.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_updateObject(Ice.AsyncResult)">
            <summary>
            Update an object in the object registry.
            Only objects added
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.addObjectWithType(Ice.ObjectPrx,System.String,Ice.OptionalContext)">
             <summary>
             Add an object to the object registry and explicitly specify
             its type.
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="type">The object type.
            
             </param>
             <exception name="ObjectExistsException">Raised if the object is already
             registered.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment failed.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.addObjectWithTypeAsync(Ice.ObjectPrx,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Add an object to the object registry and explicitly specify
             its type.
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="type">The object type.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addObjectWithType(Ice.ObjectPrx,System.String,Ice.OptionalContext)">
             <summary>
             Add an object to the object registry and explicitly specify
             its type.
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="type">The object type.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addObjectWithType(Ice.ObjectPrx,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Add an object to the object registry and explicitly specify
             its type.
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="type">The object type.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_addObjectWithType(Ice.ObjectPrx,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Add an object to the object registry and explicitly specify
             its type.
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="type">The object type.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_addObjectWithType(Ice.AsyncResult)">
            <summary>
            Add an object to the object registry and explicitly specify
            its type.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.removeObject(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Remove an object from the object registry.
             Only objects added
             with this interface can be removed with this operation. Objects
             added with deployment descriptors should be removed with the
             deployment mechanism.
            
             </summary>
             <param name="id">The identity of the object to be removed from the
             registry.
            
             </param>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.
            
             </exception>
             <exception name="DeploymentException">Raised if the object can't be
             removed. This might happen if the object was added with a
             deployment descriptor.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.removeObjectAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Remove an object from the object registry.
             Only objects added
             </summary>
             <param name="id">The identity of the object to be removed from the
             registry.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeObject(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Remove an object from the object registry.
             Only objects added
             </summary>
             <param name="id">The identity of the object to be removed from the
             registry.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeObject(Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Remove an object from the object registry.
             Only objects added
             </summary>
             <param name="id">The identity of the object to be removed from the
             registry.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_removeObject(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Remove an object from the object registry.
             Only objects added
             </summary>
             <param name="id">The identity of the object to be removed from the
             registry.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_removeObject(Ice.AsyncResult)">
            <summary>
            Remove an object from the object registry.
            Only objects added
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getObjectInfo(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <returns>The object info.
            
             </returns>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getObjectInfoAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getObjectInfo(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getObjectInfo(Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getObjectInfo(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getObjectInfo(Ice.AsyncResult)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The object info.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getObjectInfosByType(System.String,Ice.OptionalContext)">
             <summary>
             Get the object info of all the registered objects with the
             given type.
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <returns>The object infos.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getObjectInfosByTypeAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the object info of all the registered objects with the
             given type.
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getObjectInfosByType(System.String,Ice.OptionalContext)">
             <summary>
             Get the object info of all the registered objects with the
             given type.
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getObjectInfosByType(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the object info of all the registered objects with the
             given type.
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getObjectInfosByType(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the object info of all the registered objects with the
             given type.
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getObjectInfosByType(Ice.AsyncResult)">
            <summary>
            Get the object info of all the registered objects with the
            given type.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The object infos.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllObjectInfos(System.String,Ice.OptionalContext)">
             <summary>
             Get the object info of all the registered objects whose stringified
             identities match the given expression.
             </summary>
             <param name="expr">The expression to match against the stringified
             identities of registered objects. The expression may contain
             a trailing wildcard (*) character.
            
             </param>
             <returns>All the object infos with a stringified identity
             matching the given expression.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllObjectInfosAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the object info of all the registered objects whose stringified
             identities match the given expression.
             </summary>
             <param name="expr">The expression to match against the stringified
             identities of registered objects. The expression may contain
             a trailing wildcard (*) character.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllObjectInfos(System.String,Ice.OptionalContext)">
             <summary>
             Get the object info of all the registered objects whose stringified
             identities match the given expression.
             </summary>
             <param name="expr">The expression to match against the stringified
             identities of registered objects. The expression may contain
             a trailing wildcard (*) character.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllObjectInfos(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the object info of all the registered objects whose stringified
             identities match the given expression.
             </summary>
             <param name="expr">The expression to match against the stringified
             identities of registered objects. The expression may contain
             a trailing wildcard (*) character.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllObjectInfos(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the object info of all the registered objects whose stringified
             identities match the given expression.
             </summary>
             <param name="expr">The expression to match against the stringified
             identities of registered objects. The expression may contain
             a trailing wildcard (*) character.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAllObjectInfos(Ice.AsyncResult)">
            <summary>
            Get the object info of all the registered objects whose stringified
            identities match the given expression.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>All the object infos with a stringified identity
            matching the given expression.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.pingNode(System.String,Ice.OptionalContext)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>true if the node ping succeeded, false otherwise.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.pingNodeAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_pingNode(System.String,Ice.OptionalContext)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_pingNode(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_pingNode(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_pingNode(Ice.AsyncResult)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>true if the node ping succeeded, false otherwise.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeLoad(System.String,Ice.OptionalContext)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node load information.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeLoadAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeLoad(System.String,Ice.OptionalContext)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeLoad(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeLoad(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getNodeLoad(Ice.AsyncResult)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The node load information.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node information.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeInfoAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeInfo(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeInfo(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getNodeInfo(Ice.AsyncResult)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The node information.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeAdmin(System.String,Ice.OptionalContext)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="name">The IceGrid node name
            
             </param>
             <returns>A proxy to the IceGrid node's admin object
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeAdminAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="name">The IceGrid node name
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeAdmin(System.String,Ice.OptionalContext)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="name">The IceGrid node name
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeAdmin(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="name">The IceGrid node name
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeAdmin(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="name">The IceGrid node name
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getNodeAdmin(Ice.AsyncResult)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy to the IceGrid node's admin object
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeProcessorSocketCount(System.String,Ice.OptionalContext)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             this can't be automatically determined and where the
             IceGrid.Node.ProcessorSocketCount property for the node is not
             set.
            
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The number of processor sockets or 1 if the number of
             sockets can't determined.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeProcessorSocketCountAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeProcessorSocketCount(System.String,Ice.OptionalContext)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeProcessorSocketCount(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeProcessorSocketCount(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getNodeProcessorSocketCount(Ice.AsyncResult)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The number of processor sockets or 1 if the number of
             sockets can't determined.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.shutdownNode(System.String,Ice.OptionalContext)">
             <summary>
             Shutdown an IceGrid node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.shutdownNodeAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Shutdown an IceGrid node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdownNode(System.String,Ice.OptionalContext)">
             <summary>
             Shutdown an IceGrid node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdownNode(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Shutdown an IceGrid node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdownNode(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Shutdown an IceGrid node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_shutdownNode(Ice.AsyncResult)">
            <summary>
            Shutdown an IceGrid node.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeHostname(System.String,Ice.OptionalContext)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node hostname.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getNodeHostnameAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeHostname(System.String,Ice.OptionalContext)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeHostname(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getNodeHostname(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getNodeHostname(Ice.AsyncResult)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The node hostname.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllNodeNames(Ice.OptionalContext)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <returns>The node names.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllNodeNamesAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllNodeNames(Ice.OptionalContext)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllNodeNames(Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllNodeNames(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAllNodeNames(Ice.AsyncResult)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The node names.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.pingRegistry(System.String,Ice.OptionalContext)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <returns>true if the registry ping succeeded, false otherwise.
            
             </returns>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.pingRegistryAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_pingRegistry(System.String,Ice.OptionalContext)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_pingRegistry(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_pingRegistry(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_pingRegistry(Ice.AsyncResult)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>true if the registry ping succeeded, false otherwise.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getRegistryInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <returns>The registry information.
            
             </returns>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getRegistryInfoAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getRegistryInfo(System.String,Ice.OptionalContext)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getRegistryInfo(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getRegistryInfo(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getRegistryInfo(Ice.AsyncResult)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The registry information.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.getRegistryAdmin(System.String,Ice.OptionalContext)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="name">The registry name
            
             </param>
             <returns>A proxy to the IceGrid registry's admin object
            
             </returns>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getRegistryAdminAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="name">The registry name
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getRegistryAdmin(System.String,Ice.OptionalContext)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="name">The registry name
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getRegistryAdmin(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="name">The registry name
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getRegistryAdmin(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="name">The registry name
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getRegistryAdmin(Ice.AsyncResult)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy to the IceGrid registry's admin object
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminPrx.shutdownRegistry(System.String,Ice.OptionalContext)">
             <summary>
             Shutdown an IceGrid registry.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry could not be
             reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.shutdownRegistryAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Shutdown an IceGrid registry.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdownRegistry(System.String,Ice.OptionalContext)">
             <summary>
             Shutdown an IceGrid registry.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdownRegistry(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Shutdown an IceGrid registry.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdownRegistry(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Shutdown an IceGrid registry.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_shutdownRegistry(Ice.AsyncResult)">
            <summary>
            Shutdown an IceGrid registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllRegistryNames(Ice.OptionalContext)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <returns>The registry names.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getAllRegistryNamesAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllRegistryNames(Ice.OptionalContext)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllRegistryNames(Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getAllRegistryNames(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getAllRegistryNames(Ice.AsyncResult)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The registry names.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.shutdown(Ice.OptionalContext)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.shutdownAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdown(Ice.OptionalContext)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdown(Ice.AsyncCallback,System.Object)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_shutdown(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_shutdown(Ice.AsyncResult)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getSliceChecksums(Ice.OptionalContext)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminPrx.getSliceChecksumsAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getSliceChecksums(Ice.OptionalContext)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getSliceChecksums(Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.begin_getSliceChecksums(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminPrx.end_getSliceChecksums(Ice.AsyncResult)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
        </member>
        <member name="T:IceGrid.FileIteratorPrx">
            <summary>
            This interface provides access to IceGrid log file contents.
            </summary>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.read(System.Int32,System.String[]@,Ice.OptionalContext)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="size">Specifies the maximum number of bytes to be
             received. The server will ensure that the returned message
             doesn't exceed the given size.
            
             </param>
             <param name="lines">The lines read from the file. If there was nothing to
             read from the file since the last call to read, an empty
             sequence is returned. The last line of the sequence is always
             incomplete (and therefore no '\n' should be added when writing
             the last line to the to the output device).
            
             </param>
             <returns>True if EOF is encountered.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if there was a problem
             to read lines from the file.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.readAsync(System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="size">Specifies the maximum number of bytes to be
             received. The server will ensure that the returned message
             doesn't exceed the given size.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.begin_read(System.Int32,Ice.OptionalContext)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="size">Specifies the maximum number of bytes to be
             received. The server will ensure that the returned message
             doesn't exceed the given size.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.begin_read(System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="size">Specifies the maximum number of bytes to be
             received. The server will ensure that the returned message
             doesn't exceed the given size.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.begin_read(System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="size">Specifies the maximum number of bytes to be
             received. The server will ensure that the returned message
             doesn't exceed the given size.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.end_read(System.String[]@,Ice.AsyncResult)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="lines">The lines read from the file. If there was nothing to
             read from the file since the last call to read, an empty
             sequence is returned. The last line of the sequence is always
             incomplete (and therefore no '\n' should be added when writing
             the last line to the to the output device).
            
             </param>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>True if EOF is encountered.
            
             </returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.destroy(Ice.OptionalContext)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.destroyAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.begin_destroy(Ice.OptionalContext)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.begin_destroy(Ice.AsyncCallback,System.Object)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.begin_destroy(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileIteratorPrx.end_destroy(Ice.AsyncResult)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryObserverPrx">
            <summary>
            This interface allows applications to monitor changes the state
            of the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.registryInit(IceGrid.RegistryInfo[],Ice.OptionalContext)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.registryInitAsync(IceGrid.RegistryInfo[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryInit(IceGrid.RegistryInfo[],Ice.OptionalContext)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryInit(IceGrid.RegistryInfo[],Ice.AsyncCallback,System.Object)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryInit(IceGrid.RegistryInfo[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.end_registryInit(Ice.AsyncResult)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.registryUp(IceGrid.RegistryInfo,Ice.OptionalContext)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.registryUpAsync(IceGrid.RegistryInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryUp(IceGrid.RegistryInfo,Ice.OptionalContext)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryUp(IceGrid.RegistryInfo,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryUp(IceGrid.RegistryInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.end_registryUp(Ice.AsyncResult)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.registryDown(System.String,Ice.OptionalContext)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.registryDownAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryDown(System.String,Ice.OptionalContext)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryDown(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.begin_registryDown(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryObserverPrx.end_registryDown(Ice.AsyncResult)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.NodeObserverPrx">
            <summary>
            The node observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            nodes.
            </summary>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.nodeInit(IceGrid.NodeDynamicInfo[],Ice.OptionalContext)">
             <summary>
             The nodeInit operation indicates the current state
             of nodes.
             It is called after the registration of an observer.
            
             </summary>
             <param name="nodes">The current state of the nodes.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.nodeInitAsync(IceGrid.NodeDynamicInfo[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeInit(IceGrid.NodeDynamicInfo[],Ice.OptionalContext)">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeInit(IceGrid.NodeDynamicInfo[],Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeInit(IceGrid.NodeDynamicInfo[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            </summary>
            <param name="nodes">The current state of the nodes.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.end_nodeInit(Ice.AsyncResult)">
            <summary>
            The nodeInit operation indicates the current state
            of nodes.
            It is called after the registration of an observer.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.nodeUp(IceGrid.NodeDynamicInfo,Ice.OptionalContext)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.nodeUpAsync(IceGrid.NodeDynamicInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeUp(IceGrid.NodeDynamicInfo,Ice.OptionalContext)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeUp(IceGrid.NodeDynamicInfo,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeUp(IceGrid.NodeDynamicInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.end_nodeUp(Ice.AsyncResult)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.nodeDown(System.String,Ice.OptionalContext)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.nodeDownAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeDown(System.String,Ice.OptionalContext)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeDown(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_nodeDown(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.end_nodeDown(Ice.AsyncResult)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.updateServer(System.String,IceGrid.ServerDynamicInfo,Ice.OptionalContext)">
             <summary>
             The updateServer operation is called to notify an observer that
             the state of a server changed.
             </summary>
             <param name="node">The node hosting the server.
            
             </param>
             <param name="updatedInfo">The new server state.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.updateServerAsync(System.String,IceGrid.ServerDynamicInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             The updateServer operation is called to notify an observer that
             the state of a server changed.
             </summary>
             <param name="node">The node hosting the server.
            
             </param>
             <param name="updatedInfo">The new server state.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_updateServer(System.String,IceGrid.ServerDynamicInfo,Ice.OptionalContext)">
             <summary>
             The updateServer operation is called to notify an observer that
             the state of a server changed.
             </summary>
             <param name="node">The node hosting the server.
            
             </param>
             <param name="updatedInfo">The new server state.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_updateServer(System.String,IceGrid.ServerDynamicInfo,Ice.AsyncCallback,System.Object)">
             <summary>
             The updateServer operation is called to notify an observer that
             the state of a server changed.
             </summary>
             <param name="node">The node hosting the server.
            
             </param>
             <param name="updatedInfo">The new server state.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_updateServer(System.String,IceGrid.ServerDynamicInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             The updateServer operation is called to notify an observer that
             the state of a server changed.
             </summary>
             <param name="node">The node hosting the server.
            
             </param>
             <param name="updatedInfo">The new server state.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.end_updateServer(Ice.AsyncResult)">
            <summary>
            The updateServer operation is called to notify an observer that
            the state of a server changed.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.updateAdapter(System.String,IceGrid.AdapterDynamicInfo,Ice.OptionalContext)">
             <summary>
             The updateAdapter operation is called to notify an observer that
             the state of an adapter changed.
             </summary>
             <param name="node">The node hosting the adapter.
            
             </param>
             <param name="updatedInfo">The new adapter state.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.updateAdapterAsync(System.String,IceGrid.AdapterDynamicInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             The updateAdapter operation is called to notify an observer that
             the state of an adapter changed.
             </summary>
             <param name="node">The node hosting the adapter.
            
             </param>
             <param name="updatedInfo">The new adapter state.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_updateAdapter(System.String,IceGrid.AdapterDynamicInfo,Ice.OptionalContext)">
             <summary>
             The updateAdapter operation is called to notify an observer that
             the state of an adapter changed.
             </summary>
             <param name="node">The node hosting the adapter.
            
             </param>
             <param name="updatedInfo">The new adapter state.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_updateAdapter(System.String,IceGrid.AdapterDynamicInfo,Ice.AsyncCallback,System.Object)">
             <summary>
             The updateAdapter operation is called to notify an observer that
             the state of an adapter changed.
             </summary>
             <param name="node">The node hosting the adapter.
            
             </param>
             <param name="updatedInfo">The new adapter state.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.begin_updateAdapter(System.String,IceGrid.AdapterDynamicInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             The updateAdapter operation is called to notify an observer that
             the state of an adapter changed.
             </summary>
             <param name="node">The node hosting the adapter.
            
             </param>
             <param name="updatedInfo">The new adapter state.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.NodeObserverPrx.end_updateAdapter(Ice.AsyncResult)">
            <summary>
            The updateAdapter operation is called to notify an observer that
            the state of an adapter changed.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ApplicationObserverPrx">
            <summary>
            The database observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            registry database.
            </summary>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationInit(System.Int32,IceGrid.ApplicationInfo[],Ice.OptionalContext)">
             <summary>
             applicationInit is called after the registration
             of an observer to indicate the state of the registry.
             </summary>
             <param name="serial">The current serial number of the registry
             database. This serial number allows observers to make sure that
             their internal state is synchronized with the registry.
            
             </param>
             <param name="applications">The applications currently registered with
             the registry.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationInitAsync(System.Int32,IceGrid.ApplicationInfo[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             applicationInit is called after the registration
             of an observer to indicate the state of the registry.
             </summary>
             <param name="serial">The current serial number of the registry
             database. This serial number allows observers to make sure that
             their internal state is synchronized with the registry.
            
             </param>
             <param name="applications">The applications currently registered with
             the registry.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationInit(System.Int32,IceGrid.ApplicationInfo[],Ice.OptionalContext)">
             <summary>
             applicationInit is called after the registration
             of an observer to indicate the state of the registry.
             </summary>
             <param name="serial">The current serial number of the registry
             database. This serial number allows observers to make sure that
             their internal state is synchronized with the registry.
            
             </param>
             <param name="applications">The applications currently registered with
             the registry.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationInit(System.Int32,IceGrid.ApplicationInfo[],Ice.AsyncCallback,System.Object)">
             <summary>
             applicationInit is called after the registration
             of an observer to indicate the state of the registry.
             </summary>
             <param name="serial">The current serial number of the registry
             database. This serial number allows observers to make sure that
             their internal state is synchronized with the registry.
            
             </param>
             <param name="applications">The applications currently registered with
             the registry.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationInit(System.Int32,IceGrid.ApplicationInfo[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             applicationInit is called after the registration
             of an observer to indicate the state of the registry.
             </summary>
             <param name="serial">The current serial number of the registry
             database. This serial number allows observers to make sure that
             their internal state is synchronized with the registry.
            
             </param>
             <param name="applications">The applications currently registered with
             the registry.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.end_applicationInit(Ice.AsyncResult)">
            <summary>
            applicationInit is called after the registration
            of an observer to indicate the state of the registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationAdded(System.Int32,IceGrid.ApplicationInfo,Ice.OptionalContext)">
             <summary>
             The applicationAdded operation is called to notify an observer
             that an application was added.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the new application.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationAddedAsync(System.Int32,IceGrid.ApplicationInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             The applicationAdded operation is called to notify an observer
             that an application was added.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the new application.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationAdded(System.Int32,IceGrid.ApplicationInfo,Ice.OptionalContext)">
             <summary>
             The applicationAdded operation is called to notify an observer
             that an application was added.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the new application.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationAdded(System.Int32,IceGrid.ApplicationInfo,Ice.AsyncCallback,System.Object)">
             <summary>
             The applicationAdded operation is called to notify an observer
             that an application was added.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the new application.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationAdded(System.Int32,IceGrid.ApplicationInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             The applicationAdded operation is called to notify an observer
             that an application was added.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the new application.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.end_applicationAdded(Ice.AsyncResult)">
            <summary>
            The applicationAdded operation is called to notify an observer
            that an application was added.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationRemoved(System.Int32,System.String,Ice.OptionalContext)">
             <summary>
             The applicationRemoved operation is called to notify an observer
             that an application was removed.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="name">The name of the application that was removed.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationRemovedAsync(System.Int32,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             The applicationRemoved operation is called to notify an observer
             that an application was removed.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="name">The name of the application that was removed.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationRemoved(System.Int32,System.String,Ice.OptionalContext)">
             <summary>
             The applicationRemoved operation is called to notify an observer
             that an application was removed.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="name">The name of the application that was removed.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationRemoved(System.Int32,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             The applicationRemoved operation is called to notify an observer
             that an application was removed.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="name">The name of the application that was removed.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationRemoved(System.Int32,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             The applicationRemoved operation is called to notify an observer
             that an application was removed.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="name">The name of the application that was removed.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.end_applicationRemoved(Ice.AsyncResult)">
            <summary>
            The applicationRemoved operation is called to notify an observer
            that an application was removed.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.OptionalContext)">
             <summary>
             The applicationUpdated operation is called to notify an observer
             that an application was updated.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the update.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.applicationUpdatedAsync(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             The applicationUpdated operation is called to notify an observer
             that an application was updated.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the update.</param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.OptionalContext)">
             <summary>
             The applicationUpdated operation is called to notify an observer
             that an application was updated.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the update.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.AsyncCallback,System.Object)">
             <summary>
             The applicationUpdated operation is called to notify an observer
             that an application was updated.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the update.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.begin_applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             The applicationUpdated operation is called to notify an observer
             that an application was updated.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the update.</param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ApplicationObserverPrx.end_applicationUpdated(Ice.AsyncResult)">
            <summary>
            The applicationUpdated operation is called to notify an observer
            that an application was updated.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdapterObserverPrx">
            <summary>
            This interface allows applications to monitor the state of object
            adapters that are registered with IceGrid.
            </summary>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterInit(IceGrid.AdapterInfo[],Ice.OptionalContext)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterInitAsync(IceGrid.AdapterInfo[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterInit(IceGrid.AdapterInfo[],Ice.OptionalContext)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterInit(IceGrid.AdapterInfo[],Ice.AsyncCallback,System.Object)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterInit(IceGrid.AdapterInfo[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.end_adapterInit(Ice.AsyncResult)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterAdded(IceGrid.AdapterInfo,Ice.OptionalContext)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterAddedAsync(IceGrid.AdapterInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterAdded(IceGrid.AdapterInfo,Ice.OptionalContext)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterAdded(IceGrid.AdapterInfo,Ice.AsyncCallback,System.Object)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterAdded(IceGrid.AdapterInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.end_adapterAdded(Ice.AsyncResult)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterUpdated(IceGrid.AdapterInfo,Ice.OptionalContext)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterUpdatedAsync(IceGrid.AdapterInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterUpdated(IceGrid.AdapterInfo,Ice.OptionalContext)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterUpdated(IceGrid.AdapterInfo,Ice.AsyncCallback,System.Object)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterUpdated(IceGrid.AdapterInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.end_adapterUpdated(Ice.AsyncResult)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterRemoved(System.String,Ice.OptionalContext)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.adapterRemovedAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterRemoved(System.String,Ice.OptionalContext)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterRemoved(System.String,Ice.AsyncCallback,System.Object)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.begin_adapterRemoved(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdapterObserverPrx.end_adapterRemoved(Ice.AsyncResult)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ObjectObserverPrx">
            <summary>
            This interface allows applications to monitor IceGrid well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectInit(IceGrid.ObjectInfo[],Ice.OptionalContext)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectInitAsync(IceGrid.ObjectInfo[],Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectInit(IceGrid.ObjectInfo[],Ice.OptionalContext)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectInit(IceGrid.ObjectInfo[],Ice.AsyncCallback,System.Object)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectInit(IceGrid.ObjectInfo[],Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.end_objectInit(Ice.AsyncResult)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectAdded(IceGrid.ObjectInfo,Ice.OptionalContext)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectAddedAsync(IceGrid.ObjectInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectAdded(IceGrid.ObjectInfo,Ice.OptionalContext)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectAdded(IceGrid.ObjectInfo,Ice.AsyncCallback,System.Object)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectAdded(IceGrid.ObjectInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.end_objectAdded(Ice.AsyncResult)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectUpdated(IceGrid.ObjectInfo,Ice.OptionalContext)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectUpdatedAsync(IceGrid.ObjectInfo,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectUpdated(IceGrid.ObjectInfo,Ice.OptionalContext)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectUpdated(IceGrid.ObjectInfo,Ice.AsyncCallback,System.Object)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectUpdated(IceGrid.ObjectInfo,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.end_objectUpdated(Ice.AsyncResult)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectRemoved(Ice.Identity,Ice.OptionalContext)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.objectRemovedAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectRemoved(Ice.Identity,Ice.OptionalContext)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectRemoved(Ice.Identity,Ice.AsyncCallback,System.Object)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.begin_objectRemoved(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.ObjectObserverPrx.end_objectRemoved(Ice.AsyncResult)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdminSessionPrx">
             <summary>
             Used by administrative clients to view,
             update, and receive observer updates from the IceGrid
             registry.
             Admin sessions are created either via the Registry
             object or via the registry admin SessionManager object.
            
             </summary>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.keepAlive(Ice.OptionalContext)">
             <summary>
             Keep the session alive.
             Clients should call this operation
             regularly to prevent the server from reaping the session.
            
             </summary>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.keepAliveAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_keepAlive(Ice.OptionalContext)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_keepAlive(Ice.AsyncCallback,System.Object)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_keepAlive(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_keepAlive(Ice.AsyncResult)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.getAdmin(Ice.OptionalContext)">
             <summary>
             Get the admin interface.
             The admin object returned by this
             operation can only be accessed by the session.
            
             </summary>
             <returns>The admin interface proxy.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.getAdminAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the admin interface.
            The admin object returned by this
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getAdmin(Ice.OptionalContext)">
            <summary>
            Get the admin interface.
            The admin object returned by this
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getAdmin(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the admin interface.
            The admin object returned by this
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getAdmin(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the admin interface.
            The admin object returned by this
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_getAdmin(Ice.AsyncResult)">
            <summary>
            Get the admin interface.
            The admin object returned by this
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The admin interface proxy.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.getAdminCallbackTemplate(Ice.OptionalContext)">
             <summary>
             Get a "template" proxy for admin callback objects.
             An Admin client uses this proxy to set the category of its callback
             objects, and the published endpoints of the object adapter hosting
             the admin callback objects.
            
             </summary>
             <returns>A template proxy. The returned proxy is null when the Admin
             session was established using Glacier2.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.getAdminCallbackTemplateAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getAdminCallbackTemplate(Ice.OptionalContext)">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getAdminCallbackTemplate(Ice.AsyncCallback,System.Object)">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getAdminCallbackTemplate(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_getAdminCallbackTemplate(Ice.AsyncResult)">
            <summary>
            Get a "template" proxy for admin callback objects.
            An Admin client uses this proxy to set the category of its callback
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>A template proxy. The returned proxy is null when the Admin
            session was established using Glacier2.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.OptionalContext)">
             <summary>
             Set the observer proxies that receive
             notifications when the state of the registry
             or nodes changes.
             </summary>
             <param name="registryObs">The registry observer.
            
             </param>
             <param name="nodeObs">The node observer.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <exception name="ObserverAlreadyRegisteredException">Raised if an
             observer is already registered with this registry.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.setObserversAsync(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Set the observer proxies that receive
             notifications when the state of the registry
             or nodes changes.
             </summary>
             <param name="registryObs">The registry observer.
            
             </param>
             <param name="nodeObs">The node observer.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.OptionalContext)">
             <summary>
             Set the observer proxies that receive
             notifications when the state of the registry
             or nodes changes.
             </summary>
             <param name="registryObs">The registry observer.
            
             </param>
             <param name="nodeObs">The node observer.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the observer proxies that receive
             notifications when the state of the registry
             or nodes changes.
             </summary>
             <param name="registryObs">The registry observer.
            
             </param>
             <param name="nodeObs">The node observer.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the observer proxies that receive
             notifications when the state of the registry
             or nodes changes.
             </summary>
             <param name="registryObs">The registry observer.
            
             </param>
             <param name="nodeObs">The node observer.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_setObservers(Ice.AsyncResult)">
            <summary>
            Set the observer proxies that receive
            notifications when the state of the registry
            or nodes changes.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.OptionalContext)">
             <summary>
             Set the observer identities that receive
             notifications the state of the registry
             or nodes changes.
             This operation should be used by clients that
             are using a bidirectional connection to communicate with the
             session.
            
             </summary>
             <param name="registryObs">The registry observer identity.
            
             </param>
             <param name="nodeObs">The node observer identity.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <exception name="ObserverAlreadyRegisteredException">Raised if an
             observer is already registered with this registry.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.setObserversByIdentityAsync(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Set the observer identities that receive
             notifications the state of the registry
             or nodes changes.
             This operation should be used by clients that
             </summary>
             <param name="registryObs">The registry observer identity.
            
             </param>
             <param name="nodeObs">The node observer identity.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.OptionalContext)">
             <summary>
             Set the observer identities that receive
             notifications the state of the registry
             or nodes changes.
             This operation should be used by clients that
             </summary>
             <param name="registryObs">The registry observer identity.
            
             </param>
             <param name="nodeObs">The node observer identity.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the observer identities that receive
             notifications the state of the registry
             or nodes changes.
             This operation should be used by clients that
             </summary>
             <param name="registryObs">The registry observer identity.
            
             </param>
             <param name="nodeObs">The node observer identity.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Set the observer identities that receive
             notifications the state of the registry
             or nodes changes.
             This operation should be used by clients that
             </summary>
             <param name="registryObs">The registry observer identity.
            
             </param>
             <param name="nodeObs">The node observer identity.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_setObserversByIdentity(Ice.AsyncResult)">
            <summary>
            Set the observer identities that receive
            notifications the state of the registry
            or nodes changes.
            This operation should be used by clients that
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.startUpdate(Ice.OptionalContext)">
             <summary>
             Acquires an exclusive lock to start updating the registry applications.
             </summary>
             <returns>The current serial.
            
             </returns>
             <exception name="AccessDeniedException">Raised if the exclusive lock can't be
             acquired. This might happen if the lock is currently acquired by
             another session.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.startUpdateAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_startUpdate(Ice.OptionalContext)">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_startUpdate(Ice.AsyncCallback,System.Object)">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_startUpdate(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Acquires an exclusive lock to start updating the registry applications.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_startUpdate(Ice.AsyncResult)">
             <summary>
             Acquires an exclusive lock to start updating the registry applications.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The current serial.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.finishUpdate(Ice.OptionalContext)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <exception name="AccessDeniedException">Raised if the session doesn't hold the
            exclusive lock.</exception>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.finishUpdateAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_finishUpdate(Ice.OptionalContext)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_finishUpdate(Ice.AsyncCallback,System.Object)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_finishUpdate(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_finishUpdate(Ice.AsyncResult)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.getReplicaName(Ice.OptionalContext)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <returns>The replica name of the registry.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.getReplicaNameAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getReplicaName(Ice.OptionalContext)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getReplicaName(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_getReplicaName(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_getReplicaName(Ice.AsyncResult)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The replica name of the registry.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openServerLog(System.String,System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given server log file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="path">The path of the log file. A log file can be opened
             only if it's declared in the server or service deployment
             descriptor.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openServerLogAsync(System.String,System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given server log file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="path">The path of the log file. A log file can be opened
             only if it's declared in the server or service deployment
             descriptor.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerLog(System.String,System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given server log file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="path">The path of the log file. A log file can be opened
             only if it's declared in the server or service deployment
             descriptor.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerLog(System.String,System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given server log file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="path">The path of the log file. A log file can be opened
             only if it's declared in the server or service deployment
             descriptor.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerLog(System.String,System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given server log file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="path">The path of the log file. A log file can be opened
             only if it's declared in the server or service deployment
             descriptor.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openServerLog(Ice.AsyncResult)">
             <summary>
             Open the given server log file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openServerStdErr(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openServerStdErrAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerStdErr(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerStdErr(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerStdErr(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openServerStdErr(Ice.AsyncResult)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openServerStdOut(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openServerStdOutAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerStdOut(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerStdOut(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openServerStdOut(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openServerStdOut(Ice.AsyncResult)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openNodeStdErr(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openNodeStdErrAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openNodeStdErr(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openNodeStdErr(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openNodeStdErr(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openNodeStdErr(Ice.AsyncResult)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openNodeStdOut(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openNodeStdOutAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openNodeStdOut(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openNodeStdOut(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openNodeStdOut(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openNodeStdOut(Ice.AsyncResult)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openRegistryStdErr(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="RegistryNotExistException">Raised if the registry
             doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry
             could not be reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openRegistryStdErrAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openRegistryStdErr(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openRegistryStdErr(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openRegistryStdErr(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openRegistryStdErr(Ice.AsyncResult)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openRegistryStdOut(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="RegistryNotExistException">Raised if the registry
             doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry
             could not be reached.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.openRegistryStdOutAsync(System.String,System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openRegistryStdOut(System.String,System.Int32,Ice.OptionalContext)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openRegistryStdOut(System.String,System.Int32,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.begin_openRegistryStdOut(System.String,System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.AdminSessionPrx.end_openRegistryStdOut(Ice.AsyncResult)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>An iterator to read the file.
            
             </returns>
        </member>
        <member name="T:IceGrid.AdminOperations_">
            <summary>
            The IceGrid administrative interface.
            Allowing access to this interface
            is a security risk! Please see the IceGrid documentation
            for further information.
            </summary>
        </member>
        <member name="M:IceGrid.AdminOperations_.addApplication(IceGrid.ApplicationDescriptor,Ice.Current)">
             <summary>
             Add an application to IceGrid.
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.syncApplication(IceGrid.ApplicationDescriptor,Ice.Current)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             with this new descriptor.
            
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.updateApplication(IceGrid.ApplicationUpdateDescriptor,Ice.Current)">
             <summary>
             Update a deployed application with the given update application
             descriptor.
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.syncApplicationWithoutRestart(IceGrid.ApplicationDescriptor,Ice.Current)">
             <summary>
             Synchronize a deployed application with the given application
             descriptor.
             This operation will replace the current descriptor
             with this new descriptor only if no server restarts are
             necessary for the update of the application. If some servers
             need to be restarted, the synchronization is rejected with a
             DeploymentException.
            
             </summary>
             <param name="descriptor">The application descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.updateApplicationWithoutRestart(IceGrid.ApplicationUpdateDescriptor,Ice.Current)">
             <summary>
             Update a deployed application with the given update application
             descriptor only if no server restarts are necessary for the
             update of the application.
             If some servers need to be
             restarted, the synchronization is rejected with a
             DeploymentException.
            
             </summary>
             <param name="descriptor">The update descriptor.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.removeApplication(System.String,Ice.Current)">
             <summary>
             Remove an application from IceGrid.
             </summary>
             <param name="name">The application name.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.instantiateServer(System.String,System.String,IceGrid.ServerInstanceDescriptor,Ice.Current)">
             <summary>
             Instantiate a server template from an application on the given
             node.
             </summary>
             <param name="application">The application name.
            
             </param>
             <param name="node">The name of the node where the server will be
             deployed.
            
             </param>
             <param name="desc">The descriptor of the server instance to deploy.
            
             </param>
             <exception name="AccessDeniedException">Raised if the session doesn't
             hold the exclusive lock or if another session is holding the
             lock.
            
             </exception>
             <exception name="DeploymentException">Raised if server instantiation
             failed.
            
             </exception>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.patchApplicationAsync(System.String,System.Boolean,Ice.Current)">
             <summary>
             Patch the given application data.
             </summary>
             <param name="name">The application name.
            
             </param>
             <param name="shutdown">If true, the servers depending on the data to
             patch will be shut down if necessary.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminOperations_.getApplicationInfo(System.String,Ice.Current)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <returns>The application descriptor.
            
             </returns>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getDefaultApplicationDescriptor(Ice.Current)">
             <summary>
             Get the default application descriptor.
             </summary>
             <returns>The default application descriptor.
            
             </returns>
             <exception name="DeploymentException">Raised if the default application
             descriptor can't be accessed or is invalid.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllApplicationNames(Ice.Current)">
            <summary>
            Get all the IceGrid applications currently registered.
            </summary>
            <returns>The application names.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerInfo(System.String,Ice.Current)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <returns>The server information.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerState(System.String,Ice.Current)">
             <summary>
             Get a server's state.
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>The server state.
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerPid(System.String,Ice.Current)">
             <summary>
             Get a server's system process id.
             The process id is operating
             system dependent.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>The server's process id.
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerAdminCategory(Ice.Current)">
             <summary>
             Get the category for server admin objects.
             You can manufacture a server admin
             proxy from the admin proxy by changing its identity: use the server ID as name
             and the returned category as category.
            
             </summary>
             <returns>The category for server admin objects.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getServerAdmin(System.String,Ice.Current)">
             <summary>
             Get a proxy to the server's admin object.
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>A proxy to the server's admin object
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.enableServer(System.String,System.Boolean,Ice.Current)">
             <summary>
             Enable or disable a server.
             A disabled server can't be started
             on demand or administratively. The enable state of the server
             is not persistent: if the node is shut down and restarted, the
             server will be enabled by default.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="enabled">True to enable the server, false to disable it.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.isServerEnabled(System.String,Ice.Current)">
             <summary>
             Check if the server is enabled or disabled.
             </summary>
             <param name="id">The server id.
            
             </param>
             <returns>True if the server is enabled.
            
             </returns>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.startServerAsync(System.String,Ice.Current)">
             <summary>
             Start a server and wait for its activation.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminOperations_.stopServerAsync(System.String,Ice.Current)">
             <summary>
             Stop a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminOperations_.patchServerAsync(System.String,System.Boolean,Ice.Current)">
             <summary>
             Patch a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="shutdown">If true, servers depending on the data to patch
             will be shut down if necessary.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.AdminOperations_.sendSignal(System.String,System.String,Ice.Current)">
             <summary>
             Send signal to a server.
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="signal">The signal, for example SIGTERM or 15.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.
            
             </exception>
             <exception name="BadSignalException">Raised if the signal is not recognized
             by the target server.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllServerIds(Ice.Current)">
            <summary>
            Get all the server ids registered with IceGrid.
            </summary>
            <returns>The server ids.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAdapterInfo(System.String,Ice.Current)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <returns>A sequence of adapter information structures. If the
             given id refers to an adapter, this sequence will contain only
             one element. If the given id refers to a replica group, the
             sequence will contain the adapter information of each member of
             the replica group.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter or
             replica group doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.removeAdapter(System.String,Ice.Current)">
             <summary>
             Remove the adapter with the given id.
             </summary>
             <param name="id">The adapter id.
             </param>
             <exception name="AdapterNotExistException">Raised if the adapter doesn't
             exist.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment failed.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllAdapterIds(Ice.Current)">
            <summary>
            Get all the adapter ids registered with IceGrid.
            </summary>
            <returns>The adapter ids.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.addObject(Ice.ObjectPrx,Ice.Current)">
             <summary>
             Add an object to the object registry.
             IceGrid will get the
             object type by calling ice_id on the given proxy. The object
             must be reachable.
            
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <exception name="ObjectExistsException">Raised if the object is already
             registered.
            
             </exception>
             <exception name="DeploymentException">Raised if the object can't be
             added. This might be raised if the invocation on the proxy to
             get the object type failed.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.updateObject(Ice.ObjectPrx,Ice.Current)">
             <summary>
             Update an object in the object registry.
             Only objects added
             with this interface can be updated with this operation. Objects
             added with deployment descriptors should be updated with the
             deployment mechanism.
            
             </summary>
             <param name="obj">The object to be updated to the registry.
            
             </param>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.
            
             </exception>
             <exception name="DeploymentException">Raised if the object can't be
             updated. This might happen if the object was added with a
             deployment descriptor.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.addObjectWithType(Ice.ObjectPrx,System.String,Ice.Current)">
             <summary>
             Add an object to the object registry and explicitly specify
             its type.
             </summary>
             <param name="obj">The object to be added to the registry.
            
             </param>
             <param name="type">The object type.
            
             </param>
             <exception name="ObjectExistsException">Raised if the object is already
             registered.
            
             </exception>
             <exception name="DeploymentException">Raised if application deployment failed.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.removeObject(Ice.Identity,Ice.Current)">
             <summary>
             Remove an object from the object registry.
             Only objects added
             with this interface can be removed with this operation. Objects
             added with deployment descriptors should be removed with the
             deployment mechanism.
            
             </summary>
             <param name="id">The identity of the object to be removed from the
             registry.
            
             </param>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.
            
             </exception>
             <exception name="DeploymentException">Raised if the object can't be
             removed. This might happen if the object was added with a
             deployment descriptor.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getObjectInfo(Ice.Identity,Ice.Current)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <returns>The object info.
            
             </returns>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getObjectInfosByType(System.String,Ice.Current)">
             <summary>
             Get the object info of all the registered objects with the
             given type.
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <returns>The object infos.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllObjectInfos(System.String,Ice.Current)">
             <summary>
             Get the object info of all the registered objects whose stringified
             identities match the given expression.
             </summary>
             <param name="expr">The expression to match against the stringified
             identities of registered objects. The expression may contain
             a trailing wildcard (*) character.
            
             </param>
             <returns>All the object infos with a stringified identity
             matching the given expression.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.pingNode(System.String,Ice.Current)">
             <summary>
             Ping an IceGrid node to see if it is active.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>true if the node ping succeeded, false otherwise.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeLoad(System.String,Ice.Current)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node load information.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeInfo(System.String,Ice.Current)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node information.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeAdmin(System.String,Ice.Current)">
             <summary>
             Get a proxy to the IceGrid node's admin object.
             </summary>
             <param name="name">The IceGrid node name
            
             </param>
             <returns>A proxy to the IceGrid node's admin object
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeProcessorSocketCount(System.String,Ice.Current)">
             <summary>
             Get the number of physical processor sockets for the machine
             running the node with the given name.
             Note that this method will return 1 on operating systems where
             this can't be automatically determined and where the
             IceGrid.Node.ProcessorSocketCount property for the node is not
             set.
            
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The number of processor sockets or 1 if the number of
             sockets can't determined.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.shutdownNode(System.String,Ice.Current)">
             <summary>
             Shutdown an IceGrid node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getNodeHostname(System.String,Ice.Current)">
             <summary>
             Get the hostname of this node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node hostname.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllNodeNames(Ice.Current)">
            <summary>
            Get all the IceGrid nodes currently registered.
            </summary>
            <returns>The node names.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.pingRegistry(System.String,Ice.Current)">
             <summary>
             Ping an IceGrid registry to see if it is active.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <returns>true if the registry ping succeeded, false otherwise.
            
             </returns>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getRegistryInfo(System.String,Ice.Current)">
             <summary>
             Get the registry information for the registry with the given name.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <returns>The registry information.
            
             </returns>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getRegistryAdmin(System.String,Ice.Current)">
             <summary>
             Get a proxy to the IceGrid registry's admin object.
             </summary>
             <param name="name">The registry name
            
             </param>
             <returns>A proxy to the IceGrid registry's admin object
            
             </returns>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.shutdownRegistry(System.String,Ice.Current)">
             <summary>
             Shutdown an IceGrid registry.
             </summary>
             <param name="name">The registry name.
            
             </param>
             <exception name="RegistryNotExistException">Raised if the registry doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry could not be
             reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getAllRegistryNames(Ice.Current)">
            <summary>
            Get all the IceGrid registries currently registered.
            </summary>
            <returns>The registry names.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.shutdown(Ice.Current)">
            <summary>
            Shut down the IceGrid registry.
            </summary>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminOperations_.getSliceChecksums(Ice.Current)">
            <summary>
            Returns the checksums for the IceGrid Slice definitions.
            </summary>
            <returns>A dictionary mapping Slice type ids to their checksums.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.FileIteratorOperations_">
            <summary>
            This interface provides access to IceGrid log file contents.
            </summary>
        </member>
        <member name="M:IceGrid.FileIteratorOperations_.read(System.Int32,System.String[]@,Ice.Current)">
             <summary>
             Read lines from the log file.
             </summary>
             <param name="size">Specifies the maximum number of bytes to be
             received. The server will ensure that the returned message
             doesn't exceed the given size.
            
             </param>
             <param name="lines">The lines read from the file. If there was nothing to
             read from the file since the last call to read, an empty
             sequence is returned. The last line of the sequence is always
             incomplete (and therefore no '\n' should be added when writing
             the last line to the to the output device).
            
             </param>
             <returns>True if EOF is encountered.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if there was a problem
             to read lines from the file.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.FileIteratorOperations_.destroy(Ice.Current)">
            <summary>
            Destroy the iterator.
            </summary>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryObserverOperations_">
            <summary>
            This interface allows applications to monitor changes the state
            of the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryObserverOperations_.registryInit(IceGrid.RegistryInfo[],Ice.Current)">
            <summary>
            The registryInit operation is called after registration of
            an observer to indicate the state of the registries.
            </summary>
            <param name="registries">The current state of the registries.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverOperations_.registryUp(IceGrid.RegistryInfo,Ice.Current)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryObserverOperations_.registryDown(System.String,Ice.Current)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.NodeObserverOperations_">
            <summary>
            The node observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            nodes.
            </summary>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.nodeInit(IceGrid.NodeDynamicInfo[],Ice.Current)">
             <summary>
             The nodeInit operation indicates the current state
             of nodes.
             It is called after the registration of an observer.
            
             </summary>
             <param name="nodes">The current state of the nodes.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.nodeUp(IceGrid.NodeDynamicInfo,Ice.Current)">
            <summary>
            The nodeUp operation is called to notify an observer that a node
            came up.
            </summary>
            <param name="node">The node state.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.nodeDown(System.String,Ice.Current)">
            <summary>
            The nodeDown operation is called to notify an observer that a node
            went down.
            </summary>
            <param name="name">The node name.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.updateServer(System.String,IceGrid.ServerDynamicInfo,Ice.Current)">
             <summary>
             The updateServer operation is called to notify an observer that
             the state of a server changed.
             </summary>
             <param name="node">The node hosting the server.
            
             </param>
             <param name="updatedInfo">The new server state.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.NodeObserverOperations_.updateAdapter(System.String,IceGrid.AdapterDynamicInfo,Ice.Current)">
             <summary>
             The updateAdapter operation is called to notify an observer that
             the state of an adapter changed.
             </summary>
             <param name="node">The node hosting the adapter.
            
             </param>
             <param name="updatedInfo">The new adapter state.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ApplicationObserverOperations_">
            <summary>
            The database observer interface.
            Observers should implement this
            interface to receive information about the state of the IceGrid
            registry database.
            </summary>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationInit(System.Int32,IceGrid.ApplicationInfo[],Ice.Current)">
             <summary>
             applicationInit is called after the registration
             of an observer to indicate the state of the registry.
             </summary>
             <param name="serial">The current serial number of the registry
             database. This serial number allows observers to make sure that
             their internal state is synchronized with the registry.
            
             </param>
             <param name="applications">The applications currently registered with
             the registry.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationAdded(System.Int32,IceGrid.ApplicationInfo,Ice.Current)">
             <summary>
             The applicationAdded operation is called to notify an observer
             that an application was added.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the new application.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationRemoved(System.Int32,System.String,Ice.Current)">
             <summary>
             The applicationRemoved operation is called to notify an observer
             that an application was removed.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="name">The name of the application that was removed.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ApplicationObserverOperations_.applicationUpdated(System.Int32,IceGrid.ApplicationUpdateInfo,Ice.Current)">
             <summary>
             The applicationUpdated operation is called to notify an observer
             that an application was updated.
             </summary>
             <param name="serial">The new serial number of the registry database.
            
             </param>
             <param name="desc">The descriptor of the update.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdapterObserverOperations_">
            <summary>
            This interface allows applications to monitor the state of object
            adapters that are registered with IceGrid.
            </summary>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterInit(IceGrid.AdapterInfo[],Ice.Current)">
            <summary>
            adapterInit is called after registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="adpts">The adapters that were dynamically registered
            with the registry (not through the deployment mechanism).</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterAdded(IceGrid.AdapterInfo,Ice.Current)">
            <summary>
            The adapterAdded operation is called to notify an observer when
            a dynamically-registered adapter was added.
            </summary>
            <param name="info">The details of the new adapter.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterUpdated(IceGrid.AdapterInfo,Ice.Current)">
            <summary>
            The adapterUpdated operation is called to notify an observer when
            a dynamically-registered adapter was updated.
            </summary>
            <param name="info">The details of the updated adapter.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdapterObserverOperations_.adapterRemoved(System.String,Ice.Current)">
            <summary>
            The adapterRemoved operation is called to notify an observer when
            a dynamically-registered adapter was removed.
            </summary>
            <param name="id">The ID of the removed adapter.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ObjectObserverOperations_">
            <summary>
            This interface allows applications to monitor IceGrid well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectInit(IceGrid.ObjectInfo[],Ice.Current)">
            <summary>
            objectInit is called after the registration of
            an observer to indicate the state of the registry.
            </summary>
            <param name="objects">The objects registered with the Admin
            interface (not through the deployment mechanism).</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectAdded(IceGrid.ObjectInfo,Ice.Current)">
            <summary>
            The objectAdded operation is called to notify an observer when an
            object was added to the Admin interface.
            </summary>
            <param name="info">The details of the added object.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectUpdated(IceGrid.ObjectInfo,Ice.Current)">
            <summary>
            objectUpdated is called to notify an observer when
            an object registered with the Admin interface was updated.
            </summary>
            <param name="info">The details of the updated object.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ObjectObserverOperations_.objectRemoved(Ice.Identity,Ice.Current)">
            <summary>
            objectRemoved is called to notify an observer when
            an object registered with the Admin interface was removed.
            </summary>
            <param name="id">The identity of the removed object.</param>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.AdminSessionOperations_">
             <summary>
             Used by administrative clients to view,
             update, and receive observer updates from the IceGrid
             registry.
             Admin sessions are created either via the Registry
             object or via the registry admin SessionManager object.
            
             </summary>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.keepAlive(Ice.Current)">
             <summary>
             Keep the session alive.
             Clients should call this operation
             regularly to prevent the server from reaping the session.
            
             </summary>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.getAdmin(Ice.Current)">
             <summary>
             Get the admin interface.
             The admin object returned by this
             operation can only be accessed by the session.
            
             </summary>
             <returns>The admin interface proxy.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.getAdminCallbackTemplate(Ice.Current)">
             <summary>
             Get a "template" proxy for admin callback objects.
             An Admin client uses this proxy to set the category of its callback
             objects, and the published endpoints of the object adapter hosting
             the admin callback objects.
            
             </summary>
             <returns>A template proxy. The returned proxy is null when the Admin
             session was established using Glacier2.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.setObservers(IceGrid.RegistryObserverPrx,IceGrid.NodeObserverPrx,IceGrid.ApplicationObserverPrx,IceGrid.AdapterObserverPrx,IceGrid.ObjectObserverPrx,Ice.Current)">
             <summary>
             Set the observer proxies that receive
             notifications when the state of the registry
             or nodes changes.
             </summary>
             <param name="registryObs">The registry observer.
            
             </param>
             <param name="nodeObs">The node observer.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <exception name="ObserverAlreadyRegisteredException">Raised if an
             observer is already registered with this registry.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.setObserversByIdentity(Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Identity,Ice.Current)">
             <summary>
             Set the observer identities that receive
             notifications the state of the registry
             or nodes changes.
             This operation should be used by clients that
             are using a bidirectional connection to communicate with the
             session.
            
             </summary>
             <param name="registryObs">The registry observer identity.
            
             </param>
             <param name="nodeObs">The node observer identity.
            
             </param>
             <param name="appObs">The application observer.
            
             </param>
             <param name="adptObs">The adapter observer.
            
             </param>
             <param name="objObs">The object observer.
            
             </param>
             <exception name="ObserverAlreadyRegisteredException">Raised if an
             observer is already registered with this registry.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.startUpdate(Ice.Current)">
             <summary>
             Acquires an exclusive lock to start updating the registry applications.
             </summary>
             <returns>The current serial.
            
             </returns>
             <exception name="AccessDeniedException">Raised if the exclusive lock can't be
             acquired. This might happen if the lock is currently acquired by
             another session.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.finishUpdate(Ice.Current)">
            <summary>
            Finish updating the registry and release the exclusive lock.
            </summary>
            <exception name="AccessDeniedException">Raised if the session doesn't hold the
            exclusive lock.</exception>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.getReplicaName(Ice.Current)">
            <summary>
            Get the name of the registry replica hosting this session.
            </summary>
            <returns>The replica name of the registry.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openServerLog(System.String,System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given server log file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="path">The path of the log file. A log file can be opened
             only if it's declared in the server or service deployment
             descriptor.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openServerStdErr(System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given server stderr file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openServerStdOut(System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given server stdout file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="id">The server id.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="ServerNotExistException">Raised if the server doesn't
             exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.
            
             </exception>
             <exception name="DeploymentException">Raised if the server couldn't be
             deployed on the node.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openNodeStdErr(System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given node stderr file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openNodeStdOut(System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given node stdout file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The node name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not
             be reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openRegistryStdErr(System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given registry stderr file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="RegistryNotExistException">Raised if the registry
             doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry
             could not be reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.AdminSessionOperations_.openRegistryStdOut(System.String,System.Int32,Ice.Current)">
             <summary>
             Open the given registry stdout file for reading.
             The file can be
             read with the returned file iterator.
            
             </summary>
             <param name="name">The registry name.
            
             </param>
             <param name="count">Specifies where to start reading the file. If
             negative, the file is read from the begining. If 0 or positive,
             the file is read from the last count lines.
            
             </param>
             <returns>An iterator to read the file.
            
             </returns>
             <exception name="FileNotAvailableException">Raised if the file can't be
             read.
            
             </exception>
             <exception name="RegistryNotExistException">Raised if the registry
             doesn't exist.
            
             </exception>
             <exception name="RegistryUnreachableException">Raised if the registry
             could not be reached.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.ApplicationNotExistException">
            <summary>
            This exception is raised if an application does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.ServerNotExistException">
            <summary>
            This exception is raised if a server does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.ServerStartException">
            <summary>
            This exception is raised if a server failed to start.
            </summary>
        </member>
        <member name="T:IceGrid.ServerStopException">
            <summary>
            This exception is raised if a server failed to stop.
            </summary>
        </member>
        <member name="T:IceGrid.AdapterNotExistException">
            <summary>
            This exception is raised if an adapter does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.ObjectExistsException">
            <summary>
            This exception is raised if an object already exists.
            </summary>
        </member>
        <member name="T:IceGrid.ObjectNotRegisteredException">
            <summary>
            This exception is raised if an object is not registered.
            </summary>
        </member>
        <member name="T:IceGrid.NodeNotExistException">
            <summary>
            This exception is raised if a node does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.RegistryNotExistException">
            <summary>
            This exception is raised if a registry does not exist.
            </summary>
        </member>
        <member name="T:IceGrid.DeploymentException">
            <summary>
            An exception for deployment errors.
            </summary>
        </member>
        <member name="T:IceGrid.NodeUnreachableException">
            <summary>
            This exception is raised if a node could not be reached.
            </summary>
        </member>
        <member name="T:IceGrid.ServerUnreachableException">
            <summary>
            This exception is raised if a server could not be reached.
            </summary>
        </member>
        <member name="T:IceGrid.RegistryUnreachableException">
            <summary>
            This exception is raised if a registry could not be reached.
            </summary>
        </member>
        <member name="T:IceGrid.BadSignalException">
            <summary>
            This exception is raised if an unknown signal was sent to
            to a server.
            </summary>
        </member>
        <member name="T:IceGrid.PatchException">
            <summary>
            This exception is raised if a patch failed.
            </summary>
        </member>
        <member name="T:IceGrid.AccessDeniedException">
            <summary>
            This exception is raised if a registry lock wasn't
            acquired or is already held by a session.
            </summary>
        </member>
        <member name="T:IceGrid.AllocationException">
            <summary>
            This exception is raised if the allocation of an object failed.
            </summary>
        </member>
        <member name="T:IceGrid.AllocationTimeoutException">
            <summary>
            This exception is raised if the request to allocate an object times
            out.
            </summary>
        </member>
        <member name="T:IceGrid.PermissionDeniedException">
            <summary>
            This exception is raised if a client is denied the ability to create
            a session with IceGrid.
            </summary>
        </member>
        <member name="T:IceGrid.ObserverAlreadyRegisteredException">
            <summary>
            This exception is raised if an observer is already registered with
            the registry.
            </summary>
        </member>
        <member name="T:IceGrid.FileNotAvailableException">
            <summary>
            This exception is raised if a file is not available.
            </summary>
        </member>
        <member name="T:IceGrid.ParseException">
            <summary>
            This exception is raised if an error occurs during parsing.
            </summary>
        </member>
        <member name="T:IceGrid.FileParserPrx">
            <summary>
            icegridadmin provides a FileParser
            object to transform XML files into ApplicationDescriptor
            objects.
            </summary>
        </member>
        <member name="M:IceGrid.FileParserPrx.parse(System.String,IceGrid.AdminPrx,Ice.OptionalContext)">
             <summary>
             Parse a file.
             </summary>
             <param name="xmlFile">Full pathname to the file.
            
             </param>
             <param name="adminProxy">An Admin proxy, used only to retrieve default
             templates when needed. May be null.
            
             </param>
             <returns>The application descriptor.
            
             </returns>
             <exception name="ParseException">Raised if an error occurred during parsing.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.FileParserPrx.parseAsync(System.String,IceGrid.AdminPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Parse a file.
             </summary>
             <param name="xmlFile">Full pathname to the file.
            
             </param>
             <param name="adminProxy">An Admin proxy, used only to retrieve default
             templates when needed. May be null.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.FileParserPrx.begin_parse(System.String,IceGrid.AdminPrx,Ice.OptionalContext)">
             <summary>
             Parse a file.
             </summary>
             <param name="xmlFile">Full pathname to the file.
            
             </param>
             <param name="adminProxy">An Admin proxy, used only to retrieve default
             templates when needed. May be null.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileParserPrx.begin_parse(System.String,IceGrid.AdminPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Parse a file.
             </summary>
             <param name="xmlFile">Full pathname to the file.
            
             </param>
             <param name="adminProxy">An Admin proxy, used only to retrieve default
             templates when needed. May be null.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileParserPrx.begin_parse(System.String,IceGrid.AdminPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Parse a file.
             </summary>
             <param name="xmlFile">Full pathname to the file.
            
             </param>
             <param name="adminProxy">An Admin proxy, used only to retrieve default
             templates when needed. May be null.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.FileParserPrx.end_parse(Ice.AsyncResult)">
             <summary>
             Parse a file.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The application descriptor.
            
             </returns>
        </member>
        <member name="T:IceGrid.FileParserOperations_">
            <summary>
            icegridadmin provides a FileParser
            object to transform XML files into ApplicationDescriptor
            objects.
            </summary>
        </member>
        <member name="M:IceGrid.FileParserOperations_.parse(System.String,IceGrid.AdminPrx,Ice.Current)">
             <summary>
             Parse a file.
             </summary>
             <param name="xmlFile">Full pathname to the file.
            
             </param>
             <param name="adminProxy">An Admin proxy, used only to retrieve default
             templates when needed. May be null.
            
             </param>
             <returns>The application descriptor.
            
             </returns>
             <exception name="ParseException">Raised if an error occurred during parsing.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.ReplicaGroupFilter.filter(System.String,System.String[],Ice.Connection,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Filter the the given set of adapters.
             </summary>
             <param name="replicaGroupId">The replica group ID.
            
             </param>
             <param name="adapterIds">The adpater IDs to filter.
            
             </param>
             <param name="con">The connection from the Ice client which is
             resolving the replica group endpoints.
            
             </param>
             <param name="ctx">The context from the Ice client which is resolving
             the replica group endpoints.
            
             </param>
             <returns>The filtered adapter IDs.</returns>
        </member>
        <member name="M:IceGrid.TypeFilter.filter(System.String,Ice.ObjectPrx[],Ice.Connection,System.Collections.Generic.Dictionary{System.String,System.String})">
             <summary>
             Filter the the given set of proxies.
             </summary>
             <param name="type">The type.
            
             </param>
             <param name="proxies">The proxies to filter.
            
             </param>
             <param name="con">The connection from the Ice client which is
             looking up well-known objects by type.
            
             </param>
             <param name="ctx">The context from the Ice client which is looking up
             well-known objects by type.
            
             </param>
             <returns>The filtered proxies.</returns>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getApplicationInfo(System.String)">
             <summary>
             Get an application descriptor.
             </summary>
             <param name="name">The application name.
            
             </param>
             <returns>The application descriptor.
            
             </returns>
             <exception name="ApplicationNotExistException">Raised if the application
             doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getServerInfo(System.String)">
             <summary>
             Get the server information for the server with the given id.
             </summary>
             <param name="id">The server id.
            
             </param>
             <exception name="ServerNotExistException">Raised if the server doesn't exist.
            
             </exception>
             <returns>The server information.</returns>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getAdapterServer(System.String)">
             <summary>
             Get the ID of the server to which the given adapter belongs.
             </summary>
             <param name="adapterId">The adapter ID.
            
             </param>
             <returns>The server ID or the empty string if the given
             identifier is not associated to an object adapter defined with
             an application descriptor.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter doesn't
             exist.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getAdapterApplication(System.String)">
             <summary>
             Get the name of the application to which the given adapter belongs.
             </summary>
             <param name="adapterId">The adapter ID.
            
             </param>
             <returns>The application name or the empty string if the given
             identifier is not associated to a replica group or object
             adapter defined with an application descriptor.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter doesn't
             exist.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getAdapterNode(System.String)">
             <summary>
             Get the name of the node to which the given adapter belongs.
             </summary>
             <param name="adapterId">The adapter ID.
            
             </param>
             <returns>The node name or the empty string if the given
             identifier is not associated to an object adapter defined with
             an application descriptor.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter doesn't
             exist.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getAdapterInfo(System.String)">
             <summary>
             Get the adapter information for the replica group or adapter
             with the given id.
             </summary>
             <param name="id">The adapter id.
            
             </param>
             <returns>A sequence of adapter information structures. If the
             given id refers to an adapter, this sequence will contain only
             one element. If the given id refers to a replica group, the
             sequence will contain the adapter information of each member of
             the replica group.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter or
             replica group doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getObjectInfo(Ice.Identity)">
             <summary>
             Get the object info for the object with the given identity.
             </summary>
             <param name="id">The identity of the object.
            
             </param>
             <returns>The object info.
            
             </returns>
             <exception name="ObjectNotRegisteredException">Raised if the object isn't
             registered with the registry.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getNodeInfo(System.String)">
             <summary>
             Get the node information for the node with the given name.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node information.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getNodeLoad(System.String)">
             <summary>
             Get the load averages of the node.
             </summary>
             <param name="name">The node name.
            
             </param>
             <returns>The node load information.
            
             </returns>
             <exception name="NodeNotExistException">Raised if the node doesn't exist.
            
             </exception>
             <exception name="NodeUnreachableException">Raised if the node could not be
             reached.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.getPropertyForAdapter(System.String,System.String)">
             <summary>
             Get the property value for the given property and adapter.
             The
             property is looked up in the server or service descriptor where
             the adapter is defined.
            
             </summary>
             <param name="adapterId">The adapter ID
            
             </param>
             <param name="name">The name of the property.
            
             </param>
             <returns>The property value.
            
             </returns>
             <exception name="AdapterNotExistException">Raised if the adapter doesn't exist.</exception>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.addReplicaGroupFilter(System.String,IceGrid.ReplicaGroupFilter)">
             <summary>
             Add a replica group filter.
             </summary>
             <param name="id">The identifier of the filter. This identifier must
             match the value of the "filter" attribute specified in the
             replica group descriptor. To filter dynamically registered
             replica groups, you should use the empty filter id.
            
             </param>
             <param name="filter">The filter implementation.</param>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.removeReplicaGroupFilter(System.String,IceGrid.ReplicaGroupFilter)">
             <summary>
             Remove a replica group filter.
             </summary>
             <param name="id">The identifier of the filter.
            
             </param>
             <param name="filter">The filter implementation.
            
             </param>
             <returns>True of the filter was removed, false otherwise.</returns>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.addTypeFilter(System.String,IceGrid.TypeFilter)">
             <summary>
             Add a type filter.
             </summary>
             <param name="type">The type to register this filter with.
            
             </param>
             <param name="filter">The filter implementation.</param>
        </member>
        <member name="M:IceGrid.RegistryPluginFacade.removeTypeFilter(System.String,IceGrid.TypeFilter)">
             <summary>
             Remove a type filter.
             </summary>
             <param name="type">The type to register this filter with.
            
             </param>
             <param name="filter">The filter implementation.
            
             </param>
             <returns>True of the filter was removed, false otherwise.</returns>
        </member>
        <member name="T:IceGrid.QueryPrx">
            <summary>
            The IceGrid query interface.
            This interface is accessible to
            Ice clients who wish to look up well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.QueryPrx.findObjectById(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Find a well-known object by identity.
             </summary>
             <param name="id">The identity.
            
             </param>
             <returns>The proxy or null if no such object has been found.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrx.findObjectByIdAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find a well-known object by identity.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectById(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Find a well-known object by identity.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectById(Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Find a well-known object by identity.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectById(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find a well-known object by identity.
             </summary>
             <param name="id">The identity.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.end_findObjectById(Ice.AsyncResult)">
            <summary>
            Find a well-known object by identity.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxy or null if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.findObjectByType(System.String,Ice.OptionalContext)">
             <summary>
             Find a well-known object by type.
             If there are several objects
             registered for the given type, the object is randomly
             selected.
            
             </summary>
             <param name="type">The object type.
            
             </param>
             <returns>The proxy or null, if no such object has been found.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrx.findObjectByTypeAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find a well-known object by type.
             If there are several objects
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectByType(System.String,Ice.OptionalContext)">
             <summary>
             Find a well-known object by type.
             If there are several objects
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectByType(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Find a well-known object by type.
             If there are several objects
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectByType(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find a well-known object by type.
             If there are several objects
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.end_findObjectByType(Ice.AsyncResult)">
            <summary>
            Find a well-known object by type.
            If there are several objects
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxy or null, if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,Ice.OptionalContext)">
             <summary>
             Find a well-known object by type on the least-loaded node.
             If
             the registry does not know which node hosts the object
             (for example, because the object was registered with a direct proxy), the
             registry assumes the object is hosted on a node that has a load
             average of 1.0.
            
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="sample">The sampling interval.
            
             </param>
             <returns>The proxy or null, if no such object has been found.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrx.findObjectByTypeOnLeastLoadedNodeAsync(System.String,IceGrid.LoadSample,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find a well-known object by type on the least-loaded node.
             If
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="sample">The sampling interval.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,Ice.OptionalContext)">
             <summary>
             Find a well-known object by type on the least-loaded node.
             If
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="sample">The sampling interval.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,Ice.AsyncCallback,System.Object)">
             <summary>
             Find a well-known object by type on the least-loaded node.
             If
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="sample">The sampling interval.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find a well-known object by type on the least-loaded node.
             If
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="sample">The sampling interval.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.end_findObjectByTypeOnLeastLoadedNode(Ice.AsyncResult)">
            <summary>
            Find a well-known object by type on the least-loaded node.
            If
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxy or null, if no such object has been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.findAllObjectsByType(System.String,Ice.OptionalContext)">
             <summary>
             Find all the well-known objects with the given type.
             </summary>
             <param name="type">The object type.
            
             </param>
             <returns>The proxies or an empty sequence, if no such objects
             have been found.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrx.findAllObjectsByTypeAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find all the well-known objects with the given type.
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findAllObjectsByType(System.String,Ice.OptionalContext)">
             <summary>
             Find all the well-known objects with the given type.
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findAllObjectsByType(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Find all the well-known objects with the given type.
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findAllObjectsByType(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find all the well-known objects with the given type.
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.end_findAllObjectsByType(Ice.AsyncResult)">
            <summary>
            Find all the well-known objects with the given type.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxies or an empty sequence, if no such objects
            have been found.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.findAllReplicas(Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Find all the object replicas associated with the given
             proxy.
             If the given proxy is not an indirect proxy from a
             replica group, an empty sequence is returned.
            
             </summary>
             <param name="proxy">The object proxy.
            
             </param>
             <returns>The proxies of each object replica or an empty sequence,
             if the given proxy is not from a replica group.</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryPrx.findAllReplicasAsync(Ice.ObjectPrx,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Find all the object replicas associated with the given
             proxy.
             If the given proxy is not an indirect proxy from a
             </summary>
             <param name="proxy">The object proxy.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findAllReplicas(Ice.ObjectPrx,Ice.OptionalContext)">
             <summary>
             Find all the object replicas associated with the given
             proxy.
             If the given proxy is not an indirect proxy from a
             </summary>
             <param name="proxy">The object proxy.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findAllReplicas(Ice.ObjectPrx,Ice.AsyncCallback,System.Object)">
             <summary>
             Find all the object replicas associated with the given
             proxy.
             If the given proxy is not an indirect proxy from a
             </summary>
             <param name="proxy">The object proxy.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.begin_findAllReplicas(Ice.ObjectPrx,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Find all the object replicas associated with the given
             proxy.
             If the given proxy is not an indirect proxy from a
             </summary>
             <param name="proxy">The object proxy.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.QueryPrx.end_findAllReplicas(Ice.AsyncResult)">
            <summary>
            Find all the object replicas associated with the given
            proxy.
            If the given proxy is not an indirect proxy from a
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxies of each object replica or an empty sequence,
            if the given proxy is not from a replica group.</returns>
        </member>
        <member name="T:IceGrid.RegistryPrx">
            <summary>
            The IceGrid registry allows clients create sessions
            directly with the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryPrx.createSession(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Create a client session.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrx.createSessionAsync(System.String,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Create a client session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createSession(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Create a client session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createSession(System.String,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Create a client session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createSession(System.String,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Create a client session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.end_createSession(Ice.AsyncResult)">
             <summary>
             Create a client session.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy for the newly created session.
            
             </returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.createAdminSession(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Create an administrative session.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrx.createAdminSessionAsync(System.String,System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Create an administrative session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createAdminSession(System.String,System.String,Ice.OptionalContext)">
             <summary>
             Create an administrative session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createAdminSession(System.String,System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Create an administrative session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createAdminSession(System.String,System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Create an administrative session.
             </summary>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.end_createAdminSession(Ice.AsyncResult)">
             <summary>
             Create an administrative session.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy for the newly created session.
            
             </returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.createSessionFromSecureConnection(Ice.OptionalContext)">
             <summary>
             Create a client session from a secure connection.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrx.createSessionFromSecureConnectionAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createSessionFromSecureConnection(Ice.OptionalContext)">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createSessionFromSecureConnection(Ice.AsyncCallback,System.Object)">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createSessionFromSecureConnection(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Create a client session from a secure connection.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.end_createSessionFromSecureConnection(Ice.AsyncResult)">
             <summary>
             Create a client session from a secure connection.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy for the newly created session.
            
             </returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.createAdminSessionFromSecureConnection(Ice.OptionalContext)">
             <summary>
             Create an administrative session from a secure connection.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrx.createAdminSessionFromSecureConnectionAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createAdminSessionFromSecureConnection(Ice.OptionalContext)">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createAdminSessionFromSecureConnection(Ice.AsyncCallback,System.Object)">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_createAdminSessionFromSecureConnection(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Create an administrative session from a secure connection.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.end_createAdminSessionFromSecureConnection(Ice.AsyncResult)">
             <summary>
             Create an administrative session from a secure connection.
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>A proxy for the newly created session.
            
             </returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.getSessionTimeout(Ice.OptionalContext)">
             <summary>
             Get the session timeout.
             If a client or administrative client
             doesn't call the session keepAlive method in the time interval
             defined by this timeout, IceGrid might reap the session.
            
             </summary>
             <returns>The timeout (in seconds).</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrx.getSessionTimeoutAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the session timeout.
            If a client or administrative client
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_getSessionTimeout(Ice.OptionalContext)">
            <summary>
            Get the session timeout.
            If a client or administrative client
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_getSessionTimeout(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the session timeout.
            If a client or administrative client
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_getSessionTimeout(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the session timeout.
            If a client or administrative client
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.end_getSessionTimeout(Ice.AsyncResult)">
            <summary>
            Get the session timeout.
            If a client or administrative client
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The timeout (in seconds).</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.getACMTimeout(Ice.OptionalContext)">
             <summary>
             Get the value of the ACM timeout.
             Clients supporting ACM
             connection heartbeats can enable them instead of explicitly
             sending keep alives requests.
            
             NOTE: This method is only available since Ice 3.6.
            
             </summary>
             <returns>The timeout (in seconds).</returns>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryPrx.getACMTimeoutAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_getACMTimeout(Ice.OptionalContext)">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_getACMTimeout(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.begin_getACMTimeout(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.RegistryPrx.end_getACMTimeout(Ice.AsyncResult)">
            <summary>
            Get the value of the ACM timeout.
            Clients supporting ACM
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The timeout (in seconds).</returns>
        </member>
        <member name="T:IceGrid.LocatorPrx">
            <summary>
            The IceGrid locator interface provides access to the Query
            and Registry object of the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.LocatorPrx.getLocalRegistry(Ice.OptionalContext)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the registry object.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrx.getLocalRegistryAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.begin_getLocalRegistry(Ice.OptionalContext)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.begin_getLocalRegistry(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.begin_getLocalRegistry(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.end_getLocalRegistry(Ice.AsyncResult)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxy of the registry object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.getLocalQuery(Ice.OptionalContext)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the query object.</returns>
            <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorPrx.getLocalQueryAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.begin_getLocalQuery(Ice.OptionalContext)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.begin_getLocalQuery(Ice.AsyncCallback,System.Object)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.begin_getLocalQuery(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.LocatorPrx.end_getLocalQuery(Ice.AsyncResult)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
            <returns>The proxy of the query object.</returns>
        </member>
        <member name="T:IceGrid.QueryOperations_">
            <summary>
            The IceGrid query interface.
            This interface is accessible to
            Ice clients who wish to look up well-known objects.
            </summary>
        </member>
        <member name="M:IceGrid.QueryOperations_.findObjectById(Ice.Identity,Ice.Current)">
             <summary>
             Find a well-known object by identity.
             </summary>
             <param name="id">The identity.
            
             </param>
             <returns>The proxy or null if no such object has been found.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findObjectByType(System.String,Ice.Current)">
             <summary>
             Find a well-known object by type.
             If there are several objects
             registered for the given type, the object is randomly
             selected.
            
             </summary>
             <param name="type">The object type.
            
             </param>
             <returns>The proxy or null, if no such object has been found.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findObjectByTypeOnLeastLoadedNode(System.String,IceGrid.LoadSample,Ice.Current)">
             <summary>
             Find a well-known object by type on the least-loaded node.
             If
             the registry does not know which node hosts the object
             (for example, because the object was registered with a direct proxy), the
             registry assumes the object is hosted on a node that has a load
             average of 1.0.
            
             </summary>
             <param name="type">The object type.
            
             </param>
             <param name="sample">The sampling interval.
            
             </param>
             <returns>The proxy or null, if no such object has been found.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findAllObjectsByType(System.String,Ice.Current)">
             <summary>
             Find all the well-known objects with the given type.
             </summary>
             <param name="type">The object type.
            
             </param>
             <returns>The proxies or an empty sequence, if no such objects
             have been found.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.QueryOperations_.findAllReplicas(Ice.ObjectPrx,Ice.Current)">
             <summary>
             Find all the object replicas associated with the given
             proxy.
             If the given proxy is not an indirect proxy from a
             replica group, an empty sequence is returned.
            
             </summary>
             <param name="proxy">The object proxy.
            
             </param>
             <returns>The proxies of each object replica or an empty sequence,
             if the given proxy is not from a replica group.</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.RegistryOperations_">
            <summary>
            The IceGrid registry allows clients create sessions
            directly with the registry.
            </summary>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createSession(System.String,System.String,Ice.Current)">
             <summary>
             Create a client session.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createAdminSession(System.String,System.String,Ice.Current)">
             <summary>
             Create an administrative session.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <param name="userId">The user id.
            
             </param>
             <param name="password">The password for the given user id.
            
             </param>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createSessionFromSecureConnection(Ice.Current)">
             <summary>
             Create a client session from a secure connection.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.createAdminSessionFromSecureConnection(Ice.Current)">
             <summary>
             Create an administrative session from a secure connection.
             </summary>
             <returns>A proxy for the newly created session.
            
             </returns>
             <exception name="PermissionDeniedException">Raised if the password for
             the given user id is not correct, or if the user is not allowed
             access.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.getSessionTimeout(Ice.Current)">
             <summary>
             Get the session timeout.
             If a client or administrative client
             doesn't call the session keepAlive method in the time interval
             defined by this timeout, IceGrid might reap the session.
            
             </summary>
             <returns>The timeout (in seconds).</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.RegistryOperations_.getACMTimeout(Ice.Current)">
             <summary>
             Get the value of the ACM timeout.
             Clients supporting ACM
             connection heartbeats can enable them instead of explicitly
             sending keep alives requests.
            
             NOTE: This method is only available since Ice 3.6.
            
             </summary>
             <returns>The timeout (in seconds).</returns>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.LocatorOperations_">
            <summary>
            The IceGrid locator interface provides access to the Query
            and Registry object of the IceGrid registry.
            </summary>
        </member>
        <member name="M:IceGrid.LocatorOperations_.getLocalRegistry(Ice.Current)">
            <summary>
            Get the proxy of the registry object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the registry object.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.LocatorOperations_.getLocalQuery(Ice.Current)">
            <summary>
            Get the proxy of the query object hosted by this IceGrid
            registry.
            </summary>
            <returns>The proxy of the query object.</returns>
            <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.SessionPrx">
             <summary>
             A session object is used by IceGrid clients to allocate and
             release objects.
             Client sessions are created either via the
             Registry object or via the registry client SessionManager
             object.
            
             </summary>
        </member>
        <member name="M:IceGrid.SessionPrx.keepAlive(Ice.OptionalContext)">
             <summary>
             Keep the session alive.
             Clients should call this operation
             regularly to prevent the server from reaping the session.
            
             </summary>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.keepAliveAsync(Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_keepAlive(Ice.OptionalContext)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_keepAlive(Ice.AsyncCallback,System.Object)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_keepAlive(Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.end_keepAlive(Ice.AsyncResult)">
            <summary>
            Keep the session alive.
            Clients should call this operation
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.allocateObjectById(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             operation might hang until the object is available or until the
             timeout is reached.
            
             </summary>
             <param name="id">The identity of the object to allocate.
            
             </param>
             <returns>The proxy of the allocated object.
            
             </returns>
             <exception name="ObjectNotRegisteredException">Raised if the object with
             the given identity is not registered with the registry.
            
             </exception>
             <exception name="AllocationException">Raised if the object can't be
             allocated.
            
             </exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.allocateObjectByIdAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             </summary>
             <param name="id">The identity of the object to allocate.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_allocateObjectById(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             </summary>
             <param name="id">The identity of the object to allocate.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_allocateObjectById(Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             </summary>
             <param name="id">The identity of the object to allocate.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_allocateObjectById(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             </summary>
             <param name="id">The identity of the object to allocate.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.end_allocateObjectById(Ice.AsyncResult)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The proxy of the allocated object.
            
             </returns>
        </member>
        <member name="M:IceGrid.SessionPrx.allocateObjectByType(System.String,Ice.OptionalContext)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             allocation timeout, this operation can block until an object
             becomes available or until the timeout is reached.
            
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <returns>The proxy of the allocated object.
            
             </returns>
             <exception name="AllocationException">Raised if the object could not be allocated.
            
             </exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.allocateObjectByTypeAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_allocateObjectByType(System.String,Ice.OptionalContext)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_allocateObjectByType(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_allocateObjectByType(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.end_allocateObjectByType(Ice.AsyncResult)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The proxy of the allocated object.
            
             </returns>
        </member>
        <member name="M:IceGrid.SessionPrx.releaseObject(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Release an object that was allocated using allocateObjectById or
             allocateObjectByType.
             </summary>
             <param name="id">The identity of the object to release.
            
             </param>
             <exception name="ObjectNotRegisteredException">Raised if the object with
             the given identity is not registered with the registry.
            
             </exception>
             <exception name="AllocationException">Raised if the given object can't be
             released. This might happen if the object isn't allocatable or
             isn't allocated by the session.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.releaseObjectAsync(Ice.Identity,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Release an object that was allocated using allocateObjectById or
             allocateObjectByType.
             </summary>
             <param name="id">The identity of the object to release.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_releaseObject(Ice.Identity,Ice.OptionalContext)">
             <summary>
             Release an object that was allocated using allocateObjectById or
             allocateObjectByType.
             </summary>
             <param name="id">The identity of the object to release.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_releaseObject(Ice.Identity,Ice.AsyncCallback,System.Object)">
             <summary>
             Release an object that was allocated using allocateObjectById or
             allocateObjectByType.
             </summary>
             <param name="id">The identity of the object to release.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_releaseObject(Ice.Identity,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Release an object that was allocated using allocateObjectById or
             allocateObjectByType.
             </summary>
             <param name="id">The identity of the object to release.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.end_releaseObject(Ice.AsyncResult)">
            <summary>
            Release an object that was allocated using allocateObjectById or
            allocateObjectByType.
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.setAllocationTimeout(System.Int32,Ice.OptionalContext)">
             <summary>
             Set the allocation timeout.
             If no objects are available for an
             allocation request, a call to allocateObjectById or
             allocateObjectByType will block for the duration of this
             timeout.
            
             </summary>
             <param name="timeout">The timeout in milliseconds.</param>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionPrx.setAllocationTimeoutAsync(System.Int32,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="context">Context map to send with the invocation.</param>
            <param name="progress">Sent progress provider.</param>
            <param name="cancel">A cancellation token that receives the cancellation requests.</param>
            <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_setAllocationTimeout(System.Int32,Ice.OptionalContext)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_setAllocationTimeout(System.Int32,Ice.AsyncCallback,System.Object)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.begin_setAllocationTimeout(System.Int32,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            </summary>
            <param name="timeout">The timeout in milliseconds.</param>
            <param name="context">The Context map to send with the invocation.</param>
            <param name="callback">Asynchronous callback invoked when the operation completes.</param>
            <param name="cookie">Application data to store in the asynchronous result object.</param>
            <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.SessionPrx.end_setAllocationTimeout(Ice.AsyncResult)">
            <summary>
            Set the allocation timeout.
            If no objects are available for an
            </summary>
            <param name="asyncResult">The asynchronous result object for the invocation.</param>
        </member>
        <member name="T:IceGrid.SessionOperations_">
             <summary>
             A session object is used by IceGrid clients to allocate and
             release objects.
             Client sessions are created either via the
             Registry object or via the registry client SessionManager
             object.
            
             </summary>
        </member>
        <member name="M:IceGrid.SessionOperations_.keepAlive(Ice.Current)">
             <summary>
             Keep the session alive.
             Clients should call this operation
             regularly to prevent the server from reaping the session.
            
             </summary>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionOperations_.allocateObjectByIdAsync(Ice.Identity,Ice.Current)">
             <summary>
             Allocate an object.
             Depending on the allocation timeout, this
             </summary>
             <param name="id">The identity of the object to allocate.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionOperations_.allocateObjectByTypeAsync(System.String,Ice.Current)">
             <summary>
             Allocate an object with the given type.
             Depending on the
             </summary>
             <param name="type">The type of the object.
            
             </param>
             <param name="current">The Current object for the invocation.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.SessionOperations_.releaseObject(Ice.Identity,Ice.Current)">
             <summary>
             Release an object that was allocated using allocateObjectById or
             allocateObjectByType.
             </summary>
             <param name="id">The identity of the object to release.
            
             </param>
             <exception name="ObjectNotRegisteredException">Raised if the object with
             the given identity is not registered with the registry.
            
             </exception>
             <exception name="AllocationException">Raised if the given object can't be
             released. This might happen if the object isn't allocatable or
             isn't allocated by the session.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="M:IceGrid.SessionOperations_.setAllocationTimeout(System.Int32,Ice.Current)">
             <summary>
             Set the allocation timeout.
             If no objects are available for an
             allocation request, a call to allocateObjectById or
             allocateObjectByType will block for the duration of this
             timeout.
            
             </summary>
             <param name="timeout">The timeout in milliseconds.</param>
             <param name="current">The Current object for the invocation.</param>
        </member>
        <member name="T:IceGrid.UserAccountNotFoundException">
            <summary>
            This exception is raised if a user account for a given session
            identifier can't be found.
            </summary>
        </member>
        <member name="T:IceGrid.UserAccountMapperPrx">
            <summary>
            A user account mapper object is used by IceGrid nodes to map
            session identifiers to user accounts.
            </summary>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrx.getUserAccount(System.String,Ice.OptionalContext)">
             <summary>
             Get the name of the user account for the given user.
             This is
             used by IceGrid nodes to figure out the user account to use
             to run servers.
            
             </summary>
             <param name="user">The value of the server descriptor's user
             attribute. If this attribute is not defined, and the server's
             activation mode is session, the default value of
             user is the session identifier.
            
             </param>
             <returns>The user account name.
            
             </returns>
             <exception name="UserAccountNotFoundException">Raised if no user account
             is found for the given user.</exception>
             <param name="context">The Context map to send with the invocation.</param>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrx.getUserAccountAsync(System.String,Ice.OptionalContext,System.IProgress{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Get the name of the user account for the given user.
             This is
             </summary>
             <param name="user">The value of the server descriptor's user
             attribute. If this attribute is not defined, and the server's
             activation mode is session, the default value of
             user is the session identifier.
            
             </param>
             <param name="context">Context map to send with the invocation.</param>
             <param name="progress">Sent progress provider.</param>
             <param name="cancel">A cancellation token that receives the cancellation requests.</param>
             <returns>The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrx.begin_getUserAccount(System.String,Ice.OptionalContext)">
             <summary>
             Get the name of the user account for the given user.
             This is
             </summary>
             <param name="user">The value of the server descriptor's user
             attribute. If this attribute is not defined, and the server's
             activation mode is session, the default value of
             user is the session identifier.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrx.begin_getUserAccount(System.String,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the name of the user account for the given user.
             This is
             </summary>
             <param name="user">The value of the server descriptor's user
             attribute. If this attribute is not defined, and the server's
             activation mode is session, the default value of
             user is the session identifier.
            
             </param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrx.begin_getUserAccount(System.String,Ice.OptionalContext,Ice.AsyncCallback,System.Object)">
             <summary>
             Get the name of the user account for the given user.
             This is
             </summary>
             <param name="user">The value of the server descriptor's user
             attribute. If this attribute is not defined, and the server's
             activation mode is session, the default value of
             user is the session identifier.
            
             </param>
             <param name="context">The Context map to send with the invocation.</param>
             <param name="callback">Asynchronous callback invoked when the operation completes.</param>
             <param name="cookie">Application data to store in the asynchronous result object.</param>
             <returns>An asynchronous result object.</returns>
        </member>
        <member name="M:IceGrid.UserAccountMapperPrx.end_getUserAccount(Ice.AsyncResult)">
             <summary>
             Get the name of the user account for the given user.
             This is
             </summary>
             <param name="asyncResult">The asynchronous result object for the invocation.</param>
             <returns>The user account name.
            
             </returns>
        </member>
        <member name="T:IceGrid.UserAccountMapperOperations_">
            <summary>
            A user account mapper object is used by IceGrid nodes to map
            session identifiers to user accounts.
            </summary>
        </member>
        <member name="M:IceGrid.UserAccountMapperOperations_.getUserAccount(System.String,Ice.Current)">
             <summary>
             Get the name of the user account for the given user.
             This is
             used by IceGrid nodes to figure out the user account to use
             to run servers.
            
             </summary>
             <param name="user">The value of the server descriptor's user
             attribute. If this attribute is not defined, and the server's
             activation mode is session, the default value of
             user is the session identifier.
            
             </param>
             <returns>The user account name.
            
             </returns>
             <exception name="UserAccountNotFoundException">Raised if no user account
             is found for the given user.</exception>
             <param name="current">The Current object for the invocation.</param>
        </member>
    </members>
</doc>
